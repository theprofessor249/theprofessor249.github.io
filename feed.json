{
    "version": "https://jsonfeed.org/version/1",
    "title": "培新",
    "description": "",
    "home_page_url": "https://theprofessor249.github.io",
    "items": [
        {
            "id": "https://theprofessor249.github.io/2021/06/06/%E5%85%B3%E4%BA%8E/",
            "url": "https://theprofessor249.github.io/2021/06/06/%E5%85%B3%E4%BA%8E/",
            "title": "关于",
            "date_published": "2021-06-06T14:23:40.159Z",
            "content_html": "<p>#此站站主：Alan</p>\n<p>详情请看菜单栏的关于页</p>\n<p>此站为 node 和 git 制作的静态网站</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/06/06/hello-world/",
            "url": "https://theprofessor249.github.io/2021/06/06/hello-world/",
            "title": "Hello Hexo",
            "date_published": "2021-06-06T14:23:40.148Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/29/python-1-day/",
            "url": "https://theprofessor249.github.io/2021/01/29/python-1-day/",
            "title": "python_1_day",
            "date_published": "2021-01-29T13:39:15.000Z",
            "content_html": "<p>Python 入门 (上)<br />\n 简介</p>\n<p>变量、运算符与数据类型</p>\n<ol>\n<li>注释</li>\n<li>运算符</li>\n<li>变量和赋值</li>\n<li>数据类型与转换</li>\n<li>print () 函数</li>\n</ol>\n<p>位运算</p>\n<ol>\n<li>原码、反码和补码</li>\n<li>按位运算</li>\n<li>利用位运算实现快速计算</li>\n<li>利用位运算实现整数集合</li>\n</ol>\n<p>条件语句</p>\n<ol>\n<li>if 语句</li>\n<li>if - else 语句</li>\n<li>if - elif - else 语句</li>\n<li>assert 关键词</li>\n</ol>\n<p>循环语句</p>\n<ol>\n<li>while 循环</li>\n<li>while - else 循环</li>\n<li>for 循环</li>\n<li>for - else 循环</li>\n<li>range () 函数</li>\n<li>enumerate () 函数</li>\n<li>break 语句</li>\n<li>continue 语句</li>\n<li>pass 语句</li>\n<li>推导式</li>\n</ol>\n<p>异常处理</p>\n<ol>\n<li>Python 标准异常总结</li>\n<li>Python 标准警告总结</li>\n<li>try - except 语句</li>\n<li>try - except - finally 语句</li>\n<li>try - except - else 语句</li>\n<li>raise 语句</li>\n</ol>\n<p>简介<br />\n Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>\n<p>本实验包括以下内容：</p>\n<p>变量、运算符与数据类型<br />\n注释<br />\n运算符<br />\n变量和赋值<br />\n数据类型与转换<br />\n print () 函数<br />\n位运算<br />\n原码、反码和补码<br />\n按位非操作～<br />\n 按位与操作 &amp;<br />\n 按位或操作 |<br />\n 按位异或操作 ^<br />\n 按位左移操作 &lt;&lt;<br />\n按位右移操作&gt;&gt;<br />\n 利用位运算实现快速计算<br />\n利用位运算实现整数集合<br />\n条件语句<br />\n if 语句<br />\n if - else 语句<br />\n if - elif - else 语句<br />\n assert 关键词<br />\n循环语句<br />\n while 循环<br />\n while - else 循环<br />\n for 循环<br />\n for - else 循环<br />\n range () 函数<br />\n enumerate () 函数<br />\n break 语句<br />\n continue 语句<br />\n pass 语句<br />\n推导式<br />\n异常处理<br />\n Python 标准异常总结<br />\n Python 标准警告总结<br />\n try - except 语句<br />\n try - except - finally 语句<br />\n try - except - else 语句<br />\n raise 语句<br />\n变量、运算符与数据类型</p>\n<ol>\n<li>注释<br />\n在 Python 中，# 表示注释，作用于整行。<br />\n【例子】单行注释</li>\n</ol>\n<pre><code class=\"language-pypthon\"># 这是一个注释\nprint(&quot;Hello world&quot;)\n​\n# Hello world\n</code></pre>\n<p>Hello world<br />\n''' ''' 或者 &quot;&quot;&quot;&quot;&quot;&quot; 表示区间注释，在三引号之间的所有内容被注释<br />\n【例子】多行注释</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这是多行注释，用三个单引号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>这是多行注释，用三个单引号</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这是多行注释，用三个单引号</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello china\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># Hello china0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>这是多行注释，用三个双引号</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>这是多行注释，用三个双引号 </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>这是多行注释，用三个双引号</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p>print(&quot;hello china&quot;)</p>\n<h1 id=\"hello-china\"><a class=\"anchor\" href=\"#hello-china\">#</a> hello china</h1>\n<p>Hello china<br />\nhello china<br />\n【我是测试题 1】请在下方代码块中打印 (print) 出 hello + 你的姓名<br />\n如：print (&quot;hello 老表&quot;)</p>\n<h1 id=\"写下你的答案\"><a class=\"anchor\" href=\"#写下你的答案\">#</a> 写下你的答案</h1>\n<p>​<br />\n2. 运算符<br />\n算术运算符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>操作符\t名称\t示例</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span>\t加\t<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span>\t减\t<span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span>\t乘\t<span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">/</span>\t除\t<span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">//</span>\t整除（地板除）\t<span class=\"token number\">3</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">%</span>\t取余\t<span class=\"token number\">3</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">**</span>\t幂\t<span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 12</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0.75</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8</span></pre></td></tr></table></figure><p>2<br />\n1<br />\n12<br />\n0.75<br />\n0<br />\n3<br />\n8<br />\n 比较运算符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>操作符\t名称\t示例</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span>\t大于\t<span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>=</span>\t大于等于\t<span class=\"token number\">2</span> <span class=\"token operator\">>=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>\t小于\t<span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;=</span>\t小于等于\t<span class=\"token number\">5</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">==</span>\t等于\t<span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">!=</span>\t不等于\t<span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">5</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>True<br />\nFalse<br />\nTrue<br />\nFalse<br />\nFalse<br />\nTrue<br />\n 逻辑运算符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>操作符\t名称\t示例</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">and</span>\t与\t<span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">or</span>\t或\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">not</span>\t非\t<span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p>True<br />\nFalse<br />\nFalse<br />\n 位运算符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>操作符\t名称\t示例</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">~</span>\t按位取反\t<span class=\"token operator\">~</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&amp;</span>\t按位与\t<span class=\"token number\">4</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>`\t`\t按位或</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">^</span>\t按位异或\t<span class=\"token number\">4</span> <span class=\"token operator\">^</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;&lt;</span>\t左移\t<span class=\"token number\">4</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span>\t右移\t<span class=\"token number\">4</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>【例子】有关二进制的运算，参见 “位运算” 部分的讲解。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b101</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -0b101 -5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b100 4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b101 5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">^</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">^</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b1 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b10000 16</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b1 1</span></pre></td></tr></table></figure><p>0b100<br />\n0b101<br />\n-0b101 -5<br />\n0b100 4<br />\n0b101 5<br />\n0b1 1<br />\n0b10000 16<br />\n0b1 1<br />\n 三元运算符</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    small <span class=\"token operator\">=</span> x</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    small <span class=\"token operator\">=</span> y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>small<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span></pre></td></tr></table></figure><p>4<br />\n 有了这个三元操作符的条件表达式，你可以使用一条语句来完成以上的条件判断和赋值操作。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>small <span class=\"token operator\">=</span> x <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> y <span class=\"token keyword\">else</span> y</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>small<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span></pre></td></tr></table></figure><p>4<br />\n 其他运算符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>操作符\t名称\t示例</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">in</span>\t存在\t<span class=\"token string\">'A'</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span>\t不存在\t<span class=\"token string\">'h'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">is</span>\t是\t<span class=\"token string\">\"hello\"</span> <span class=\"token keyword\">is</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">not</span> <span class=\"token keyword\">is</span>\t不是\t<span class=\"token string\">\"hello\"</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token string\">\"hello\"</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>letters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'A'</span> <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' exists'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'h'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' not exists'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># A exists</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># h not exists</span></pre></td></tr></table></figure><p>A exists<br />\nh not exists<br />\n【例子】比较的两个变量均指向不可变类型。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False False</span></pre></td></tr></table></figure><p>True True<br />\nFalse False<br />\n【例子】比较的两个变量均指向可变类型。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True False</span></pre></td></tr></table></figure><p>False True<br />\nTrue False<br />\n 注意：</p>\n<p>is, is not 对比的是两个变量的内存地址<br />\n ==, != 对比的是两个变量的值<br />\n比较的两个变量，指向的都是地址不可变的类型（str 等），那么 is，is not 和 ==，！= 是完全等价的。<br />\n对比的两个变量，指向的是地址可变的类型（list，dict，tuple 等），则两者是有区别的。<br />\n运算符的优先级</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>运算符\t描述</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">**</span>\t指数（最高优先级）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">~</span><span class=\"token operator\">+</span><span class=\"token operator\">-</span>\t按位翻转，一元加号和减号</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token operator\">/</span> <span class=\"token operator\">%</span> <span class=\"token operator\">//</span>\t乘，除，取模和取整除）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">+</span> <span class=\"token operator\">-</span>\t加法减法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span> <span class=\"token operator\">&lt;&lt;</span>\t右移，左移运算符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&amp;</span>\t位‘AND’</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">^</span><span class=\"token operator\">|</span>\t位运算符</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;=</span><span class=\"token operator\">&lt;></span><span class=\"token operator\">>=</span>\t比较运算符</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;></span><span class=\"token operator\">==</span><span class=\"token operator\">!=</span>\t等于运算符</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">=</span><span class=\"token operator\">%=</span><span class=\"token operator\">/=</span><span class=\"token operator\">//=</span><span class=\"token operator\">-=</span><span class=\"token operator\">+=</span><span class=\"token operator\">=</span><span class=\"token operator\">*=</span>\t赋值运算符</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">is</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span>\t身份运算符</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">in</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span>\t成员运算符</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">not</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">or</span>\t逻辑运算符</pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">**</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0.1111111111111111</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -12.5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token keyword\">and</span> <span class=\"token number\">4</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>-9<br />\n0.1111111111111111<br />\n0<br />\n-12.5<br />\nTrue<br />\n【我是测试题 2】下面这段代码的运行结果是什么？</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 运行一下结果就出来了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>变量和赋值<br />\n在使用变量之前，需要对其先赋值。<br />\n变量名可以包括字母、数字、下划线、但变量名不能以数字开头。<br />\nPython 变量名是大小写敏感的，foo != Foo。<br />\n【例子】</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>teacher <span class=\"token operator\">=</span> <span class=\"token string\">\"老马的程序人生\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>teacher<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 老马的程序人生</span></pre></td></tr></table></figure><p>老马的程序人生<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>first <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>second <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>third <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>third<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span></pre></td></tr></table></figure><p>5<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myTeacher <span class=\"token operator\">=</span> <span class=\"token string\">\"老马的程序人生\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yourTeacher <span class=\"token operator\">=</span> <span class=\"token string\">\"小马的程序人生\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ourTeacher <span class=\"token operator\">=</span> myTeacher <span class=\"token operator\">+</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> yourTeacher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ourTeacher<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 老马的程序人生，小马的程序人生</span></pre></td></tr></table></figure><p>老马的程序人生，小马的程序人生<br />\n【我是测试题 3】运行下面一段代码看看结果是什么？</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 运行一下就好啦</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"欢迎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"学习\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set_1<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">.</span> 数据类型与转换</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>类型\t名称\t示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">int</span>\t整型 <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'int'</span><span class=\"token operator\">></span>\t<span class=\"token operator\">-</span><span class=\"token number\">876</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">float</span>\t浮点型<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'float'</span><span class=\"token operator\">></span>\t<span class=\"token number\">3.149</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11.11</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin\">bool</span>\t布尔型<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'bool'</span><span class=\"token operator\">></span>\t<span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span></pre></td></tr></table></figure><p>整型</p>\n<p>【例子】通过 print () 可看出 a 的值，以及类 (class) 是 int。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1031</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 1031 &lt;class 'int'></span></pre></td></tr></table></figure><p>1031 &lt;class 'int'&gt;</p>\n<p>Python 里面万物皆对象（object），整型也不例外，只要是对象，就有相应的属性 （attributes） 和方法（methods）。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__',</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__',</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># '__float__', '__floor__', '__floordiv__', '__format__', '__ge__',</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># '__getattribute__', '__getnewargs__', '__gt__', '__hash__',</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># '__index__', '__init__', '__init_subclass__', '__int__', '__invert__',</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__',</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__',</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__',</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__',</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__',</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__',</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__',</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag',</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 'numerator', 'real', 'to_bytes']</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'__abs__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__add__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__and__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__bool__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__ceil__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__class__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__delattr__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__dir__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__divmod__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__eq__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__float__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__floor__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__floordiv__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__format__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__ge__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__getattribute__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__getnewargs__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__gt__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__hash__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__index__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__init__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__init_subclass__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__int__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__invert__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__le__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__lshift__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__lt__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__mod__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__mul__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__ne__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__neg__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__new__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__or__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__pos__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__pow__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__radd__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rand__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rdivmod__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__reduce__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__reduce_ex__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__repr__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rfloordiv__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rlshift__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rmod__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rmul__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__ror__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__round__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rpow__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rrshift__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rshift__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rsub__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rtruediv__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__rxor__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__setattr__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__sizeof__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__str__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__sub__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__subclasshook__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__truediv__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__trunc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__xor__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bit_length'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'conjugate'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'denominator'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'from_bytes'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'imag'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'numerator'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'real'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'to_bytes'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>对它们有个大概印象就可以了，具体怎么用，需要哪些参数 （argument），还需要查文档。看个 bit_length () 的例子。</p>\n<p>【例子】找到一个整数的二进制表示，再返回其长度。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1031</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b10000000111</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>bit_length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 11</span></pre></td></tr></table></figure><p>0b10000000111<br />\n11<br />\n 浮点型</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 1 &lt;class 'int'></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 1.0 &lt;class 'float'></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">0.00000023</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2.3e-7</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.3e-07</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.3e-07</span></pre></td></tr></table></figure><p>1 &lt;class 'int'&gt;<br />\n1.0 &lt;class 'float'&gt;<br />\n2.3e-07<br />\n2.3e-07<br />\n 有时候我们想保留浮点型的小数点后 n 位。可以用 decimal 包里的 Decimal 对象和 getcontext () 方法来实现。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> decimal</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> decimal <span class=\"token keyword\">import</span> Decimal</pre></td></tr></table></figure><p>Python 里面有很多用途广泛的包 (package)，用什么你就引进 (import) 什么。包也是对象，也可以用上面提到的 dir (decimal) 来看其属性和方法。</p>\n<p>【例子】getcontext () 显示了 Decimal 对象的默认精度值是 28 位 (prec=28)。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> decimal<span class=\"token punctuation\">.</span>getcontext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># capitals=1, clamp=0, flags=[], </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># traps=[InvalidOperation, DivisionByZero, Overflow])</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Context<span class=\"token punctuation\">(</span>prec<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> rounding<span class=\"token operator\">=</span>ROUND_HALF_EVEN<span class=\"token punctuation\">,</span> Emin<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">999999</span><span class=\"token punctuation\">,</span> Emax<span class=\"token operator\">=</span><span class=\"token number\">999999</span><span class=\"token punctuation\">,</span> capitals<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> clamp<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> traps<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>InvalidOperation<span class=\"token punctuation\">,</span> DivisionByZero<span class=\"token punctuation\">,</span> Overflow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 0.3333333333333333333333333333</span></pre></td></tr></table></figure><p>0.3333333333333333333333333333<br />\n【例子】使 1/3 保留 4 位，用 getcontext ().prec 来调整精度。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>decimal<span class=\"token punctuation\">.</span>getcontext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prec <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c <span class=\"token operator\">=</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 0.3333</span></pre></td></tr></table></figure><p>0.3333<br />\n 布尔型</p>\n<p>布尔 (boolean) 型变量只能取两个值，True 和 False。当把布尔型变量用在数字运算中，用 1 和 0 代表 True 和 False。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0</span></pre></td></tr></table></figure><p>2<br />\n1<br />\n0<br />\n 除了直接给变量赋值 True 和 False，还可以用 bool (X) 来创建变量，其中 X 可以是</p>\n<p>基本类型：整型、浮点型、布尔型<br />\n容器类型：字符串、元组、列表、字典和集合<br />\n【例子】bool 作用在基本类型变量：X 只要不是整型 0、浮点型 0.0，bool (X) 就是 True，其余就是 False。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># &lt;class 'int'> False True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># &lt;class 'float'> False True</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># &lt;class 'bool'> False True</span></pre></td></tr></table></figure><p>&lt;class 'int'&gt; False True<br />\n&lt;class 'float'&gt; False True<br />\n&lt;class 'bool'&gt; False True</p>\n<p>【例子】bool 作用在容器类型变量：X 只要不是空的变量，bool (X) 就是 True，其余就是 False。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># &lt;class 'str'> False True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># &lt;class 'tuple'> False True</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># &lt;class 'list'> False True</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># &lt;class 'dict'> False True</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># &lt;class 'set'> False True</span></pre></td></tr></table></figure><p>&lt;class 'str'&gt; False True<br />\n&lt;class 'tuple'&gt; False True<br />\n&lt;class 'list'&gt; False True<br />\n&lt;class 'dict'&gt; False True<br />\n&lt;class 'set'&gt; False True</p>\n<p>确定 bool (X) 的值是 True 还是 False，就看 X 是不是空，空的话就是 False，不空的话就是 True。</p>\n<p>对于数值变量，0, 0.0 都可认为是空的。<br />\n对于容器变量，里面没元素就是空的。<br />\n获取类型信息</p>\n<p>获取类型信息 type (object)<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5.2'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>True<br />\nTrue<br />\nTrue<br />\nTrue<br />\n 注：</p>\n<p>type () 不会认为子类是一种父类类型，不考虑继承关系。<br />\nisinstance () 会认为子类是一种父类类型，考虑继承关系。<br />\n如果要判断两个类型是否相同推荐使用 isinstance ()。</p>\n<p>类型转换</p>\n<p>转换为整型 int (x, base=10)<br />\n 转换为字符串 str (object='')<br />\n 转换为浮点型 float (x)<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">'520'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 520</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">520.52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 520</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'520.52'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 520.52</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">520</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 520.0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 20</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">5.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 15.3</span></pre></td></tr></table></figure><p>520<br />\n520<br />\n520.52<br />\n520.0<br />\n20<br />\n15.3<br />\n5. print () 函数<br />\n print (*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)<br />\n 将对象以字符串表示的方式格式化输出到流文件对象 file 里。其中所有非关键字参数都按 str () 方式进行转换为字符串输出；<br />\n关键字参数 sep 是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；<br />\n关键字参数 end 是输出结束时的字符，默认是换行符 \\n；<br />\n关键字参数 file 是定义流输出的文件，可以是标准的系统输出 sys.stdout，也可以重定义为别的文件；<br />\n关键字参数 flush 是立即把内容输出到流文件，不作缓存。<br />\n【例子】没有参数时，每次输出后都会换行。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shoplist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mango'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'carrot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is printed without 'end'and 'sep'.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> shoplist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># This is printed without 'end'and 'sep'.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># apple</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># mango</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># carrot</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># banana</span></pre></td></tr></table></figure><p>This is printed without 'end'and 'sep'.<br />\napple<br />\nmango<br />\ncarrot<br />\nbanana<br />\n【例子】每次输出结束都用 end 设置的参数 &amp; 结尾，并没有默认换行。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shoplist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mango'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'carrot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is printed with 'end='&amp;''.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> shoplist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># This is printed with 'end='&amp;''.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># apple&amp;mango&amp;carrot&amp;banana&amp;hello world</span></pre></td></tr></table></figure><p>This is printed with 'end='&amp;''.<br />\napple&amp;mango&amp;carrot&amp;banana&amp;hello world<br />\n【例子】item 值与 'another string' 两个值之间用 sep 设置的参数 &amp; 分割。由于 end 参数没有设置，因此默认是输出解释后换行，即 end 参数的默认值为 \\n。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shoplist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mango'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'carrot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is printed with 'sep='&amp;''.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> shoplist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> <span class=\"token string\">'another string'</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># This is printed with 'sep='&amp;''.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># apple&amp;another string</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># mango&amp;another string</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># carrot&amp;another string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># banana&amp;another string</span></pre></td></tr></table></figure><p>This is printed with 'sep='&amp;''.<br />\napple&amp;another string<br />\nmango&amp;another string<br />\ncarrot&amp;another string<br />\nbanana&amp;another string<br />\n 位运算</p>\n<ol>\n<li>原码、反码和补码<br />\n二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</li>\n</ol>\n<p>原码：就是其二进制表示（注意，有一位符号位）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr></table></figure><p>反码：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">00</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr></table></figure><p>补码：正数的补码就是原码，负数的补码是反码 + 1。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr></table></figure><p>符号位：最高位为符号位，0 表示正数，1 表示负数。在位运算中符号位也参与运算。</p>\n<ol start=\"2\">\n<li>按位运算<br />\n按位非操作～</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">~</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">~</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>~ 把 num 的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在～运算中同样会取反。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">~</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">10</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">~</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">00</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">4</span></pre></td></tr></table></figure><p>按位与操作 &amp;</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>只有两个对应位都为 1 时才为 1</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">00</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">4</span></pre></td></tr></table></figure><p>按位或操作 |</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>只要两个对应位中有一个 1 时就为 1</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">7</span></pre></td></tr></table></figure><p>按位异或操作 ^</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">^</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">^</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>只有两个对应位不同时才为 1</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">^</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr></table></figure><p>异或操作的性质：满足交换律和结合律</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A<span class=\"token punctuation\">:</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token number\">00</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>B<span class=\"token punctuation\">:</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A<span class=\"token operator\">^</span>B<span class=\"token punctuation\">:</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>B<span class=\"token operator\">^</span>A<span class=\"token punctuation\">:</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>A<span class=\"token operator\">^</span>A<span class=\"token punctuation\">:</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>A<span class=\"token operator\">^</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token number\">00</span></pre></td></tr></table></figure><p>A<sup>B</sup>A: = A<sup>A</sup>B = B = 00 00 01 11<br />\n 按位左移操作 &lt;&lt;<br />\nnum &lt;&lt; i 将 num 的二进制表示向左移动 i 位所得的值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">01</span> <span class=\"token number\">01</span> <span class=\"token number\">10</span> <span class=\"token number\">00</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">88</span></pre></td></tr></table></figure><p>按位右移操作 &gt;&gt;<br />\nnum &gt;&gt; i 将 num 的二进制表示向右移动 i 位所得的值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>利用位运算实现快速计算<br />\n通过 &lt;&lt;，&gt;&gt; 快速计算 2 的倍数问题。</li>\n</ol>\n<p>n &lt;&lt;1 -&gt; 计算 n<em>2<br />\nn &gt;&gt; 1 -&gt; 计算 n/2，负奇数的运算不可用<br />\n n &lt;&lt;m -&gt; 计算 n</em> (2^m)，即乘以 2 的 m 次方<br />\n n &gt;&gt; m -&gt; 计算 n/(2^m)，即除以 2 的 m 次方<br />\n 1 &lt;&lt;n -&gt; 2^n<br />\n 通过 ^ 快速交换两个整数。 通过 ^ 快速交换两个整数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">^</span><span class=\"token operator\">=</span> b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">^</span><span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">^</span><span class=\"token operator\">=</span> b</pre></td></tr></table></figure><p>通过 a &amp; (-a) 快速获取 a 的最后为 1 位置的整数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>利用位运算实现整数集合<br />\n一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</li>\n</ol>\n<p>比如集合 {1, 3, 4, 8}，可以表示成 01 00 01 10 10 而对应的位运算也就可以看作是对集合进行的操作。</p>\n<p>元素与集合的操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-</span><span class=\"token operator\">></span> 把 i 插入到集合中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> 把 i 从集合中删除</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-</span><span class=\"token operator\">></span> 判断 i 是否属于该集合（零不属于，非零属于）</pre></td></tr></table></figure><p>集合之间的操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a 补   <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">~</span>a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a 交 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">&amp;</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a 并 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">|</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a 差 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>b<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p>\n<p>【例子】C# 语言输出负数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    static void Main<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        string s1 <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span>ToString<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">//</span> <span class=\"token number\">11111111111111111111111111111101</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        string s2 <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span>ToString<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">//</span> fffffffd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【例子】 Python 的 bin () 输出。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -0b11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 0b11111111111111111111111111111101</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xfffffffd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 0b11111111111111111111111111111101</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xfffffffd</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4294967293</span></pre></td></tr></table></figure><p>0b11<br />\n-0b11<br />\n0b11111111111111111111111111111101<br />\n0b11111111111111111111111111111101<br />\n4294967293<br />\n 是不是很颠覆认知，我们从结果可以看出：</p>\n<p>Python 中 bin 一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。<br />\nPython 中的整型是补码形式存储的。<br />\nPython 中整型是不限制长度的不会超范围溢出。<br />\n所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数 0xffffffff 进行按位与操作，再交给 bin () 进行输出，得到的才是负数的补码表示。</p>\n<p>条件语句</p>\n<ol>\n<li>if 语句</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> expression<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    expr_true_suite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> 语句的 expr_true_suite 代码块只有当条件表达式 expression 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>单个 <span class=\"token keyword\">if</span> 语句中的 expression 条件表达式可以通过布尔操作符 <span class=\"token keyword\">and</span>，<span class=\"token keyword\">or</span>和<span class=\"token keyword\">not</span> 实现多重条件判断。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Correct Judgement!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># Correct Judgement!</span></pre></td></tr></table></figure><p>Correct Judgement!<br />\n2. if - else 语句</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> expression<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    expr_true_suite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    expr_false_suite</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Python 提供与 <span class=\"token keyword\">if</span> 搭配使用的 <span class=\"token keyword\">else</span>，如果 <span class=\"token keyword\">if</span> 语句的条件表达式结果布尔值为假，那么程序将执行 <span class=\"token keyword\">else</span> 语句后的代码。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>temp <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猜一猜小姐姐想的是哪个数字？\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>guess <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token comment\"># input 函数将接收的任何数据类型都默认为 str。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> guess <span class=\"token operator\">==</span> <span class=\"token number\">666</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你太了解小姐姐的心思了！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哼，猜对也没有奖励！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猜错了，小姐姐现在心里想的是666！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏结束，不玩儿啦！\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>猜一猜小姐姐想的是哪个数字？666<br />\n 你太了解小姐姐的心思了！<br />\n哼，猜对也没有奖励！<br />\n游戏结束，不玩儿啦！<br />\nif 语句支持嵌套，即在一个 if 语句中嵌入另一个 if 语句，从而构成不同层次的选择结构。</p>\n<p>【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意 else 的悬挂问题。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hi <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> hi <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> hi <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'好棒!好棒!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'切~'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 无输出</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>temp <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猜一猜小姐姐想的是哪个数字？\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>guess <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> guess <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大了，大了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> guess <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你太了解小姐姐的心思了！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哼，猜对也没有奖励！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小了，小了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏结束，不玩儿啦！\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>猜一猜小姐姐想的是哪个数字？8<br />\n 你太了解小姐姐的心思了！<br />\n哼，猜对也没有奖励！<br />\n游戏结束，不玩儿啦！<br />\n3. if - elif - else 语句</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> expression1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    expr1_true_suite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> expression2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    expr2_true_suite</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">elif</span> expressionN<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    exprN_true_suite</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    expr_false_suite</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">elif</span> 语句即为 <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span>，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>temp <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入成绩:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>source <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">100</span> <span class=\"token operator\">>=</span> source <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token number\">90</span> <span class=\"token operator\">></span> source <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token number\">80</span> <span class=\"token operator\">></span> source <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token number\">60</span> <span class=\"token operator\">></span> source <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入错误！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>请输入成绩<span class=\"token punctuation\">:</span><span class=\"token number\">99</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>A</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">assert</span> 关键词</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">assert</span>这个关键词我们称之为“断言”，当这个关键词后边的条件为 <span class=\"token boolean\">False</span> 时，程序自动崩溃并抛出AssertionError的异常。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'lsgogroup'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>my_list<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># AssertionError</span></pre></td></tr></table></figure><p>【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">assert</span> <span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># AssertionError</span></pre></td></tr></table></figure><p>循环语句</p>\n<ol>\n<li>while 循环<br />\n while 语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于 while 代码块的缩进语句。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> 布尔表达式<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码块</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span>循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>如果布尔表达式不带有<span class=\"token operator\">&lt;</span>、<span class=\"token operator\">></span>、<span class=\"token operator\">==</span>、！<span class=\"token operator\">=</span>、<span class=\"token keyword\">in</span>、<span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span>等运算符，仅仅给出数值之类的条件，也是可以的。当<span class=\"token keyword\">while</span>后写入一个非零整数时，视为真值，执行循环体；写入<span class=\"token number\">0</span>时，视为假值，不执行循环体。也可以写入<span class=\"token builtin\">str</span>、<span class=\"token builtin\">list</span>或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    temp <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猜一猜小姐姐想的是哪个数字？\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    guess <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> guess <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大了，大了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> guess <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你太了解小姐姐的心思了！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哼，猜对也没有奖励！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            count <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小了，小了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏结束，不玩儿啦！\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>猜一猜小姐姐想的是哪个数字？8<br />\n 你太了解小姐姐的心思了！<br />\n哼，猜对也没有奖励！<br />\n游戏结束，不玩儿啦！<br />\n【例子】布尔表达式返回 0，循环终止。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token operator\">=</span> <span class=\"token string\">'abcd'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> string<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    string <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># abcd</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># bcd</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># cd</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># d</span></pre></td></tr></table></figure><p>abcd<br />\nbcd<br />\ncd<br />\nd<br />\n2. while - else 循环</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> 布尔表达式<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码块</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    代码块</pre></td></tr></table></figure><p>当 while 循环正常执行完的情况下，执行 else 输出，如果 while 循环中执行了跳出循环的语句，比如 break，将不执行 else 代码块的内容。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is  less than 5\"</span> <span class=\"token operator\">%</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is not less than 5\"</span> <span class=\"token operator\">%</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 0 is  less than 5</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 1 is  less than 5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 2 is  less than 5</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3 is  less than 5</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 4 is  less than 5</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 5 is not less than 5</span></pre></td></tr></table></figure><p>0 is  less than 5<br />\n1 is  less than 5<br />\n2 is  less than 5<br />\n3 is  less than 5<br />\n4 is  less than 5<br />\n5 is not less than 5<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is  less than 5\"</span> <span class=\"token operator\">%</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d is not less than 5\"</span> <span class=\"token operator\">%</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 0 is  less than 5</span></pre></td></tr></table></figure><p>0 is  less than 5<br />\n3. for 循环<br />\n for 循环是迭代循环，在 Python 中相当于一个通用的序列迭代器，可以遍历任何有序序列，如 str、list、tuple 等，也可以遍历任何可迭代对象，如 dict。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> 迭代变量 <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码块</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token string\">'ILoveLSGO'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 不换行输出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># I L o v e L S G O</span></pre></td></tr></table></figure><p>I L o v e L S G O<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>member <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'刘六'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'周润发'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> member<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 张三</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 李四</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 刘德华</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 刘六</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 周润发</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 张三</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 李四</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 刘德华</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 刘六</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 周润发</span></pre></td></tr></table></figure><p>张三<br />\n李四<br />\n刘德华<br />\n刘六<br />\n周润发<br />\n张三<br />\n李四<br />\n刘德华<br />\n刘六<br />\n周润发<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># a:1 b:2 c:3 d:4</span></pre></td></tr></table></figure><p>a:1 b:2 c:3 d:4<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># a b c d</span></pre></td></tr></table></figure><p>a b c d<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> dic<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 1 2 3 4</span></pre></td></tr></table></figure><p>1 2 3 4<br />\n4. for - else 循环</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> 迭代变量 <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码块</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    代码块</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>当<span class=\"token keyword\">for</span>循环正常执行完的情况下，执行<span class=\"token keyword\">else</span>输出，如果<span class=\"token keyword\">for</span>循环中执行了跳出循环的语句，比如 <span class=\"token keyword\">break</span>，将不执行<span class=\"token keyword\">else</span>代码块的内容，与<span class=\"token keyword\">while</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">else</span>语句一样。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 迭代 10 到 20 之间的数字</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 根据因子迭代</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 确定第一个因子</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            j <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> i  <span class=\"token comment\"># 计算第二个因子</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d 等于 %d * %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">break</span>  <span class=\"token comment\"># 跳出当前循环</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 循环的 else 部分</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">'是一个质数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 10 等于 2 * 5</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 11 是一个质数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 12 等于 2 * 6</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 13 是一个质数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 14 等于 2 * 7</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 15 等于 3 * 5</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 16 等于 2 * 8</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 17 是一个质数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 18 等于 2 * 9</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 19 是一个质数</span></pre></td></tr></table></figure><p>10 等于 2 * 5<br />\n11 是一个质数<br />\n 12 等于 2 * 6<br />\n13 是一个质数<br />\n 14 等于 2 * 7<br />\n15 等于 3 * 5<br />\n16 等于 2 * 8<br />\n17 是一个质数<br />\n 18 等于 2 * 9<br />\n19 是一个质数<br />\n 5. range () 函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span> stop<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个 BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。<br />\nstep=1 表示第三个参数的默认值是 1。<br />\nrange 这个 BIF 的作用是生成一个从 start 参数的值开始到 stop 参数的值结束的数字序列，该序列包含 start 的值但不包含 stop 的值。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 不包含 9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 5</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 6</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 7</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 8</span></pre></td></tr></table></figure><p>2<br />\n3<br />\n4<br />\n5<br />\n6<br />\n7<br />\n8<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 7</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 9</span></pre></td></tr></table></figure><p>1<br />\n3<br />\n5<br />\n7<br />\n9<br />\n6. enumerate () 函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>sequence：一个序列、迭代器或其他支持迭代对象。<br />\nstart：下标起始位置。<br />\n返回 enumerate (枚举) 对象<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>seasons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Spring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Summer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fall'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Winter'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lst <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lst <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>seasons<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 下标从 1 开始</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Spring'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Summer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fall'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Winter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Spring'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Summer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fall'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Winter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>enumerate () 与 for 循环的结合使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> a <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    do something <span class=\"token keyword\">with</span> a  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>用 <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> 不仅返回了 A 中的元素，还顺便给该元素一个索引值 <span class=\"token punctuation\">(</span>默认从 <span class=\"token number\">0</span> 开始<span class=\"token punctuation\">)</span>。此外，用 <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> 还可以确定索引起始值为 j。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>languages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Matlab'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C++'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> language <span class=\"token keyword\">in</span> languages<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I love'</span><span class=\"token punctuation\">,</span> language<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Done!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># I love Python</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># I love R</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># I love Matlab</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># I love C++</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Done!</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> language <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>languages<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token string\">'I love'</span><span class=\"token punctuation\">,</span> language<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Done!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 2 I love Python</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 3 I love R</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 4 I love Matlab</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 5 I love C++</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># Done!</span></pre></td></tr></table></figure><p>I love Python<br />\nI love R<br />\nI love Matlab<br />\nI love C++<br />\nDone!<br />\n2 I love Python<br />\n3 I love R<br />\n4 I love Matlab<br />\n5 I love C++<br />\nDone!<br />\n7. break 语句<br />\n break 语句可以跳出当前所在层的循环。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>secret <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#[1,10] 之间的随机数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    temp <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猜一猜小姐姐想的是哪个数字？\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    guess <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> guess <span class=\"token operator\">></span> secret<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大了，大了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> guess <span class=\"token operator\">==</span> secret<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你太了解小姐姐的心思了！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哼，猜对也没有奖励！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小了，小了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏结束，不玩儿啦！\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>猜一猜小姐姐想的是哪个数字？8<br />\n 你太了解小姐姐的心思了！<br />\n哼，猜对也没有奖励！<br />\n游戏结束，不玩儿啦！<br />\n8. continue 语句<br />\n continue 终止本轮循环并开始下一轮循环。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 4</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 6</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 5</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 8</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 7</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 10</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 9</span></pre></td></tr></table></figure><p>2<br />\n1<br />\n4<br />\n3<br />\n6<br />\n5<br />\n8<br />\n7<br />\n10<br />\n9<br />\n9. pass 语句<br />\n pass 语句的意思是 “不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 pass 语句就是用来解决这些问题的。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">a_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># SyntaxError: unexpected EOF while parsing</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">a_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">pass</span>是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管<span class=\"token keyword\">pass</span>语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个<span class=\"token keyword\">pass</span>语句，让代码可以正常运行。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">10</span><span class=\"token punctuation\">.</span> 推导式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>列表推导式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span> expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># [-8, -4, 0, 4, 8]</span></pre></td></tr></table></figure><p>[-8, -4, 0, 4, 8]<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></pre></td></tr></table></figure><p>[1, 4, 9, 16, 25, 36, 49, 64, 81]<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</span></pre></td></tr></table></figure><p>[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]</span></pre></td></tr></table></figure><p>[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span></pre></td></tr></table></figure><p>[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]</span></pre></td></tr></table></figure><p>[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]<br />\n[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> j <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># [(0, 2)]</span></pre></td></tr></table></figure><p>[(0, 2)]<br />\n 元组推导式<br />\n ` python<br />\n( expr for value in collection [if condition] )</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># &lt;generator object &lt;genexpr> at 0x0000025BE511CC48></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> <span class=\"token operator\">&lt;</span>genexpr<span class=\"token operator\">></span> at <span class=\"token number\">0x0000014CEC2E28B8</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)<br />\n 字典推导式</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> key_expr<span class=\"token punctuation\">:</span> value_expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># &#123;0: True, 3: False, 6: True, 9: False&#125;</span></pre></td></tr></table></figure><p>{0: True, 3: False, 6: True, 9: False}<br />\n 集合推导式</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># &#123;1, 2, 3, 4, 5, 6&#125;</span></pre></td></tr></table></figure><p>{1, 2, 3, 4, 5, 6}<br />\n 其它</p>\n<pre><code>next(iterator[, default]) Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.\n</code></pre>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># &lt;generator object &lt;genexpr> at 0x0000007A0B8D01B0></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> each <span class=\"token keyword\">in</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 2 3 4 5 6 7 8 9</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> <span class=\"token operator\">&lt;</span>genexpr<span class=\"token operator\">></span> at <span class=\"token number\">0x0000014CEC389C78</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>0<br />\n1<br />\n2 3 4 5 6 7 8 9<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5050</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5050</span></pre></td></tr></table></figure><p>5050<br />\n5050<br />\n 异常处理<br />\n异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。</p>\n<ol>\n<li>Python 标准异常总结<br />\n BaseException：所有异常的 基类<br />\n Exception：常规异常的 基类<br />\n StandardError：所有的内建标准异常的基类<br />\n ArithmeticError：所有数值计算异常的基类<br />\n FloatingPointError：浮点计算异常<br />\n OverflowError：数值运算超出最大限制<br />\n ZeroDivisionError：除数为零<br />\n AssertionError：断言语句（assert）失败<br />\n AttributeError：尝试访问未知的对象属性<br />\n EOFError：没有内建输入，到达 EOF 标记<br />\n EnvironmentError：操作系统异常的基类<br />\n IOError：输入 / 输出操作失败<br />\n OSError：操作系统产生的异常（例如打开一个不存在的文件）<br />\nWindowsError：系统调用失败<br />\n ImportError：导入模块失败的时候<br />\n KeyboardInterrupt：用户中断执行<br />\n LookupError：无效数据查询的基类<br />\n IndexError：索引超出序列的范围<br />\n KeyError：字典中查找一个不存在的关键字<br />\n MemoryError：内存溢出（可通过删除对象释放内存）<br />\nNameError：尝试访问一个不存在的变量<br />\n UnboundLocalError：访问未初始化的本地变量<br />\n ReferenceError：弱引用试图访问已经垃圾回收了的对象<br />\n RuntimeError：一般的运行时异常<br />\n NotImplementedError：尚未实现的方法<br />\n SyntaxError：语法错误导致的异常<br />\n IndentationError：缩进错误导致的异常<br />\n TabError：Tab 和空格混用<br />\n SystemError：一般的解释器系统异常<br />\n TypeError：不同类型间的无效操作<br />\n ValueError：传入无效的参数<br />\n UnicodeError：Unicode 相关的异常<br />\n UnicodeDecodeError：Unicode 解码时的异常<br />\n UnicodeEncodeError：Unicode 编码错误导致的异常<br />\n UnicodeTranslateError：Unicode 转换错误导致的异常<br />\n异常体系内部有层次关系，Python 异常体系中的部分关系如下所示：</li>\n</ol>\n<p>Image</p>\n<ol start=\"2\">\n<li>Python 标准警告总结<br />\n Warning：警告的基类<br />\n DeprecationWarning：关于被弃用的特征的警告<br />\n FutureWarning：关于构造将来语义会有改变的警告<br />\n UserWarning：用户代码生成的警告<br />\n PendingDeprecationWarning：关于特性将会被废弃的警告<br />\n RuntimeWarning：可疑的运行时行为 (runtime behavior) 的警告<br />\n SyntaxWarning：可疑语法的警告<br />\n ImportWarning：用于在导入模块过程中触发的警告<br />\n UnicodeWarning：与 Unicode 相关的警告<br />\n BytesWarning：与字节或字节码相关的警告<br />\n ResourceWarning：与资源使用相关的警告</li>\n<li>try - except 语句<br />\n try:<br />\n 检测范围<br />\n except Exception [as reason]:<br />\n 出现异常后的处理代码<br />\n try 语句按照如下方式工作：</li>\n</ol>\n<p>首先，执行 try 子句（在关键字 try 和关键字 except 之间的语句）<br />\n如果没有异常发生，忽略 except 子句，try 子句执行后结束。<br />\n如果在执行 try 子句的过程中发生了异常，那么 try 子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的 except 子句将被执行。最后执行 try - except 语句之后的代码。<br />\n如果一个异常没有与任何的 except 匹配，那么这个异常将会传递给上层的 try 中。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">except</span> OSError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打开文件出错'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 打开文件出错</span></pre></td></tr></table></figure><p>打开文件出错<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">except</span> OSError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打开文件出错\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 打开文件出错</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 原因是：[Errno 2] No such file or directory: 'test.txt'</span></pre></td></tr></table></figure><p>打开文件出错<br />\n原因是：[Errno 2] No such file or directory: 'test.txt'<br />\n 一个 try 语句可能包含多个 except 子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">except</span> OSError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打开文件出错\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">except</span> TypeError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类型出错\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数值出错\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 数值出错</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 原因是：invalid literal for int () with base 10: 'abc'</span></pre></td></tr></table></figure><p>数值出错<br />\n原因是：invalid literal for int () with base 10: 'abc'<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    x <span class=\"token operator\">=</span> dict1<span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">except</span> LookupError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查询错误'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'键错误'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 查询错误</span></pre></td></tr></table></figure><p>查询错误<br />\n try-except-else 语句尝试查询不在 dict 中的键值对，从而引发了异常。这一异常准确地说应属于 KeyError，但由于 KeyError 是 LookupError 的子类，且将 LookupError 置于 KeyError 之前，因此程序优先执行该 except 代码块。所以，使用多个 except 代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    x <span class=\"token operator\">=</span> dict1<span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'键错误'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">except</span> LookupError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'查询错误'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 键错误</span></pre></td></tr></table></figure><p>键错误<br />\n【例子】一个 except 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>OSError<span class=\"token punctuation\">,</span> TypeError<span class=\"token punctuation\">,</span> ValueError<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> error<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出错了！\\n原因是：'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 出错了！</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 原因是：unsupported operand type (s) for +: 'int' and'str'</span></pre></td></tr></table></figure><p>出错了！<br />\n原因是：unsupported operand type (s) for +: 'int' and'str'<br />\n4. try - except - finally 语句<br />\n try: 检测范围 except Exception [as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码</p>\n<p>不管 try 子句里面有没有发生异常，finally 子句都会执行。</p>\n<p>【例子】如果一个异常在 try 子句里被抛出，而又没有任何的 except 把它截住，那么这个异常会在 finally 子句执行后被抛出。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        result <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result is\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"division by zero!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"executing finally clause\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>divide<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># result is 2.0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># executing finally clause</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>divide<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># division by zero!</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># executing finally clause</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>divide<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># executing finally clause</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># TypeError: unsupported operand type(s) for /: 'str' and 'str'</span></pre></td></tr></table></figure><p>result is 2.0<br />\nexecuting finally clause<br />\ndivision by zero!<br />\nexecuting finally clause<br />\n5. try - except - else 语句<br />\n如果在 try 子句执行时没有发生异常，Python 将执行 else 语句后的语句。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    检测范围</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    出现异常后的处理代码</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    如果没有异常执行这块代码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ```</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>使用<span class=\"token keyword\">except</span>而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span> 检测范围 <span class=\"token keyword\">except</span><span class=\"token punctuation\">(</span>Exception1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> Exception2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>ExceptionN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> 发生以上多个异常中的一个，执行这块代码 <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> 如果没有异常执行这块代码</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>【例子】</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>``` python</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    fh <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testfile.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    fh<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"这是一个测试文件，用于测试异常!!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: 没有找到文件或读取文件失败\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内容写入文件成功\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    fh<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 内容写入文件成功</span></pre></td></tr></table></figure><p>内容写入文件成功<br />\n注意：else 语句的存在必须以 except 语句的存在为前提，在没有 except 语句的 try 语句中使用 else 语句，会引发语法错误。</p>\n<ol start=\"6\">\n<li>raise 语句<br />\n Python 使用 raise 语句抛出一个指定的异常。</li>\n</ol>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">raise</span> NameError<span class=\"token punctuation\">(</span><span class=\"token string\">'HiThere'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> NameError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An exception flew by!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># An exception flew by!</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">raise</span> NameError<span class=\"token punctuation\">(</span><span class=\"token string\">'HiThere'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">except</span> NameError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An exception flew by!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># An exception flew by!</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/29/python-2-day/",
            "url": "https://theprofessor249.github.io/2021/01/29/python-2-day/",
            "title": "python_2_day",
            "date_published": "2021-01-29T13:39:01.000Z",
            "content_html": "<p>Python 入门 (中)<br />\n 简介</p>\n<p>列表</p>\n<ol>\n<li>列表的定义</li>\n<li>列表的创建</li>\n<li>向列表中添加元素</li>\n<li>删除列表中的元素</li>\n<li>获取列表中的元素</li>\n<li>列表的常用操作符</li>\n<li>列表的其它方法<br />\n元组</li>\n<li>创建和访问一个元组</li>\n<li>更新和删除一个元组</li>\n<li>元组相关的操作符</li>\n<li>内置方法</li>\n<li>解压元组</li>\n</ol>\n<p>字符串</p>\n<ol>\n<li>字符串的定义</li>\n<li>字符串的切片与拼接</li>\n<li>字符串的常用内置方法</li>\n<li>字符串格式化</li>\n</ol>\n<p>字典</p>\n<ol>\n<li>可变类型与不可变类型</li>\n<li>字典的定义</li>\n<li>创建和访问字典</li>\n<li>字典的内置方法</li>\n</ol>\n<p>集合</p>\n<ol>\n<li>集合的创建</li>\n<li>访问集合中的值</li>\n<li>集合的内置方法</li>\n<li>集合的转换</li>\n<li>不可变集合</li>\n</ol>\n<p>序列</p>\n<ol>\n<li>针对序列的内置函数</li>\n</ol>\n<p>简介<br />\n Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>\n<p>本实验包括以下内容：</p>\n<p>列表<br />\n列表的定义<br />\n列表的创建<br />\n向列表中添加元素<br />\n删除列表中的元素<br />\n获取列表中的元素<br />\n列表的常用操作符<br />\n列表的其他方法<br />\n元组<br />\n创建和访问一个元组<br />\n更新和删除一个元组<br />\n元组相关的操作符<br />\n内置方法<br />\n解压元组<br />\n字符串<br />\n字符串的定义<br />\n字符串的切片与拼接<br />\n字符串的常用内置方法<br />\n字符串格式化<br />\n字典<br />\n可变类型与不可变类型<br />\n字典的定义<br />\n创建和访问字典<br />\n字典的内置方法<br />\n集合<br />\n集合的创建<br />\n访问集合中的值<br />\n集合的内置方法<br />\n集合的转换<br />\n不可变集合<br />\n序列<br />\n针对序列的内置函数<br />\n列表<br />\n简单数据类型</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>整型<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'int'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>浮点型<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'float'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>布尔型<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'bool'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>容器数据类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>列表<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'list'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>元组<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'tuple'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>字典<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'dict'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>集合<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'set'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>字符串<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'str'</span><span class=\"token operator\">></span></pre></td></tr></table></figure><ol>\n<li>列表的定义<br />\n列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为 [元素 1, 元素 2, ..., 元素 n]。</li>\n</ol>\n<p>关键点是「中括号 []」和「逗号，」<br />\n中括号 把所有元素绑在一起<br />\n逗号 将每个元素一一分开<br />\n 2. 列表的创建<br />\n创建一个普通列表<br />\n【例子】</p>\n<pre><code>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nprint(x, type(x))\n# ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] &lt;class 'list'&gt;\n​\nx = [2, 3, 4, 5, 6, 7]\nprint(x, type(x))\n# [2, 3, 4, 5, 6, 7] &lt;class 'list'&gt;\n</code></pre>\n<p>['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] &lt;class 'list'&gt;<br />\n[2, 3, 4, 5, 6, 7] &lt;class 'list'&gt;<br />\n 利用 range () 创建列表<br />\n【例子】</p>\n<pre><code>x = list(range(10))\nprint(x, type(x))\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class 'list'&gt;\n​\nx = list(range(1, 11, 2))\nprint(x, type(x))\n# [1, 3, 5, 7, 9] &lt;class 'list'&gt;\n​\nx = list(range(10, 1, -2))\nprint(x, type(x))\n# [10, 8, 6, 4, 2] &lt;class 'list'&gt;\n</code></pre>\n<p>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class 'list'&gt;<br />\n[1, 3, 5, 7, 9] &lt;class 'list'&gt;<br />\n[10, 8, 6, 4, 2] &lt;class 'list'&gt;<br />\n 利用推导式创建列表<br />\n【例子】</p>\n<pre><code>x = [0] * 5\nprint(x, type(x))\n# [0, 0, 0, 0, 0] &lt;class 'list'&gt;\n​\nx = [0 for i in range(5)]\nprint(x, type(x))\n# [0, 0, 0, 0, 0] &lt;class 'list'&gt;\n​\nx = [i for i in range(10)]\nprint(x, type(x))\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class 'list'&gt;\n</code></pre>\n<p>​<br />\nx = [i for i in range(1, 10, 2)]<br />\nprint(x, type(x))</p>\n<h1 id=\"1-3-5-7-9-class-list\"><a class=\"anchor\" href=\"#1-3-5-7-9-class-list\">#</a> [1, 3, 5, 7, 9] &lt;class 'list'&gt;</h1>\n<p>​<br />\nx = [i for i in range(10, 1, -2)]<br />\nprint(x, type(x))</p>\n<h1 id=\"10-8-6-4-2-class-list\"><a class=\"anchor\" href=\"#10-8-6-4-2-class-list\">#</a> [10, 8, 6, 4, 2] &lt;class 'list'&gt;</h1>\n<p>​<br />\nx = [i ** 2 for i in range(1, 10)]<br />\nprint(x, type(x))</p>\n<h1 id=\"1-4-9-16-25-36-49-64-81-class-list\"><a class=\"anchor\" href=\"#1-4-9-16-25-36-49-64-81-class-list\">#</a> [1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class 'list'&gt;</h1>\n<p>​<br />\nx = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]<br />\nprint(x, type(x))<br />\n​</p>\n<h1 id=\"3-9-15-21-27-33-39\"><a class=\"anchor\" href=\"#3-9-15-21-27-33-39\">#</a> [3, 9, 15, 21, 27, 33, 39,</h1>\n<p>[0, 0, 0, 0, 0] &lt;class 'list'&gt;<br />\n[0, 0, 0, 0, 0] &lt;class 'list'&gt;<br />\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class 'list'&gt;<br />\n[1, 3, 5, 7, 9] &lt;class 'list'&gt;<br />\n[10, 8, 6, 4, 2] &lt;class 'list'&gt;<br />\n[1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class 'list'&gt;<br />\n[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99] &lt;class 'list'&gt;<br />\n 注意：</p>\n<p>由于 list 的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的 [1,2,3]，也有 3 个指针和 3 个整数对象。</p>\n<p>x = [a] * 4 操作中，只是创建 4 个指向 list 的引用，所以一旦 a 改变，x 中 4 个 a 也会随之改变。</p>\n<p>【例子】</p>\n<p>x = [[0] * 3] * 4<br />\nprint(x, type(x))</p>\n<h1 id=\"0-0-0-0-0-0-0-0-0-0-0-0-class-list\"><a class=\"anchor\" href=\"#0-0-0-0-0-0-0-0-0-0-0-0-class-list\">#</a> [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class 'list'&gt;</h1>\n<p>​<br />\nx[0][0] = 1<br />\nprint(x, type(x))</p>\n<h1 id=\"1-0-0-1-0-0-1-0-0-1-0-0-class-list\"><a class=\"anchor\" href=\"#1-0-0-1-0-0-1-0-0-1-0-0-class-list\">#</a> [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class 'list'&gt;</h1>\n<p>​<br />\na = [0] * 3<br />\nx = [a] * 4<br />\nprint(x, type(x))</p>\n<h1 id=\"0-0-0-0-0-0-0-0-0-0-0-0-class-list-2\"><a class=\"anchor\" href=\"#0-0-0-0-0-0-0-0-0-0-0-0-class-list-2\">#</a> [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class 'list'&gt;</h1>\n<p>​<br />\nx[0][0] = 1<br />\nprint(x, type(x))</p>\n<h1 id=\"1-0-0-1-0-0-1-0-0-1-0-0-class-list-2\"><a class=\"anchor\" href=\"#1-0-0-1-0-0-1-0-0-1-0-0-class-list-2\">#</a> [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class 'list'&gt;</h1>\n<p>[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class 'list'&gt;<br />\n[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class 'list'&gt;<br />\n[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class 'list'&gt;<br />\n[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class 'list'&gt;<br />\n 创建一个混合列表<br />\n【例子】</p>\n<p>mix = [1, 'lsgo', 3.14, [1, 2, 3]]<br />\nprint(mix, type(mix))</p>\n<h1 id=\"1-lsgo-314-1-2-3-class-list\"><a class=\"anchor\" href=\"#1-lsgo-314-1-2-3-class-list\">#</a> [1, 'lsgo', 3.14, [1, 2, 3]] &lt;class 'list'&gt;</h1>\n<p>[1, 'lsgo', 3.14, [1, 2, 3]] &lt;class 'list'&gt;<br />\n 创建一个空列表<br />\n【例子】</p>\n<p>empty = []<br />\nprint(empty, type(empty))  # [] &lt;class 'list'&gt;<br />\n[] &lt;class 'list'&gt;<br />\n 列表不像元组，列表内容可更改 (mutable)，因此附加 (append, extend)、插入 (insert)、删除 (remove, pop) 这些操作都可以用在它身上。</p>\n<ol start=\"3\">\n<li>向列表中添加元素<br />\n list.append (obj) 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。<br />\n【例子】</li>\n</ol>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nx.append('Thursday')<br />\nprint(x)</p>\n<h1 id=\"monday-tuesday-wednesday-thursday-friday-thursday\"><a class=\"anchor\" href=\"#monday-tuesday-wednesday-thursday-friday-thursday\">#</a> ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Thursday']</h1>\n<p>​<br />\nprint(len(x))  # 6<br />\n['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Thursday']<br />\n6<br />\n 此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意 append () 和 extend () 的区别。</p>\n<p>【例子】</p>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nx.append(['Thursday', 'Sunday'])<br />\nprint(x)</p>\n<h1 id=\"monday-tuesday-wednesday-thursday-friday-thursday-sunday\"><a class=\"anchor\" href=\"#monday-tuesday-wednesday-thursday-friday-thursday-sunday\">#</a> ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', ['Thursday', 'Sunday']]</h1>\n<p>​<br />\nprint(len(x))  # 6<br />\n['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', ['Thursday', 'Sunday']]<br />\n6<br />\nlist.extend (seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）<br />\n【例子】</p>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nx.extend(['Thursday', 'Sunday'])<br />\nprint(x)</p>\n<h1 id=\"monday-tuesday-wednesday-thursday-friday-thursday-sunday-2\"><a class=\"anchor\" href=\"#monday-tuesday-wednesday-thursday-friday-thursday-sunday-2\">#</a> ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Thursday', 'Sunday']</h1>\n<p>​<br />\nprint(len(x))  # 7<br />\n['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Thursday', 'Sunday']<br />\n7<br />\n 严格来说 append 是追加，把一个东西整体添加在列表后，而 extend 是扩展，把一个东西里的所有元素添加在列表后。</p>\n<p>list.insert (index, obj) 在编号 index 位置插入 obj。<br />\n【例子】</p>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nx.insert(2, 'Sunday')<br />\nprint(x)</p>\n<h1 id=\"monday-tuesday-sunday-wednesday-thursday-friday\"><a class=\"anchor\" href=\"#monday-tuesday-sunday-wednesday-thursday-friday\">#</a> ['Monday', 'Tuesday', 'Sunday', 'Wednesday', 'Thursday', 'Friday']</h1>\n<p>​<br />\nprint(len(x))  # 6<br />\n['Monday', 'Tuesday', 'Sunday', 'Wednesday', 'Thursday', 'Friday']<br />\n6<br />\n4. 删除列表中的元素<br />\n list.remove (obj) 移除列表中某个值的第一个匹配项<br />\n【例子】</p>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nx.remove('Monday')<br />\nprint(x)  # ['Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\n['Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\n list.pop ([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值<br />\n【例子】</p>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\ny = x.pop()<br />\nprint(y)  # Friday<br />\n​<br />\ny = x.pop(0)<br />\nprint(y)  # Monday<br />\n​<br />\ny = x.pop(-2)<br />\nprint(y)  # Wednesday<br />\nprint(x)  # ['Tuesday', 'Thursday']<br />\nFriday<br />\nMonday<br />\nWednesday<br />\n['Tuesday', 'Thursday']<br />\n remove 和 pop 都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。</p>\n<p>del var1 [, var2 ……] 删除单个或多个对象。<br />\n【例子】</p>\n<p>如果知道要删除的元素在列表中的位置，可使用 del 语句。</p>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\ndel x[0:2]<br />\nprint(x)  # ['Wednesday', 'Thursday', 'Friday']<br />\n['Wednesday', 'Thursday', 'Friday']<br />\n 如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用 del 语句；如果你要在删除元素后还能继续使用它，就使用方法 pop ()。</p>\n<ol start=\"5\">\n<li>获取列表中的元素<br />\n通过元素的索引值，从列表获取单个元素，注意，列表索引值是从 0 开始的。<br />\n通过将索引指定为 - 1，可让 Python 返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。<br />\n【例子】</li>\n</ol>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', ['Thursday', 'Friday']]<br />\nprint(x[0], type(x[0]))  # Monday &lt;class 'str'&gt;<br />\nprint(x[-1], type(x[-1]))  # ['Thursday', 'Friday'] &lt;class 'list'&gt;<br />\nprint(x[-2], type(x[-2]))  # Wednesday &lt;class 'str'&gt;<br />\nMonday &lt;class 'str'&gt;<br />\n['Thursday', 'Friday'] &lt;class 'list'&gt;<br />\nWednesday &lt;class 'str'&gt;<br />\n 切片的通用写法是 start : stop : step</p>\n<p>情况 1 - &quot;start :&quot;<br />\n 以 step 为 1 (默认) 从编号 start 往列表尾部切片。<br />\n【例子】</p>\n<p>x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nprint(x[3:])  # ['Thursday', 'Friday']<br />\nprint(x[-3:])  # ['Wednesday', 'Thursday', 'Friday']<br />\n['Thursday', 'Friday']<br />\n['Wednesday', 'Thursday', 'Friday']<br />\n 情况 2 - &quot;: stop&quot;<br />\n 以 step 为 1 (默认) 从列表头部往编号 stop 切片。<br />\n【例子】</p>\n<p>week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nprint(week[:3])  # ['Monday', 'Tuesday', 'Wednesday']<br />\nprint(week[:-3])  # ['Monday', 'Tuesday']<br />\n['Monday', 'Tuesday', 'Wednesday']<br />\n['Monday', 'Tuesday']<br />\n 情况 3 - &quot;start : stop&quot;<br />\n 以 step 为 1 (默认) 从编号 start 往编号 stop 切片。<br />\n【例子】</p>\n<p>week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nprint(week[1:3])  # ['Tuesday', 'Wednesday']<br />\nprint(week[-3:-1])  # ['Wednesday', 'Thursday']<br />\n['Tuesday', 'Wednesday']<br />\n['Wednesday', 'Thursday']<br />\n 情况 4 - &quot;start : stop : step&quot;<br />\n 以具体的 step 从编号 start 往编号 stop 切片。注意最后把 step 设为 -1，相当于将列表反向排列。<br />\n【例子】</p>\n<p>week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nprint(week[1:4:2])  # ['Tuesday', 'Thursday']<br />\nprint(week[:4:2])  # ['Monday', 'Wednesday']<br />\nprint(week[1::2])  # ['Tuesday', 'Thursday']<br />\nprint(week[::-1])</p>\n<h1 id=\"friday-thursday-wednesday-tuesday-monday\"><a class=\"anchor\" href=\"#friday-thursday-wednesday-tuesday-monday\">#</a> ['Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']</h1>\n<p>['Tuesday', 'Thursday']<br />\n['Monday', 'Wednesday']<br />\n['Tuesday', 'Thursday']<br />\n['Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']<br />\n 情况 5 - &quot;:&quot;<br />\n 复制列表中的所有元素（浅拷贝）。<br />\n【例子】</p>\n<p>eek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\nprint(week[:])</p>\n<h1 id=\"monday-tuesday-wednesday-thursday-friday\"><a class=\"anchor\" href=\"#monday-tuesday-wednesday-thursday-friday\">#</a> ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']</h1>\n<p>['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']<br />\n【例子】浅拷贝与深拷贝</p>\n<p>list1 = [123, 456, 789, 213]<br />\nlist2 = list1<br />\nlist3 = list1[:]<br />\n​<br />\nprint(list2)  # [123, 456, 789, 213]<br />\nprint(list3)  # [123, 456, 789, 213]<br />\nlist1.sort()<br />\nprint(list2)  # [123, 213, 456, 789]<br />\nprint(list3)  # [123, 456, 789, 213]<br />\n​<br />\nlist1 = [[123, 456], [789, 213]]<br />\nlist2 = list1<br />\nlist3 = list1[:]<br />\nprint(list2)  # [[123, 456], [789, 213]]<br />\nprint(list3)  # [[123, 456], [789, 213]]<br />\nlist1[0][0] = 111<br />\nprint(list2)  # [[111, 456], [789, 213]]<br />\nprint(list3)  # [[111, 456], [789, 213]]<br />\n[123, 456, 789, 213]<br />\n[123, 456, 789, 213]<br />\n[123, 213, 456, 789]<br />\n[123, 456, 789, 213]<br />\n[[123, 456], [789, 213]]<br />\n[[123, 456], [789, 213]]<br />\n[[111, 456], [789, 213]]<br />\n[[111, 456], [789, 213]]<br />\n 6. 列表的常用操作符<br />\n等号操作符：==<br />\n 连接操作符 +<br />\n 重复操作符 *<br />\n 成员关系操作符 in、not in<br />\n「等号 ==」，只有成员、成员位置都相同时才返回 True。</p>\n<p>列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> list2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> list3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>list4 <span class=\"token operator\">=</span> list1 <span class=\"token operator\">+</span> list2  <span class=\"token comment\"># extend()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list4<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [123, 456, 456, 123]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>list5 <span class=\"token operator\">=</span> list3 <span class=\"token operator\">*</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list5<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [123, 456, 123, 456, 123, 456]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>list3 <span class=\"token operator\">*=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [123, 456, 123, 456, 123, 456]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token keyword\">in</span> list3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> list3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p>False<br />\nTrue<br />\n[123, 456, 456, 123]<br />\n[123, 456, 123, 456, 123, 456]<br />\n[123, 456, 123, 456, 123, 456]<br />\nTrue<br />\nFalse<br />\n 前面三种方法（append, extend, insert）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。 而将两个 list 相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加 list。</p>\n<ol start=\"7\">\n<li>列表的其它方法<br />\n list.count (obj) 统计某个元素在列表中出现的次数</li>\n</ol>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [123, 456, 123, 456, 123, 456]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> 从列表中找出某个值第一个匹配项的索引位置</pre></td></tr></table></figure><p>【例子】</p>\n<p>list1 = [123, 456] * 5<br />\nprint(list1.index(123))  # 0<br />\nprint(list1.index(123, 1))  # 2<br />\nprint(list1.index(123, 3, 7))  # 4<br />\n0<br />\n2<br />\n4<br />\nlist.reverse () 反向列表中元素</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">789</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [789, 456, 123]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">789</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> 对原列表进行排序。</pre></td></tr></table></figure><p>key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br />\nreverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。<br />\n该方法没有返回值，但是会对列表的对象进行排序。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">789</span><span class=\"token punctuation\">,</span> <span class=\"token number\">213</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># [123, 213, 456, 789]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>x<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># [789, 456, 213, 123]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 获取列表的第二个元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">takeSecond</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> elem<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>x<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>takeSecond<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># [(4, 1), (2, 2), (1, 3), (3, 4)]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>x<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> a<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># [(1, 3), (2, 2), (3, 4), (4, 1)]</span></pre></td></tr></table></figure><p>[123, 213, 456, 789]<br />\n[789, 456, 213, 123]<br />\n[(4, 1), (2, 2), (1, 3), (3, 4)]<br />\n[(1, 3), (2, 2), (3, 4), (4, 1)]<br />\n 元组<br />\n「元组」定义语法为：(元素 1, 元素 2, ..., 元素 n)</p>\n<p>小括号把所有元素绑在一起<br />\n逗号将每个元素一一分开</p>\n<ol>\n<li>创建和访问一个元组<br />\n Python 的元组与列表类似，不同之处在于 tuple 被创建后就不能对其进行修改，类似字符串。<br />\n元组使用小括号，列表使用方括号。<br />\n元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。<br />\n【例子】</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># (1, 10.31, 'python') &lt;class 'tuple'></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># (1, 10.31, 'python') &lt;class 'tuple'></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tuple1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (6, 7, 8)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (1, 2, 3, 4, 5)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>tuple2 <span class=\"token operator\">=</span> tuple1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tuple2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (1, 2, 3, 4, 5, 6, 7, 8)</span></pre></td></tr></table></figure><p>(1, 10.31, 'python') &lt;class 'tuple'&gt;<br />\n(1, 10.31, 'python') &lt;class 'tuple'&gt;<br />\n2<br />\n(6, 7, 8)<br />\n(1, 2, 3, 4, 5)<br />\n(1, 2, 3, 4, 5, 6, 7, 8)<br />\n 创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。<br />\n元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'int'></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'list'></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'tuple'></span></pre></td></tr></table></figure><p>&lt;class 'int'&gt;<br />\n&lt;class 'tuple'&gt;<br />\n&lt;class 'list'&gt;<br />\n&lt;class 'tuple'&gt;<br />\n&lt;class 'tuple'&gt;<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 64</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (8, 8, 8, 8, 8, 8, 8, 8)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">64</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>【例子】创建二维元组。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># ((1, 10.31, 'python'), ('data', 11))</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># (1, 10.31, 'python')</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 1 10.31 python</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># (1, 10.31)</span></pre></td></tr></table></figure><p>((1, 10.31, 'python'), ('data', 11))<br />\n(1, 10.31, 'python')<br />\n1 10.31 python<br />\n(1, 10.31)<br />\n 2. 更新和删除一个元组<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>week <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tuesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friday'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>week <span class=\"token operator\">=</span> week<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Wednesday'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> week<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>week<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'Monday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tuesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wednesday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thursday'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Friday'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>【例子】元组有不可更改 <span class=\"token punctuation\">(</span>immutable<span class=\"token punctuation\">)</span> 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 <span class=\"token punctuation\">(</span>mutable<span class=\"token punctuation\">)</span>，那么我们可以直接更改其元素，注意这跟赋值其元素不同。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (1, 2, 3, [4, 5, 6])</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>t1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (1, 2, 3, [9, 5, 6])</span></pre></td></tr></table></figure><p>(1, 2, 3, [4, 5, 6])<br />\n(1, 2, 3, [9, 5, 6])<br />\n 3. 元组相关的操作符<br />\n等号操作符：==<br />\n 连接操作符 +<br />\n 重复操作符 *<br />\n 成员关系操作符 in、not in<br />\n「等号 ==」，只有成员、成员位置都相同时才返回 True。</p>\n<p>元组拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">==</span> t2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">==</span> t3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>t4 <span class=\"token operator\">=</span> t1 <span class=\"token operator\">+</span> t2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t4<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (123, 456, 456, 123)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>t5 <span class=\"token operator\">=</span> t3 <span class=\"token operator\">*</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t5<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (123, 456, 123, 456, 123, 456)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>t3 <span class=\"token operator\">*=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (123, 456, 123, 456, 123, 456)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token keyword\">in</span> t3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> t3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p>False<br />\nTrue<br />\n(123, 456, 456, 123)<br />\n(123, 456, 123, 456, 123, 456)<br />\n(123, 456, 123, 456, 123, 456)<br />\nTrue<br />\nFalse<br />\n4. 内置方法<br />\n元组大小和内容都不可更改，因此只有 count 和 index 两种方法。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">10.31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \\1</span></pre></td></tr></table></figure><p>1<br />\n1<br />\ncount ('python') 是记录在元组 t 中该元素出现几次，显然是 1 次<br />\n index (10.31) 是找到该元素在元组 t 的索引，显然是 1<br />\n5. 解压元组<br />\n【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）</p>\n<p>t = (1, 10.31, 'python')<br />\n(a, b, c) = t<br />\nprint(a, b, c)</p>\n<h1 id=\"1-1031-python\"><a class=\"anchor\" href=\"#1-1031-python\">#</a> 1 10.31 python</h1>\n<p>1 10.31 python<br />\n【例子】解压二维元组（按照元组里的元组结构来定义变量）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.31</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 1 10.31 OK python</span></pre></td></tr></table></figure><p>1 10.31 OK python<br />\n【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 rest 变量。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1 2 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [3, 4]</span></pre></td></tr></table></figure><p>1 2 5<br />\n[3, 4]<br />\n【例子】如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>_ <span class=\"token operator\">=</span> t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1 2</span></pre></td></tr></table></figure><p>1 2<br />\n 字符串</p>\n<ol>\n<li>字符串的定义<br />\n Python 中字符串被定义为引号之间的字符集合。<br />\nPython 支持使用成对的 单引号 或 双引号。<br />\n【例子】</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token string\">'i love Python!'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># i love Python! &lt;class 'str'></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token string\">\"I love Python!\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># I love Python! &lt;class 'str'></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 13</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'8'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 58</span></pre></td></tr></table></figure><p>i love Python! &lt;class 'str'&gt;<br />\nI love Python! &lt;class 'str'&gt;<br />\n13<br />\n58<br />\nPython 的常用转义字符<br />\n转义字符\t描述<br />\n \\\t反斜杠符号<br />\n '\t单引号<br />\n &quot;\t双引号<br />\n \\n\t换行<br />\n \\t\t横向制表符 (TAB)<br />\n\\r\t回车<br />\n【例子】如果字符串中需要出现单引号或双引号，可以使用转义符号 \\ 对字符串中的符号进行转义。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'let\\'s go'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># let's go</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"let's go\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># let's go</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\now'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># C:\\now</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Program Files\\\\Intel\\\\Wifi\\\\Help\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># C:\\Program Files\\Intel\\Wifi\\Help</span></pre></td></tr></table></figure><p>let's go<br />\nlet's go<br />\nC:\\now<br />\nC:\\Program Files\\Intel\\Wifi\\Help<br />\n【例子】原始字符串只需要在字符串前边加一个英文字母 r 即可。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'C:\\Program Files\\Intel\\Wifi\\Help'</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># C:\\Program Files\\Intel\\Wifi\\Help</span></pre></td></tr></table></figure><p>C:\\Program Files\\Intel\\Wifi\\Help<br />\n【例子】三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>para_str <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"这是一个多行字符串的实例</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>多行字符串可以使用制表符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>TAB ( \\t )。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>也可以使用换行符 [ \\n ]。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>para_str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 这是一个多行字符串的实例</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 多行字符串可以使用制表符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># TAB (    )。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 也可以使用换行符 [</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#  ]。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>para_str <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''这是一个多行字符串的实例</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>多行字符串可以使用制表符</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>TAB ( \\t )。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>也可以使用换行符 [ \\n ]。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>para_str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 这是一个多行字符串的实例</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 多行字符串可以使用制表符</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># TAB (      )。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 也可以使用换行符 [ </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#  ]。</span></pre></td></tr></table></figure><p>这是一个多行字符串的实例<br />\n多行字符串可以使用制表符<br />\n TAB (\t)。<br />\n也可以使用换行符 [<br />\n]。</p>\n<p>这是一个多行字符串的实例<br />\n多行字符串可以使用制表符<br />\n TAB (\t)。<br />\n也可以使用换行符 [<br />\n]。</p>\n<ol start=\"2\">\n<li>字符串的切片与拼接<br />\n类似于元组具有不可修改性<br />\n从 0 开始 (和 Java 一样)<br />\n 切片通常写成 start:end 这种形式，包括「start 索引」对应的元素，不包括「end 索引」对应的元素。<br />\n索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1。<br />\n【例子】</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str1 <span class=\"token operator\">=</span> <span class=\"token string\">'I Love LsgoGroup'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># I Love</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># e</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 插入的字符串 \"</span> <span class=\"token operator\">+</span> str1<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># I Love 插入的字符串  LsgoGroup</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token string\">'Python'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># th</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># yth</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># t</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># n</span></pre></td></tr></table></figure><p>I Love<br />\ne<br />\nI Love 插入的字符串  LsgoGroup<br />\nPython<br />\nth<br />\nyth<br />\nt<br />\nn<br />\n3. 字符串的常用内置方法<br />\n capitalize () 将字符串的第一个字符转换为大写。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">'xiaoxie'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>capitalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Xiaoxie</span></pre></td></tr></table></figure><p>Xiaoxie<br />\nlower () 转换字符串中所有大写字符为小写。<br />\nupper () 转换字符串中的小写字母为大写。<br />\nswapcase () 将字符串中大写转换为小写，小写转换为大写。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"DAXIExiaoxie\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># daxiexiaoxie</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># DAXIEXIAOXIE</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>swapcase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># daxieXIAOXIE</span></pre></td></tr></table></figure><p>daxiexiaoxie<br />\nDAXIEXIAOXIE<br />\ndaxieXIAOXIE<br />\ncount (str, beg= 0,end=len (string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"DAXIExiaoxie\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span></pre></td></tr></table></figure><p>2<br />\nendswith (suffix, beg=0, end=len (string)) 检查字符串是否以指定子字符串 suffix 结束，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。<br />\nstartswith (substr, beg=0,end=len (string)) 检查字符串是否以指定子字符串 substr 开头，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"DAXIExiaoxie\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'ie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'Da'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'DA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>True<br />\nFalse<br />\nFalse<br />\nTrue<br />\nfind (str, beg=0, end=len (string)) 检测 str 是否包含在字符串中，如果指定范围 beg 和 end，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。<br />\nrfind (str, beg=0,end=len (string)) 类似于 find () 函数，不过是从右边开始查找。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"DAXIExiaoxie\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'ix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span>rfind<span class=\"token punctuation\">(</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 9</span></pre></td></tr></table></figure><p>5<br />\n-1<br />\n9<br />\nisnumeric () 如果字符串中只包含数字字符，则返回 True，否则返回 False。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str3 <span class=\"token operator\">=</span> <span class=\"token string\">'12345'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str3 <span class=\"token operator\">+=</span> <span class=\"token string\">'a'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p>True<br />\nFalse<br />\nljust (width [, fillchar]) 返回一个原字符串左对齐，并使用 fillchar（默认空格）填充至长度 width 的新字符串。<br />\nrjust (width [, fillchar]) 返回一个原字符串右对齐，并使用 fillchar（默认空格）填充至长度 width 的新字符串。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str4 <span class=\"token operator\">=</span> <span class=\"token string\">'1101'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 11010000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 00001101</span></pre></td></tr></table></figure><p>11010000<br />\n00001101<br />\nlstrip ([chars]) 截掉字符串左边的空格或指定字符。<br />\nrstrip ([chars]) 删除字符串末尾的空格或指定字符。<br />\nstrip ([chars]) 在字符串上执行 lstrip () 和 rstrip ()。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str5 <span class=\"token operator\">=</span> <span class=\"token string\">' I Love LsgoGroup '</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 'I Love LsgoGroup '</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ' Love LsgoGroup '</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ' I Love LsgoGroup'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 'I Love LsgoGroup'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 'I Love LsgoGrou'</span></pre></td></tr></table></figure><p>I Love LsgoGroup<br />\nLove LsgoGroup<br />\nI Love LsgoGroup<br />\nI Love LsgoGroup<br />\nI Love LsgoGrou<br />\npartition (sub) 找到子字符串 sub，把字符串分为一个三元组 (pre_sub,sub,fol_sub)，如果字符串中不包含 sub 则返回 (' 原字符串 ','','')。<br />\nrpartition (sub) 类似于 partition () 方法，不过是从右边开始查找。<br />\n【例子】</p>\n<p>str5 = ' I Love LsgoGroup '<br />\nprint(str5.strip().partition('o'))  # ('I L', 'o', 've LsgoGroup')<br />\nprint(str5.strip().partition('m'))  # ('I Love LsgoGroup', '', '')<br />\nprint(str5.strip().rpartition('o'))  # ('I Love LsgoGr', 'o', 'up')<br />\n('I L', 'o', 've LsgoGroup')<br />\n('I Love LsgoGroup', '', '')<br />\n('I Love LsgoGr', 'o', 'up')<br />\n replace (old, new [, max]) 把 将字符串中的 old 替换成 new，如果 max 指定，则替换不超过 max 次。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str5 <span class=\"token operator\">=</span> <span class=\"token string\">' I Love LsgoGroup '</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'We'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># We Love LsgoGroup</span></pre></td></tr></table></figure><p>We Love LsgoGroup<br />\nsplit (str=&quot;&quot;, num) 不带参数默认是以空格为分隔符切片字符串，如果 num 参数有设置，则仅分隔 num 个子字符串，返回切片后的子字符串拼接的列表。<br />\n【例子】</p>\n<p>str5 = ' I Love LsgoGroup '<br />\nprint(str5.strip().split())  # ['I', 'Love', 'LsgoGroup']<br />\nprint(str5.strip().split('o'))  # ['I L', 've Lsg', 'Gr', 'up']<br />\n['I', 'Love', 'LsgoGroup']<br />\n['I L', 've Lsg', 'Gr', 'up']<br />\n【例子】</p>\n<p>u = &quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20uY24=\">www.baidu.com.cn</span>&quot;</p>\n<h1 id=\"使用默认分隔符\"><a class=\"anchor\" href=\"#使用默认分隔符\">#</a> 使用默认分隔符</h1>\n<p>print(u.split())  # ['<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20uY24=\">www.baidu.com.cn</span>']<br />\n​</p>\n<h1 id=\"以为分隔符\"><a class=\"anchor\" href=\"#以为分隔符\">#</a> 以 &quot;.&quot; 为分隔符</h1>\n<p>print((u.split('.')))  # ['www', 'baidu', 'com', 'cn']<br />\n​</p>\n<h1 id=\"分割0次\"><a class=\"anchor\" href=\"#分割0次\">#</a> 分割 0 次</h1>\n<p>print((u.split(&quot;.&quot;, 0)))  # ['<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20uY24=\">www.baidu.com.cn</span>']<br />\n​</p>\n<h1 id=\"分割一次\"><a class=\"anchor\" href=\"#分割一次\">#</a> 分割一次</h1>\n<p>print((u.split(&quot;.&quot;, 1)))  # ['www', '<span class=\"exturl\" data-url=\"aHR0cDovL2JhaWR1LmNvbS5jbg==\">baidu.com.cn</span>']<br />\n​</p>\n<h1 id=\"分割两次\"><a class=\"anchor\" href=\"#分割两次\">#</a> 分割两次</h1>\n<p>print(u.split(&quot;.&quot;, 2))  # ['www', 'baidu', '<span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5jbg==\">com.cn</span>']<br />\n​</p>\n<h1 id=\"分割两次并取序列为1的项\"><a class=\"anchor\" href=\"#分割两次并取序列为1的项\">#</a> 分割两次，并取序列为 1 的项</h1>\n<p>print((u.split(&quot;.&quot;, 2)[1]))  # baidu<br />\n​</p>\n<h1 id=\"分割两次并把分割后的三个部分保存到三个变量\"><a class=\"anchor\" href=\"#分割两次并把分割后的三个部分保存到三个变量\">#</a> 分割两次，并把分割后的三个部分保存到三个变量</h1>\n<p>u1, u2, u3 = u.split(&quot;.&quot;, 2)<br />\nprint(u1)  # www<br />\nprint(u2)  # baidu<br />\nprint(u3)  # <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5jbg==\">com.cn</span><br />\n['<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20uY24=\">www.baidu.com.cn</span>']<br />\n['www', 'baidu', 'com', 'cn']<br />\n['<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20uY24=\">www.baidu.com.cn</span>']<br />\n['www', '<span class=\"exturl\" data-url=\"aHR0cDovL2JhaWR1LmNvbS5jbg==\">baidu.com.cn</span>']<br />\n['www', 'baidu', '<span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5jbg==\">com.cn</span>']<br />\nbaidu<br />\nwww<br />\nbaidu<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5jbg==\">com.cn</span><br />\n【例子】去掉换行符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''say</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>baby'''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># say</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># hello</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># baby</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['say', 'hello', 'baby']</span></pre></td></tr></table></figure><p>say<br />\nhello<br />\nbaby<br />\n['say', 'hello', 'baby']<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token operator\">=</span> <span class=\"token string\">\"hello boy&lt;[www.baidu.com]>byebye\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># www.baidu.com</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['www', 'baidu', 'com']</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span><br />\n['www', 'baidu', 'com']<br />\n splitlines ([keepends]) 按照行 ('\\r', '\\r\\n', \\n') 分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str6 <span class=\"token operator\">=</span> <span class=\"token string\">'I \\n Love \\n LsgoGroup'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['I ', ' Love ', ' LsgoGroup']</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['I \\n', ' Love \\n', ' LsgoGroup']</span></pre></td></tr></table></figure><p>['I ', ' Love ', ' LsgoGroup']<br />\n['I \\n', ' Love \\n', ' LsgoGroup']<br />\n maketrans (intab, outtab) 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。<br />\ntranslate (table, deletechars=&quot;&quot;) 根据参数 table 给出的表，转换字符串的字符，要过滤掉的字符放到 deletechars 参数中。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str7 <span class=\"token operator\">=</span> <span class=\"token string\">'this is string example....wow!!!'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>intab <span class=\"token operator\">=</span> <span class=\"token string\">'aeiou'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>outtab <span class=\"token operator\">=</span> <span class=\"token string\">'12345'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>trantab <span class=\"token operator\">=</span> str7<span class=\"token punctuation\">.</span>maketrans<span class=\"token punctuation\">(</span>intab<span class=\"token punctuation\">,</span> outtab<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>trantab<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str7<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">(</span>trantab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># th3s 3s str3ng 2x1mpl2....w4w!!!</span></pre></td></tr></table></figure><p>{97: 49, 101: 50, 105: 51, 111: 52, 117: 53}<br />\nth3s 3s str3ng 2x1mpl2....w4w!!!<br />\n4. 字符串格式化<br />\n format 格式化函数<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str8 <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;0&#125; Love &#123;1&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 位置参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str8<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># I Love Lsgogroup</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>str8 <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;a&#125; Love &#123;b&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关键字参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str8<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># I Love Lsgogroup</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>str8 <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;0&#125; Love &#123;b&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token string\">'Lsgogroup'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 位置参数要在关键字参数之前</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str8<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># I Love Lsgogroup</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>str8 <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;0:.2f&#125;&#123;1&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">27.658</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GB'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 保留小数点后两位</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>str8<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 27.66GB</span></pre></td></tr></table></figure><p>I Love Lsgogroup<br />\nI Love Lsgogroup<br />\nI Love Lsgogroup<br />\n27.66GB<br />\nPython 字符串格式化符号<br />\n符 号\t描述<br />\n % c\t格式化字符及其 ASCII 码<br />\n % s\t格式化字符串，用 str () 方法处理对象<br />\n % r\t格式化字符串，用 rper () 方法处理对象<br />\n % d\t格式化整数<br />\n % o\t格式化无符号八进制数<br />\n % x\t格式化无符号十六进制数<br />\n % X\t格式化无符号十六进制数（大写）<br />\n% f\t格式化浮点数字，可指定小数点后的精度<br />\n % e\t用科学计数法格式化浮点数<br />\n % E\t作用同 % e，用科学计数法格式化浮点数<br />\n % g\t根据值的大小决定使用 % f 或 % e<br />\n% G\t作用同 % g，根据值的大小决定使用 % f 或 % E<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%c'</span> <span class=\"token operator\">%</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># a</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%c %c %c'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># a b c</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d + %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4 + 5 = 9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫 %s 今年 %d 岁!\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 我叫 小明 今年 10 岁！</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%o'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 12</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%x'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># a</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%X'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%f'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 27.658000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%e'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.765800e+01</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%E'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.765800E+01</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%g'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 27.658</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>text <span class=\"token operator\">=</span> <span class=\"token string\">\"I am %d years old.\"</span> <span class=\"token operator\">%</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I said: %s.\"</span> <span class=\"token operator\">%</span> text<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># I said: I am 22 years old..</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I said: %r.\"</span> <span class=\"token operator\">%</span> text<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># I said: 'I am 22 years old.'</span></pre></td></tr></table></figure><p>a<br />\na b c<br />\n4 + 5 = 9<br />\n 我叫 小明 今年 10 岁！<br />\n12<br />\na<br />\nA<br />\n27.658000<br />\n2.765800e+01<br />\n2.765800E+01<br />\n27.658<br />\nI said: I am 22 years old..<br />\nI said: 'I am 22 years old.'.<br />\n 格式化操作符辅助指令<br />\n符号\t功能<br />\n m.n\tm 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）</p>\n<ul>\n<li>用作左对齐</li>\n</ul>\n<ul>\n<li>在正数前面显示加号 (+)</li>\n</ul>\n<h1 id=\"在八进制数前面显示零0在十六进制前面显示0x或者0x取决于用的是x还是x\"><a class=\"anchor\" href=\"#在八进制数前面显示零0在十六进制前面显示0x或者0x取决于用的是x还是x\">#</a> 在八进制数前面显示零 ('0')，在十六进制前面显示 '0x' 或者 '0X'(取决于用的是 'x' 还是 'X')</h1>\n<p>0\t显示的数字前面填充 '0' 而不是默认的空格<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%5.1f'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ' 27.7'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.2e'</span> <span class=\"token operator\">%</span> <span class=\"token number\">27.658</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.77e+01</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%10d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># '        10'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%-10d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># '10        '</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%+d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># +10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%#o'</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0o12</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%#x'</span> <span class=\"token operator\">%</span> <span class=\"token number\">108</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0x6c</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%010d'</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0000000005</span></pre></td></tr></table></figure><p>27.7<br />\n2.77e+01<br />\n10<br />\n10<br />\n+10<br />\n0o12<br />\n0x6c<br />\n0000000005<br />\n 字典</p>\n<ol>\n<li>可变类型与不可变类型<br />\n序列是以连续的整数为索引，与此不同的是，字典以 &quot;关键字&quot; 为索引，关键字可以是任意不可变类型，通常用字符串或数值。<br />\n字典是 Python 唯一的一个 映射类型，字符串、元组、列表属于序列类型。<br />\n那么如何快速判断一个数据类型 X 是不是可变类型的呢？两种方法：</li>\n</ol>\n<p>麻烦方法：用 id (X) 函数，对 X 进行某种操作，比较操作前后的 id，如果不一样，则 X 不可变，如果一样，则 X 可变。<br />\n便捷方法：用 hash (X)，只要不报错，证明 X 可被哈希，即不可变，反过来不可被哈希，即可变。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 140732167000896</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 140732167000960</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4300825160</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4300825160</span></pre></td></tr></table></figure><p>140731832701760<br />\n140731832701824<br />\n2131670369800<br />\n2131670369800<br />\n 整数 i 在加 1 之后的 id 和之前不一样，因此加完之后的这个 i (虽然名字没变)，但不是加之前的那个 i 了，因此整数是不可变类型。<br />\n列表 l 在附加 'Python' 之后的 id 和之前一样，因此列表是可变类型。<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 7047218704141848153</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1704535747474881831</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Python'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># TypeError: unhashable type: 'list'</span></pre></td></tr></table></figure><h2 id=\"-6668157630988609386-1857436431894091236\"><a class=\"anchor\" href=\"#-6668157630988609386-1857436431894091236\">#</a> ​<br />\n​<br />\n-6668157630988609386<br />\n-1857436431894091236</h2>\n<p>TypeError                                 Traceback (most recent call last)<br />\n&lt;ipython-input-1-6416367464f8&gt; in &lt;module&gt;()<br />\n3 print(hash((1, 2, 'Python')))  # 1704535747474881831<br />\n4<br />\n----&gt; 5 print(hash([1, 2, 'Python']))<br />\n6 # TypeError: unhashable type: 'list'</p>\n<p>TypeError: unhashable type: 'list'<br />\nprint(hash({1, 2, 3}))</p>\n<h1 id=\"typeerror-unhashable-type-set\"><a class=\"anchor\" href=\"#typeerror-unhashable-type-set\">#</a> TypeError: unhashable type: 'set'</h1>\n<p>数值、字符和元组 都能被哈希，因此它们是不可变类型。<br />\n列表、集合、字典不能被哈希，因此它是可变类型。<br />\n2. 字典的定义<br />\n字典 是无序的 键：值（key:value）对集合，键必须是互不相同的（在同一个字典之内）。</p>\n<p 元素1,=\"\" 元素2,=\"\" css-module=\".,\" 元素n=\"\">dict 内部存放的顺序和 key 放入的顺序是没有关系的。<br />\ndict 查找和插入的速度极快，不会随着 key 的增加而增加，但是需要占用大量的内存。<br />\n字典 定义语法为</p>\n<p>其中每一个元素是一个「键值对」-- 键：值 (key:value)<br />\n 关键点是「大括号 {}」,「逗号，」和「冒号 :」<br />\n大括号 -- 把所有元素绑在一起<br />\n逗号 -- 将每个键值对分开<br />\n冒号 -- 将键和值分开<br />\n 3. 创建和访问字典<br />\n【例子】</p>\n<p>brand = [' 李宁 ', ' 耐克 ', ' 阿迪达斯 ']<br />\n slogan = [' 一切皆有可能 ', 'Just do it', 'Impossible is nothing']<br />\n print (' 耐克的口号是:', slogan [brand.index (' 耐克 ')])</p>\n<h1 id=\"耐克的口号是-just-do-it\"><a class=\"anchor\" href=\"#耐克的口号是-just-do-it\">#</a> 耐克的口号是: Just do it</h1>\n<p>​<br />\ndic = {' 李宁 ': ' 一切皆有可能 ', ' 耐克 ': 'Just do it', ' 阿迪达斯 ': 'Impossible is nothing'}<br />\n print (' 耐克的口号是:', dic [' 耐克 '])</p>\n<h1 id=\"耐克的口号是-just-do-it-2\"><a class=\"anchor\" href=\"#耐克的口号是-just-do-it-2\">#</a> 耐克的口号是: Just do it</h1>\n<p>耐克的口号是: Just do it<br />\n 耐克的口号是: Just do it<br />\n【例子】通过字符串或数值作为 key 来创建字典。</p>\n<h2 id=\"dic1-1-one-2-two-3-threeprintdic1-1-one-2-two-3-threeprintdic11-oneprintdic14-keyerror-41-one-2-two-3-threeone\"><a class=\"anchor\" href=\"#dic1-1-one-2-two-3-threeprintdic1-1-one-2-two-3-threeprintdic11-oneprintdic14-keyerror-41-one-2-two-3-threeone\">#</a> dic1 = {1: 'one', 2: 'two', 3: 'three'}<br />\nprint(dic1)  # {1: 'one', 2: 'two', 3: 'three'}<br />\nprint(dic1[1])  # one<br />\nprint(dic1[4])  # KeyError: 4<br />\n​<br />\n{1: 'one', 2: 'two', 3: 'three'}<br />\none</h2>\n<p>KeyError                                  Traceback (most recent call last)<br />\n&lt;ipython-input-2-bb8d02bd63a3&gt; in &lt;module&gt;()<br />\n2 print(dic1)  # {1: 'one', 2: 'two', 3: 'three'}<br />\n3 print(dic1[1])  # one<br />\n----&gt; 4 print(dic1[4])  # KeyError: 4</p>\n<p>KeyError: 4<br />\ndic2 = {'rice': 35, 'wheat': 101, 'corn': 67}<br />\nprint(dic2)  # {'wheat': 101, 'corn': 67, 'rice': 35}<br />\nprint(dic2['rice'])  # 35<br />\n{'rice': 35, 'wheat': 101, 'corn': 67}<br />\n35<br />\n 注意：如果我们取的键在字典中不存在，会直接报错 KeyError。</p>\n<p>【例子】通过元组作为 key 来创建字典，但一般不这样使用。</p>\n<p>dic = {(1, 2, 3): &quot;Tom&quot;, &quot;Age&quot;: 12, 3: [3, 5, 7]}<br />\nprint(dic)  # {(1, 2, 3): 'Tom', 'Age': 12, 3: [3, 5, 7]}<br />\nprint(type(dic))  # &lt;class 'dict'&gt;<br />\n{(1, 2, 3): 'Tom', 'Age': 12, 3: [3, 5, 7]}<br />\n&lt;class 'dict'&gt;<br />\n 通过构造函数 dict 来创建字典。</p>\n<p>dict () 创建一个空的字典。<br />\n【例子】通过 key 直接把数据放入字典中，但一个 key 只能对应一个 value，多次对一个 key 放入 value，后面的值会把前面的值冲掉。</p>\n<p>dic = dict()<br />\ndic['a'] = 1<br />\ndic['b'] = 2<br />\ndic['c'] = 3<br />\n​<br />\nprint(dic)</p>\n<h1 a:=\"\" 1,=\"\" b:=\"\" 2,=\"\" c:=\"\" 3=\"\" id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n<p>​<br />\ndic['a'] = 11<br />\nprint(dic)</p>\n<h1 a:=\"\" 11,=\"\" b:=\"\" 2,=\"\" c:=\"\" 3=\"\" id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h1>\n<p>​<br />\ndic['d'] = 4<br />\nprint(dic)</p>\n<h1 a:=\"\" 11,=\"\" b:=\"\" 2,=\"\" c:=\"\" 3,=\"\" d:=\"\" 4=\"\" id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> </h1>\n<p>{'a': 1, 'b': 2, 'c': 3}<br />\n{'a': 11, 'b': 2, 'c': 3}<br />\n{'a': 11, 'b': 2, 'c': 3, 'd': 4}<br />\ndict(mapping) new dictionary initialized from a mapping object's (key, value) pairs<br />\n【例子】</p>\n<p>dic1 = dict([('apple', 4139), ('peach', 4127), ('cherry', 4098)])<br />\nprint(dic1)  # {'cherry': 4098, 'apple': 4139, 'peach': 4127}<br />\n​<br />\ndic2 = dict((('apple', 4139), ('peach', 4127), ('cherry', 4098)))<br />\nprint(dic2)  # {'peach': 4127, 'cherry': 4098, 'apple': 4139}<br />\n{'apple': 4139, 'peach': 4127, 'cherry': 4098}<br />\n{'apple': 4139, 'peach': 4127, 'cherry': 4098}<br />\ndict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)<br />\n【例子】这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误。</p>\n<p>dic = dict(name='Tom', age=10)<br />\nprint(dic)  # {'name': 'Tom', 'age': 10}<br />\nprint(type(dic))  # &lt;class 'dict'&gt;<br />\n{'name': 'Tom', 'age': 10}<br />\n&lt;class 'dict'&gt;<br />\n4. 字典的内置方法<br />\n dict.fromkeys (seq [, value]) 用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值。<br />\n【例子】</p>\n<p>seq = ('name', 'age', 'sex')<br />\ndic1 = dict.fromkeys(seq)<br />\nprint(dic1)</p>\n<h1 name:=\"\" None,=\"\" age:=\"\" None,=\"\" sex:=\"\" None=\"\" id=\"-4\"><a class=\"anchor\" href=\"#-4\">#</a> </h1>\n<p>​<br />\ndic2 = dict.fromkeys(seq, 10)<br />\nprint(dic2)</p>\n<h1 name:=\"\" 10,=\"\" age:=\"\" 10,=\"\" sex:=\"\" 10=\"\" id=\"-5\"><a class=\"anchor\" href=\"#-5\">#</a> </h1>\n<p>​<br />\ndic3 = dict.fromkeys (seq, (' 小马 ', '8', ' 男 '))<br />\nprint(dic3)</p>\n<h1 name:=\"\" (小马,=\"\" 8,=\"\" 男),=\"\" age:=\"\" (小马,=\"\" 8,=\"\" 男),=\"\" sex:=\"\" (小马,=\"\" 8,=\"\" 男)=\"\" id=\"-6\"><a class=\"anchor\" href=\"#-6\">#</a> </h1>\n<p>{'name': None, 'age': None, 'sex': None}<br />\n{'name': 10, 'age': 10, 'sex': 10}<br />\n{'name': (' 小马 ', '8', ' 男 '), 'age': (' 小马 ', '8', ' 男 '), 'sex': (' 小马 ', '8', ' 男 ')}<br />\n dict.keys () 返回一个可迭代对象，可以使用 list () 来转换为列表，列表为字典中的所有键。<br />\n【例子】</p>\n<p>dic = {'Name': 'lsgogroup', 'Age': 7}<br />\nprint(dic.keys())  # dict_keys(['Name', 'Age'])<br />\n lst = list (dic.keys ())  # 转换为列表<br />\n print (lst)  # ['Name', 'Age']<br />\ndict_keys(['Name', 'Age'])<br />\n['Name', 'Age']<br />\n dict.values () 返回一个迭代器，可以使用 list () 来转换为列表，列表为字典中的所有值。<br />\n【例子】</p>\n<p>dic = {'Sex': 'female', 'Age': 7, 'Name': 'Zara'}<br />\nprint(dic.values())</p>\n<h1 id=\"dict_valuesfemale-7-zara\"><a class=\"anchor\" href=\"#dict_valuesfemale-7-zara\">#</a> dict_values(['female', 7, 'Zara'])</h1>\n<p>​<br />\nprint(list(dic.values()))</p>\n<h1 id=\"7-female-zara\"><a class=\"anchor\" href=\"#7-female-zara\">#</a> [7, 'female', 'Zara']</h1>\n<p>dict_values(['female', 7, 'Zara'])<br />\n['female', 7, 'Zara']<br />\n dict.items () 以列表返回可遍历的 (键，值) 元组数组。<br />\n【例子】</p>\n<p>dic = {'Name': 'Lsgogroup', 'Age': 7}<br />\nprint(dic.items())</p>\n<h1 id=\"dict_itemsname-lsgogroup-age-7\"><a class=\"anchor\" href=\"#dict_itemsname-lsgogroup-age-7\">#</a> dict_items([('Name', 'Lsgogroup'), ('Age', 7)])</h1>\n<p>​<br />\nprint(tuple(dic.items()))</p>\n<h1 id=\"name-lsgogroup-age-7\"><a class=\"anchor\" href=\"#name-lsgogroup-age-7\">#</a> (('Name', 'Lsgogroup'), ('Age', 7))</h1>\n<p>​<br />\nprint(list(dic.items()))</p>\n<h1 id=\"name-lsgogroup-age-7-2\"><a class=\"anchor\" href=\"#name-lsgogroup-age-7-2\">#</a> [('Name', 'Lsgogroup'), ('Age', 7)]</h1>\n<p>dict_items([('Name', 'Lsgogroup'), ('Age', 7)])<br />\n(('Name', 'Lsgogroup'), ('Age', 7))<br />\n[('Name', 'Lsgogroup'), ('Age', 7)]<br />\n dict.get (key, default=None) 返回指定键的值，如果值不在字典中返回默认值。<br />\n【例子】</p>\n<p>dic = {'Name': 'Lsgogroup', 'Age': 27}<br />\n print (&quot;Age 值为 : % s&quot; % dic.get ('Age'))  # Age 值为 : 27<br />\nprint (&quot;Sex 值为 : % s&quot; % dic.get ('Sex', &quot;NA&quot;))  # Sex 值为 : NA<br />\nprint(dic)  # {'Name': 'Lsgogroup', 'Age': 27}<br />\n Age 值为 : 27<br />\nSex 值为 : NA<br />\n{'Name': 'Lsgogroup', 'Age': 27}<br />\n dict.setdefault (key, default=None) 和 get () 方法 类似，如果键不存在于字典中，将会添加键并将值设为默认值。<br />\n【例子】</p>\n<p>dic = {'Name': 'Lsgogroup', 'Age': 7}<br />\n print (&quot;Age 键的值为 : % s&quot; % dic.setdefault ('Age', None))  # Age 键的值为 : 7<br />\nprint (&quot;Sex 键的值为 : % s&quot; % dic.setdefault ('Sex', None))  # Sex 键的值为 : None<br />\nprint(dic)</p>\n<h1 Age:=\"\" 7,=\"\" Name:=\"\" Lsgogroup,=\"\" Sex:=\"\" None=\"\" id=\"-7\"><a class=\"anchor\" href=\"#-7\">#</a> </h1>\n<p>Age 键的值为 : 7<br />\nSex 键的值为 : None<br />\n{'Name': 'Lsgogroup', 'Age': 7, 'Sex': None}<br />\n key in dict in 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回 true，否则返回 false。而 not in 操作符刚好相反，如果键在字典 dict 里返回 false，否则返回 true。<br />\n【例子】</p>\n<p>dic = {'Name': 'Lsgogroup', 'Age': 7}<br />\n​</p>\n<h1 id=\"in-检测键-age-是否存在\"><a class=\"anchor\" href=\"#in-检测键-age-是否存在\">#</a> in 检测键 Age 是否存在</h1>\n<p>if 'Age' in dic:<br />\nprint (&quot;键 Age 存在&quot;)<br />\nelse:<br />\nprint (&quot;键 Age 不存在&quot;)<br />\n​</p>\n<h1 id=\"检测键-sex-是否存在\"><a class=\"anchor\" href=\"#检测键-sex-是否存在\">#</a> 检测键 Sex 是否存在</h1>\n<p>if 'Sex' in dic:<br />\nprint (&quot;键 Sex 存在&quot;)<br />\nelse:<br />\nprint (&quot;键 Sex 不存在&quot;)<br />\n​</p>\n<h1 id=\"not-in-检测键-age-是否存在\"><a class=\"anchor\" href=\"#not-in-检测键-age-是否存在\">#</a> not in 检测键 Age 是否存在</h1>\n<p>if 'Age' not in dic:<br />\nprint (&quot;键 Age 不存在&quot;)<br />\nelse:<br />\nprint (&quot;键 Age 存在&quot;)<br />\n​</p>\n<h1 id=\"键-age-存在\"><a class=\"anchor\" href=\"#键-age-存在\">#</a> 键 Age 存在</h1>\n<h1 id=\"键-sex-不存在\"><a class=\"anchor\" href=\"#键-sex-不存在\">#</a> 键 Sex 不存在</h1>\n<h1 id=\"键-age-存在-2\"><a class=\"anchor\" href=\"#键-age-存在-2\">#</a> 键 Age 存在</h1>\n<p>键 Age 存在<br />\n键 Sex 不存在<br />\n键 Age 存在<br />\n dict.pop (key [,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。key 值必须给出。若 key 不存在，则返回 default 值。<br />\ndel dict [key] 删除字典给定键 key 所对应的值。<br />\n【例子】</p>\n<p>dic1 = {1: &quot;a&quot;, 2: [1, 2]}<br />\nprint(dic1.pop(1), dic1)  # a {2: [1, 2]}<br />\n​</p>\n<h1 id=\"设置默认值必须添加否则报错\"><a class=\"anchor\" href=\"#设置默认值必须添加否则报错\">#</a> 设置默认值，必须添加，否则报错</h1>\n<p>print(dic1.pop(3, &quot;nokey&quot;), dic1)  # nokey {2: [1, 2]}<br />\n​<br />\ndel dic1[2]<br />\nprint(dic1)  # {}<br />\na {2: [1, 2]}<br />\nnokey {2: [1, 2]}<br />\n{}<br />\n dict.popitem () 随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出 KeyError 异常。<br />\n【例子】</p>\n<p>dic1 = {1: &quot;a&quot;, 2: [1, 2]}<br />\nprint(dic1.popitem())  # {2: [1, 2]}<br />\nprint(dic1)  # (1, 'a')<br />\n(2, [1, 2])<br />\n{1: 'a'}<br />\n dict.clear () 用于删除字典内所有元素。<br />\n【例子】</p>\n<p>dic = {'Name': 'Zara', 'Age': 7}<br />\n print (&quot;字典长度 : % d&quot; % len (dic))  # 字典长度 : 2<br />\ndic.clear()<br />\n print (&quot;字典删除后长度 : % d&quot; % len (dic))</p>\n<h1 id=\"字典删除后长度-0\"><a class=\"anchor\" href=\"#字典删除后长度-0\">#</a> 字典删除后长度 : 0</h1>\n<p>字典长度 : 2<br />\n 字典删除后长度 : 0<br />\ndict.copy () 返回一个字典的浅复制。<br />\n【例子】</p>\n<p>dic1 = {'Name': 'Lsgogroup', 'Age': 7, 'Class': 'First'}<br />\ndic2 = dic1.copy()<br />\nprint(&quot;dic2&quot;)</p>\n<h1 Age:=\"\" 7,=\"\" Name:=\"\" Lsgogroup,=\"\" Class:=\"\" First=\"\" id=\"-8\"><a class=\"anchor\" href=\"#-8\">#</a> </h1>\n<p>dic2<br />\n【例子】直接赋值和 copy 的区别</p>\n<p>dic1 = {'user': 'lsgogroup', 'num': [1, 2, 3]}<br />\n​</p>\n<h1 id=\"引用对象\"><a class=\"anchor\" href=\"#引用对象\">#</a> 引用对象</h1>\n<p>dic2 = dic1</p>\n<h1 id=\"浅拷贝父对象一级目录子对象二级目录不拷贝还是引用\"><a class=\"anchor\" href=\"#浅拷贝父对象一级目录子对象二级目录不拷贝还是引用\">#</a> 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</h1>\n<p>dic3 = dic1.copy()<br />\n​<br />\nprint(id(dic1))  # 148635574728<br />\nprint(id(dic2))  # 148635574728<br />\nprint(id(dic3))  # 148635574344<br />\n​</p>\n<h1 id=\"修改-data-数据\"><a class=\"anchor\" href=\"#修改-data-数据\">#</a> 修改 data 数据</h1>\n<p>dic1['user'] = 'root'<br />\ndic1['num'].remove(1)<br />\n​</p>\n<h1 id=\"输出结果\"><a class=\"anchor\" href=\"#输出结果\">#</a> 输出结果</h1>\n<p>print(dic1)  # {'user': 'root', 'num': [2, 3]}<br />\nprint(dic2)  # {'user': 'root', 'num': [2, 3]}<br />\nprint(dic3)  # {'user': 'runoob', 'num': [2, 3]}<br />\n2131669221448<br />\n2131669221448<br />\n2131669225120<br />\n{'user': 'root', 'num': [2, 3]}<br />\n{'user': 'root', 'num': [2, 3]}<br />\n{'user': 'lsgogroup', 'num': [2, 3]}<br />\n dict.update (dict2) 把字典参数 dict2 的 key:value 对 更新到字典 dict 里。<br />\n【例子】</p>\n<p>dic = {'Name': 'Lsgogroup', 'Age': 7}<br />\ndic2 = {'Sex': 'female', 'Age': 8}<br />\ndic.update(dic2)<br />\nprint(dic)</p>\n<h1 Sex:=\"\" female,=\"\" Age:=\"\" 8,=\"\" Name:=\"\" Lsgogroup=\"\" id=\"-9\"><a class=\"anchor\" href=\"#-9\">#</a> </h1>\n<p>{'Name': 'Lsgogroup', 'Age': 8, 'Sex': 'female'}<br />\n 集合<br />\n Python 中 set 与 dict 类似，也是一组 key 的集合，但不存储 value。由于 key 不能重复，所以，在 set 中，没有重复的 key。</p>\n<p>注意，key 为不可变类型，即可哈希的值。</p>\n<p>【例子】</p>\n<p>num = {}<br />\nprint(type(num))  # &lt;class 'dict'&gt;<br />\nnum = {1, 2, 3, 4}<br />\nprint(type(num))  # &lt;class 'set'&gt;<br />\n&lt;class 'dict'&gt;<br />\n&lt;class 'set'&gt;</p>\n<ol>\n<li>集合的创建<br />\n先创建对象再加入元素。<br />\n在创建空集合的时候只能使用 s = set ()，因为 s = {} 创建的是空字典。<br />\n【例子】</li>\n</ol>\n<p>basket = set()<br />\nbasket.add('apple')<br />\nbasket.add('banana')<br />\nprint(basket)  # {'banana', 'apple'}<br />\n{'banana', 'apple'}<br />\n 直接把一堆元素用花括号括起来 {元素 1, 元素 2, ..., 元素 n}。<br />\n重复元素在 set 中会被自动被过滤。<br />\n【例子】</p>\n<p>basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}<br />\nprint(basket)  # {'banana', 'apple', 'pear', 'orange'}<br />\n{'pear', 'orange', 'banana', 'apple'}<br />\n 使用 set (value) 工厂函数，把列表或元组转换成集合。<br />\n【例子】</p>\n<p>a = set('abracadabra')<br />\nprint(a)</p>\n<h1 r,=\"\" b,=\"\" d,=\"\" c,=\"\" a=\"\" id=\"-10\"><a class=\"anchor\" href=\"#-10\">#</a> </h1>\n<p>​<br />\nb = set((&quot;Google&quot;, &quot;Lsgogroup&quot;, &quot;Taobao&quot;, &quot;Taobao&quot;))<br />\nprint(b)</p>\n<h1 Taobao,=\"\" Lsgogroup,=\"\" Google=\"\" id=\"-11\"><a class=\"anchor\" href=\"#-11\">#</a> </h1>\n<p>​<br />\nc = set([&quot;Google&quot;, &quot;Lsgogroup&quot;, &quot;Taobao&quot;, &quot;Google&quot;])<br />\nprint(c)</p>\n<h1 Taobao,=\"\" Lsgogroup,=\"\" Google=\"\" id=\"-12\"><a class=\"anchor\" href=\"#-12\">#</a> </h1>\n<p>{'b', 'r', 'a', 'c', 'd'}<br />\n{'Taobao', 'Google', 'Lsgogroup'}<br />\n{'Taobao', 'Google', 'Lsgogroup'}<br />\n【例子】去掉列表中重复的元素</p>\n<p>lst = [0, 1, 2, 3, 4, 5, 5, 3, 1]<br />\n​<br />\ntemp = []<br />\nfor item in lst:<br />\nif item not in temp:<br />\ntemp.append(item)<br />\n​<br />\nprint(temp)  # [0, 1, 2, 3, 4, 5]<br />\n​<br />\na = set(lst)<br />\nprint(list(a))  # [0, 1, 2, 3, 4, 5]<br />\n[0, 1, 2, 3, 4, 5]<br />\n[0, 1, 2, 3, 4, 5]<br />\n 从结果发现集合的两个特点：无序 (unordered) 和唯一 (unique)。</p>\n<p>由于 set 存储的是无序集合，所以我们不可以为集合创建索引或执行切片 (slice) 操作，也没有键 (keys) 可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。</p>\n<ol start=\"2\">\n<li>访问集合中的值<br />\n可以使用 len () 內建函数得到集合的大小。<br />\n【例子】</li>\n</ol>\n<p>s = set(['Google', 'Baidu', 'Taobao'])<br />\nprint(len(s))  # 3<br />\n3<br />\n 可以使用 for 把集合中的数据一个个读取出来。<br />\n【例子】</p>\n<p>s = set(['Google', 'Baidu', 'Taobao'])<br />\nfor item in s:<br />\nprint(item)</p>\n<h1 id=\"baidu\"><a class=\"anchor\" href=\"#baidu\">#</a> Baidu</h1>\n<h1 id=\"google\"><a class=\"anchor\" href=\"#google\">#</a> Google</h1>\n<h1 id=\"taobao\"><a class=\"anchor\" href=\"#taobao\">#</a> Taobao</h1>\n<p>Baidu<br />\nTaobao<br />\nGoogle<br />\n 可以通过 in 或 not in 判断一个元素是否在集合中已经存在<br />\n【例子】</p>\n<p>s = set(['Google', 'Baidu', 'Taobao'])<br />\nprint('Taobao' in s)  # True<br />\nprint('Facebook' not in s)  # True<br />\nTrue<br />\nTrue<br />\n3. 集合的内置方法<br />\n set.add (elmnt) 用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。<br />\n【例子】</p>\n<p>fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}<br />\nfruits.add(&quot;orange&quot;)<br />\nprint(fruits)</p>\n<h1 orange,=\"\" cherry,=\"\" banana,=\"\" apple=\"\" id=\"-13\"><a class=\"anchor\" href=\"#-13\">#</a> </h1>\n<p>​<br />\nfruits.add(&quot;apple&quot;)<br />\nprint(fruits)</p>\n<h1 orange,=\"\" cherry,=\"\" banana,=\"\" apple=\"\" id=\"-14\"><a class=\"anchor\" href=\"#-14\">#</a> </h1>\n<p>{'cherry', 'orange', 'banana', 'apple'}<br />\n{'cherry', 'orange', 'banana', 'apple'}<br />\n set.update (set) 用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。<br />\n【例子】</p>\n<p>x = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}<br />\ny = {&quot;google&quot;, &quot;baidu&quot;, &quot;apple&quot;}<br />\nx.update(y)<br />\nprint(x)</p>\n<h1 cherry,=\"\" banana,=\"\" apple,=\"\" google,=\"\" baidu=\"\" id=\"-15\"><a class=\"anchor\" href=\"#-15\">#</a> </h1>\n<p>​<br />\ny.update([&quot;lsgo&quot;, &quot;dreamtech&quot;])<br />\nprint(y)</p>\n<h1 lsgo,=\"\" baidu,=\"\" dreamtech,=\"\" apple,=\"\" google=\"\" id=\"-16\"><a class=\"anchor\" href=\"#-16\">#</a> </h1>\n<p>{'google', 'banana', 'cherry', 'apple', 'baidu'}<br />\n{'apple', 'dreamtech', 'lsgo', 'google', 'baidu'}<br />\n set.remove (item) 用于移除集合中的指定元素。如果元素不存在，则会发生错误。<br />\n【例子】</p>\n<p>fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}<br />\nfruits.remove(&quot;banana&quot;)<br />\nprint(fruits)  # {'apple', 'cherry'}<br />\n{'cherry', 'apple'}<br />\n set.discard (value) 用于移除指定的集合元素。remove () 方法在移除一个不存在的元素时会发生错误，而 discard () 方法不会。<br />\n【例子】</p>\n<p>fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}<br />\nfruits.discard(&quot;banana&quot;)<br />\nprint(fruits)  # {'apple', 'cherry'}<br />\n{'cherry', 'apple'}<br />\n set.pop () 用于随机移除一个元素。<br />\n【例子】</p>\n<p>fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;}<br />\nx = fruits.pop()<br />\nprint(fruits)  # {'cherry', 'apple'}<br />\nprint(x)  # banana<br />\n{'banana', 'apple'}<br />\ncherry<br />\n 由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。</p>\n<p>set.intersection (set1, set2) 返回两个集合的交集。<br />\nset1 &amp; set2 返回两个集合的交集。<br />\nset.intersection_update (set1, set2) 交集，在原始的集合上移除不重叠的元素。<br />\n【例子】</p>\n<p>a = set('abracadabra')<br />\nb = set('alacazam')<br />\nprint(a)  # {'r', 'a', 'c', 'b', 'd'}<br />\nprint(b)  # {'c', 'a', 'l', 'm', 'z'}<br />\n​<br />\nc = a.intersection(b)<br />\nprint(c)  # {'a', 'c'}<br />\nprint(a &amp; b)  # {'c', 'a'}<br />\nprint(a)  # {'a', 'r', 'c', 'b', 'd'}<br />\n​<br />\na.intersection_update(b)<br />\nprint(a)  # {'a', 'c'}<br />\n{'b', 'r', 'a', 'c', 'd'}<br />\n{'l', 'a', 'c', 'z', 'm'}<br />\n{'a', 'c'}<br />\n{'a', 'c'}<br />\n{'b', 'r', 'a', 'c', 'd'}<br />\n{'a', 'c'}<br />\n set.union (set1, set2) 返回两个集合的并集。<br />\nset1 | set2 返回两个集合的并集。<br />\n【例子】</p>\n<p>a = set('abracadabra')<br />\nb = set('alacazam')<br />\nprint(a)  # {'r', 'a', 'c', 'b', 'd'}<br />\nprint(b)  # {'c', 'a', 'l', 'm', 'z'}<br />\n​<br />\nprint(a | b)</p>\n<h1 l,=\"\" d,=\"\" m,=\"\" b,=\"\" a,=\"\" r,=\"\" z,=\"\" c=\"\" id=\"-17\"><a class=\"anchor\" href=\"#-17\">#</a> </h1>\n<p>​<br />\nc = a.union(b)<br />\nprint(c)</p>\n<h1 c,=\"\" a,=\"\" d,=\"\" m,=\"\" r,=\"\" b,=\"\" z,=\"\" l=\"\" id=\"-18\"><a class=\"anchor\" href=\"#-18\">#</a> </h1>\n<p>{'b', 'r', 'a', 'c', 'd'}<br />\n{'l', 'a', 'c', 'z', 'm'}<br />\n{'l', 'b', 'r', 'a', 'c', 'z', 'd', 'm'}<br />\n{'l', 'b', 'r', 'a', 'c', 'z', 'd', 'm'}<br />\n set.difference (set) 返回集合的差集。<br />\nset1 - set2 返回集合的差集。<br />\nset.difference_update (set) 集合的差集，直接在原来的集合中移除元素，没有返回值。<br />\n【例子】</p>\n<p>a = set('abracadabra')<br />\nb = set('alacazam')<br />\nprint(a)  # {'r', 'a', 'c', 'b', 'd'}<br />\nprint(b)  # {'c', 'a', 'l', 'm', 'z'}<br />\n​<br />\nc = a.difference(b)<br />\nprint(c)  # {'b', 'd', 'r'}<br />\nprint(a - b)  # {'d', 'b', 'r'}<br />\n​<br />\nprint(a)  # {'r', 'd', 'c', 'a', 'b'}<br />\na.difference_update(b)<br />\nprint(a)  # {'d', 'r', 'b'}<br />\n{'b', 'r', 'a', 'c', 'd'}<br />\n{'l', 'a', 'c', 'z', 'm'}<br />\n{'d', 'b', 'r'}<br />\n{'d', 'b', 'r'}<br />\n{'b', 'r', 'a', 'c', 'd'}<br />\n{'b', 'r', 'd'}<br />\n set.symmetric_difference (set) 返回集合的异或。<br />\nset1 ^ set2 返回集合的异或。<br />\nset.symmetric_difference_update (set) 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。<br />\n【例子】</p>\n<p>a = set('abracadabra')<br />\nb = set('alacazam')<br />\nprint(a)  # <ruby>'r', 'a', 'c', 'b', 'd'}\nprint(b)  # {'c', 'a', 'l', 'm', 'z'}\n​\nc = a.symmetric_difference(b)\nprint(c)  # {'m', 'r', 'l', 'b', 'z', 'd'}\nprint(a <rp>(</rp><rt> b)  # {'m', 'r', 'l', 'b', 'z', 'd'</rt><rp>)</rp></ruby><br />\n​<br />\nprint(a)  # {'r', 'd', 'c', 'a', 'b'}<br />\na.symmetric_difference_update(b)<br />\nprint(a)  # {'r', 'b', 'm', 'l', 'z', 'd'}<br />\n{'b', 'r', 'a', 'c', 'd'}<br />\n{'l', 'a', 'c', 'z', 'm'}<br />\n{'l', 'b', 'z', 'r', 'd', 'm'}<br />\n{'l', 'b', 'z', 'r', 'd', 'm'}<br />\n{'b', 'r', 'a', 'c', 'd'}<br />\n{'l', 'b', 'r', 'z', 'd', 'm'}<br />\n set.issubset (set) 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。<br />\nset1 &lt;= set2 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。<br />\n【例子】</p>\n<p>x = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}<br />\ny = {&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;}<br />\nz = x.issubset(y)<br />\nprint(z)  # True<br />\nprint(x &lt;= y)  # True<br />\n​<br />\nx = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}<br />\ny = {&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;}<br />\nz = x.issubset(y)<br />\nprint(z)  # False<br />\nprint(x &lt;= y)  # False<br />\nTrue<br />\nTrue<br />\nFalse<br />\nFalse<br />\nset.issuperset (set) 用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。<br />\nset1 &gt;= set2 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。<br />\n【例子】</p>\n<p>x = {&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;}<br />\ny = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}<br />\nz = x.issuperset(y)<br />\nprint(z)  # True<br />\nprint(x &gt;= y)  # True<br />\n​<br />\nx = {&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;}<br />\ny = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}<br />\nz = x.issuperset(y)<br />\nprint(z)  # False<br />\nprint(x &gt;= y)  # False<br />\nTrue<br />\nTrue<br />\nFalse<br />\nFalse<br />\nset.isdisjoint (set) 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。<br />\n【例子】</p>\n<p>x = {&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;}<br />\ny = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}<br />\nz = x.isdisjoint(y)<br />\nprint(z)  # False<br />\n​<br />\nx = {&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;m&quot;, &quot;g&quot;}<br />\ny = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}<br />\nz = x.isdisjoint(y)<br />\nprint(z)  # True<br />\nFalse<br />\nTrue<br />\n4. 集合的转换<br />\n【例子】</p>\n<p>se = set(range(4))<br />\nli = list(se)<br />\ntu = tuple(se)<br />\n​<br />\nprint(se, type(se))  # {0, 1, 2, 3} &lt;class 'set'&gt;<br />\nprint(li, type(li))  # [0, 1, 2, 3] &lt;class 'list'&gt;<br />\nprint(tu, type(tu))  # (0, 1, 2, 3) &lt;class 'tuple'&gt;<br />\n{0, 1, 2, 3} &lt;class 'set'&gt;<br />\n[0, 1, 2, 3] &lt;class 'list'&gt;<br />\n(0, 1, 2, 3) &lt;class 'tuple'&gt;<br />\n5. 不可变集合<br />\n Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫 frozenset。需要注意的是 frozenset 仍然可以进行集合操作，只是不能用带有 update 的方法。</p>\n<p>frozenset ([iterable]) 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。<br />\n【例子】</p>\n<p>a = frozenset (range (10))  # 生成一个新的不可变集合<br />\n print (a)</p>\n<h1 id=\"frozenset0-1-2-3-4-5-6-7-8-9\"><a class=\"anchor\" href=\"#frozenset0-1-2-3-4-5-6-7-8-9\">#</a> frozenset({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})</h1>\n<p>​<br />\nb = frozenset('lsgogroup')<br />\nprint(b)</p>\n<h1 id=\"frozensetg-s-p-r-u-o-l\"><a class=\"anchor\" href=\"#frozensetg-s-p-r-u-o-l\">#</a> frozenset({'g', 's', 'p', 'r', 'u', 'o', 'l'})</h1>\n<p>frozenset({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})<br />\nfrozenset({'l', 'g', 'r', 'u', 'o', 's', 'p'})<br />\n 序列<br />\n在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持一些通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。</p>\n<ol>\n<li>针对序列的内置函数<br />\n list (sub) 把一个可迭代对象转换为列表。<br />\n【例子】</li>\n</ol>\n<p>a = list()<br />\nprint(a)  # []<br />\n​<br />\nb = 'I Love LsgoGroup'<br />\nb = list(b)<br />\nprint(b)</p>\n<h1 id=\"i-l-o-v-e-l-s-g-o-g-r-o-u-p\"><a class=\"anchor\" href=\"#i-l-o-v-e-l-s-g-o-g-r-o-u-p\">#</a> ['I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p']</h1>\n<p>​<br />\nc = (1, 1, 2, 3, 5, 8)<br />\nc = list(c)<br />\nprint(c)  # [1, 1, 2, 3, 5, 8]<br />\n[]<br />\n['I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p']<br />\n[1, 1, 2, 3, 5, 8]<br />\n tuple (sub) 把一个可迭代对象转换为元组。<br />\n【例子】</p>\n<p>a = tuple()<br />\nprint(a)  # ()<br />\n​<br />\nb = 'I Love LsgoGroup'<br />\nb = tuple(b)<br />\nprint(b)</p>\n<h1 id=\"i-l-o-v-e-l-s-g-o-g-r-o-u-p-2\"><a class=\"anchor\" href=\"#i-l-o-v-e-l-s-g-o-g-r-o-u-p-2\">#</a> ('I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p')</h1>\n<p>​<br />\nc = [1, 1, 2, 3, 5, 8]<br />\nc = tuple(c)<br />\nprint(c)  # (1, 1, 2, 3, 5, 8)<br />\n()<br />\n('I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p')<br />\n(1, 1, 2, 3, 5, 8)<br />\n str (obj) 把 obj 对象转换为字符串<br />\n【例子】</p>\n<p>a = 123<br />\na = str(a)<br />\nprint(a)  # 123<br />\n123<br />\nlen (s) 返回对象（字符、列表、元组等）长度或元素个数。<br />\ns -- 对象。<br />\n【例子】</p>\n<p>a = list()<br />\nprint(len(a))  # 0<br />\n​<br />\nb = ('I', ' ', 'L', 'o', 'v', 'e', ' ', 'L', 's', 'g', 'o', 'G', 'r', 'o', 'u', 'p')<br />\nprint(len(b))  # 16<br />\n​<br />\nc = 'I Love LsgoGroup'<br />\nprint(len(c))  # 16<br />\n0<br />\n16<br />\n16<br />\nmax (sub) 返回序列或者参数集合中的最大值<br />\n【例子】</p>\n<p>print(max(1, 2, 3, 4, 5))  # 5<br />\nprint(max([-8, 99, 3, 7, 83]))  # 99<br />\nprint(max('IloveLsgoGroup'))  # v<br />\n5<br />\n99<br />\nv<br />\nmin (sub) 返回序列或参数集合中的最小值<br />\n【例子】</p>\n<p>print(min(1, 2, 3, 4, 5))  # 1<br />\nprint(min([-8, 99, 3, 7, 83]))  # -8<br />\nprint(min('IloveLsgoGroup'))  # G<br />\n1<br />\n-8<br />\nG<br />\nsum (iterable [, start=0]) 返回序列 iterable 与可选参数 start 的总和。<br />\n【例子】</p>\n<p>print(sum([1, 3, 5, 7, 9]))  # 25<br />\nprint(sum([1, 3, 5, 7, 9], 10))  # 35<br />\nprint(sum((1, 3, 5, 7, 9)))  # 25<br />\nprint(sum((1, 3, 5, 7, 9), 20))  # 45<br />\n25<br />\n35<br />\n25<br />\n45<br />\nsorted (iterable, key=None, reverse=False) 对所有可迭代的对象进行排序操作。<br />\niterable -- 可迭代对象。<br />\nkey -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br />\nreverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。<br />\n返回重新排序的列表。<br />\n【例子】</p>\n<p>x = [-8, 99, 3, 7, 83]<br />\nprint(sorted(x))  # [-8, 3, 7, 83, 99]<br />\nprint(sorted(x, reverse=True))  # [99, 83, 7, 3, -8]<br />\n​<br />\nt = ({&quot;age&quot;: 20, &quot;name&quot;: &quot;a&quot;}, {&quot;age&quot;: 25, &quot;name&quot;: &quot;b&quot;}, {&quot;age&quot;: 10, &quot;name&quot;: &quot;c&quot;})<br />\nx = sorted(t, key=lambda a: a[&quot;age&quot;])<br />\nprint(x)</p>\n<h1 id=\"age-10-name-c-age-20-name-a-age-25-name-b\"><a class=\"anchor\" href=\"#age-10-name-c-age-20-name-a-age-25-name-b\">#</a> [{'age': 10, 'name': 'c'}, {'age': 20, 'name': 'a'}, {'age': 25, 'name': 'b'}]</h1>\n<p>[-8, 3, 7, 83, 99]<br />\n[99, 83, 7, 3, -8]<br />\n[{'age': 10, 'name': 'c'}, {'age': 20, 'name': 'a'}, {'age': 25, 'name': 'b'}]<br />\n reversed (seq) 函数返回一个反转的迭代器。<br />\nseq -- 要转换的序列，可以是 tuple, string, list 或 range。<br />\n【例子】</p>\n<p>s = 'lsgogroup'<br />\nx = reversed(s)<br />\nprint(type(x))  # &lt;class 'reversed'&gt;<br />\nprint(x)  # &lt;reversed object at 0x000002507E8EC2C8&gt;<br />\nprint(list(x))</p>\n<h1 id=\"p-u-o-r-g-o-g-s-l\"><a class=\"anchor\" href=\"#p-u-o-r-g-o-g-s-l\">#</a> ['p', 'u', 'o', 'r', 'g', 'o', 'g', 's', 'l']</h1>\n<p>​<br />\nt = ('l', 's', 'g', 'o', 'g', 'r', 'o', 'u', 'p')<br />\nprint(list(reversed(t)))</p>\n<h1 id=\"p-u-o-r-g-o-g-s-l-2\"><a class=\"anchor\" href=\"#p-u-o-r-g-o-g-s-l-2\">#</a> ['p', 'u', 'o', 'r', 'g', 'o', 'g', 's', 'l']</h1>\n<p>​<br />\nr = range(5, 9)<br />\nprint(list(reversed(r)))</p>\n<h1 id=\"8-7-6-5\"><a class=\"anchor\" href=\"#8-7-6-5\">#</a> [8, 7, 6, 5]</h1>\n<p>​<br />\nx = [-8, 99, 3, 7, 83]<br />\nprint(list(reversed(x)))</p>\n<h1 id=\"83-7-3-99-8\"><a class=\"anchor\" href=\"#83-7-3-99-8\">#</a> [83, 7, 3, 99, -8]</h1>\n<p>&lt;class 'reversed'&gt;<br />\n&lt;reversed object at 0x000001F0517DFD68&gt;<br />\n['p', 'u', 'o', 'r', 'g', 'o', 'g', 's', 'l']<br />\n['p', 'u', 'o', 'r', 'g', 'o', 'g', 's', 'l']<br />\n[8, 7, 6, 5]<br />\n[83, 7, 3, 99, -8]<br />\nenumerate(sequence, [start=0])<br />\n【例子】用于将一个可遍历的数据对象 (如列表、元组或字符串) 组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p>\n<p>seasons = ['Spring', 'Summer', 'Fall', 'Winter']<br />\na = list(enumerate(seasons))<br />\nprint(a)</p>\n<h1 id=\"0-spring-1-summer-2-fall-3-winter\"><a class=\"anchor\" href=\"#0-spring-1-summer-2-fall-3-winter\">#</a> [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</h1>\n<p>​<br />\nb = list(enumerate(seasons, 1))<br />\nprint(b)</p>\n<h1 id=\"1-spring-2-summer-3-fall-4-winter\"><a class=\"anchor\" href=\"#1-spring-2-summer-3-fall-4-winter\">#</a> [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</h1>\n<p>​<br />\nfor i, element in a:<br />\nprint('{0},{1}'.format(i, element))</p>\n<h1 id=\"0spring\"><a class=\"anchor\" href=\"#0spring\">#</a> 0,Spring</h1>\n<h1 id=\"1summer\"><a class=\"anchor\" href=\"#1summer\">#</a> 1,Summer</h1>\n<h1 id=\"2fall\"><a class=\"anchor\" href=\"#2fall\">#</a> 2,Fall</h1>\n<h1 id=\"3winter\"><a class=\"anchor\" href=\"#3winter\">#</a> 3,Winter</h1>\n<p>[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]<br />\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]<br />\n0,Spring<br />\n1,Summer<br />\n2,Fall<br />\n3,Winter<br />\nzip(iter1 [,iter2 [...]])<br />\n 用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。<br />\n我们可以使用 list () 转换来输出列表。<br />\n如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。<br />\n【例子】</p>\n<p>a = [1, 2, 3]<br />\nb = [4, 5, 6]<br />\nc = [4, 5, 6, 7, 8]<br />\n​<br />\nzipped = zip(a, b)<br />\nprint(zipped)  # &lt;zip object at 0x000000C5D89EDD88&gt;<br />\nprint(list(zipped))  # [(1, 4), (2, 5), (3, 6)]<br />\nzipped = zip(a, c)<br />\nprint(list(zipped))  # [(1, 4), (2, 5), (3, 6)]<br />\n​<br />\na1, a2 = zip(*zip(a, b))<br />\nprint(list(a1))  # [1, 2, 3]<br />\nprint(list(a2))  # [4, 5, 6]<br />\n&lt;zip object at 0x000001F0517E38C8&gt;<br />\n[(1, 4), (2, 5), (3, 6)]<br />\n[(1, 4), (2, 5), (3, 6)]<br />\n[1, 2, 3]<br />\n[4, 5, 6]</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/29/python_4_day/",
            "url": "https://theprofessor249.github.io/2021/01/29/python_4_day/",
            "title": "python_4_day",
            "date_published": "2021-01-29T13:38:29.000Z",
            "content_html": "<p>基于人脸的常见表情识别 (1)—— 深度学习基础知识<br />\n神经网络</p>\n<ol>\n<li>感知机</li>\n<li>多层感知机与反向传播</li>\n</ol>\n<p>卷积神经网络</p>\n<ol>\n<li>全连接神经网络的 2 大缺陷</li>\n<li>卷积神经网络的崛起</li>\n</ol>\n<p>卷积神经网络的基本网络层</p>\n<ol>\n<li>什么是卷积？</li>\n<li>填充（Padding）</li>\n<li>步长（Stride）</li>\n<li>池化</li>\n<li>卷积和池化输出尺寸计算</li>\n<li>为什么要用卷积来学习呢？</li>\n<li>卷积神经网络的优势在哪？<br />\n本训练营以理论结合实战的方式，帮助大家从 0 完成一个人脸常见表情的识别，接下来是本训练营的理论部分。不要觉得理论枯燥哦，万丈高楼平地起，基础打牢了，后面学什么都容易，让我们开始吧～</li>\n</ol>\n<p>神经网络</p>\n<ol>\n<li>感知机<br />\n感知机（Perceptron）是 Frank Rosenblatt 在 1957 年提出的概念，其结构与 MP 模型类似，一般被视为最简单的人工神经网络，也作为二元线性分类器被广泛使用。通常情况下指单层的人工神经网络，以区别于多层感知机（Multilayer Perceptron）。尽管感知机结构简单，但能够学习并解决较复杂问题。</li>\n</ol>\n<p>Image</p>\n<p>假设我们有一个 n 维输入的单层感知机，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 至 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为 n 维输入向量的各个分量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mrow><mn>1</mn><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">w_{1j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 至 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mrow><mi>n</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">w_{nj}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 为各个输入分量连接到感知机的权量（或称权值），theta 为阈值，f 为激活函数（又称为激励函数或传递函数），o 为标量输出。理想的激活函数通常为阶跃函数或者 sigmoid 函数。感知机的输出是输入向量 x 与权重向量 w 求得内积后，经激活函数 f 所得到的标量。</p>\n<p>单层感知器类似一个逻辑回归模型，可以做线性分类任务，但是不能做更复杂的任务。第二次 AI 浪潮中马文・明斯基在其著作中证明了感知机本质上是一种线性模型，只能处理线性分类问题，就连最简单的 XOR（异或）问题都无法正确解决。作为人工智能领域的开创者之一，这一声明也直接或间接促使神经网络的研究陷入了近 20 年的停滞。</p>\n<ol start=\"2\">\n<li>多层感知机与反向传播<br />\n不过就算在低谷期，1974 年哈佛大学的 Paul Werbos 仍然证明增加一个网络层，利用反向传播算法可以搞定 XOR 问题。到了后来 Rummelhart，McClelland 以及 Hinton 在 1986 年正式在多层感知器 (MLP) 中使用 BP 算法，采用 Sigmoid 进行非线性映射，有效解决了非线性分类和学习的问题。</li>\n</ol>\n<p>Image</p>\n<p>多层感知机（Multi-Layer Perceptron）是由单层感知机推广而来，最主要的特点是有多个神经元层。一般将 MLP 的第一层称为输入层，中间的层为隐藏层，最后一层为输出层。MLP 并没有规定隐藏层的数量，因此可以根据实际处理需求选择合适的隐藏层层数，且对于隐藏层和输出层中每层神经元的个数也没有限制。</p>\n<p>多层感知机的关键问题在于如何训练其中各层间的连接权值，方法有一些不过大家最熟知的就是反向传播 BP 算法了。</p>\n<p>反向传播算法的具体推导涉及大量的公式，因此我们就不写了，大家随便找一本书都能找到资料，勤快的可以自己推导一遍。</p>\n<p>这里给大家一个实际的案例来体会：</p>\n<p>Image</p>\n<p>输出为 y，损失函数为 E。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>y</mi><mo>=</mo><msub><mi>h</mi><mn>1</mn></msub><msub><mi>w</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>h</mi><mn>2</mn></msub><msub><mi>w</mi><mrow><mi>h</mi><mn>2</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>w</mi><mn>11</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mi>w</mi><mn>12</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mi>w</mi><mn>21</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mi>w</mi><mn>22</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>E</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy=\"false\">(</mo><mi>y</mi><mo>−</mo><mi>t</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{array}{l} y=h_{1} w_{h 1}+h_{2} w_{h 2}=x_{1} w_{11}+x_{2} w_{12}+x_{2} w_{21}+x_{2} w_{22} \\\\ E=\\frac{1}{2}(y-t)^{2} \\end{array} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4051080000000002em;vertical-align:-0.9525540000000003em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.452554em;\"><span style=\"top:-3.612554em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4074459999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9525540000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p>假如某一时刻值如下：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi mathvariant=\"normal\">x</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">w</mi><mn>11</mn></msub><mo>=</mo><mn>0.1</mn><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">w</mi><mn>21</mn></msub><mo>=</mo><mo>−</mo><mn>0.1</mn><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">w</mi><mn>12</mn></msub><mo>=</mo><mo>−</mo><mn>0.1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi mathvariant=\"normal\">w</mi><mn>22</mn></msub><mo>=</mo><mn>0.1</mn><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">w</mi><mrow><mi mathvariant=\"normal\">h</mi><mn>1</mn></mrow></msub><mo>=</mo><mn>0.8</mn><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">w</mi><mrow><mi mathvariant=\"normal\">h</mi><mn>2</mn></mrow></msub><mo>=</mo><mn>0.9</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">t</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{array}{l} \\mathrm{x}_{1}=1, \\mathrm{x}_{2}=-1, \\mathrm{w}_{11}=0.1, \\mathrm{w}_{21}=-0.1, \\mathrm{w}_{12}=-0.1 \\\\ \\mathrm{w}_{22}=0.1, \\mathrm{w}_{\\mathrm{h} 1}=0.8, \\mathrm{w}_{\\mathrm{h} 2}=0.9, \\mathrm{t}=0 \\end{array} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4000000000000004em;vertical-align:-0.9500000000000004em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">w</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">w</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">w</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">w</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">w</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">h</span></span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">w</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">h</span></span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi>h</mi><mn>1</mn></msub><mo>=</mo><msub><mi>w</mi><mn>11</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>12</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mn>0.2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi>h</mi><mn>2</mn></msub><mo>=</mo><msub><mi>w</mi><mn>21</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>22</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>0.2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>y</mi><mo>=</mo><msub><mi>h</mi><mn>1</mn></msub><msub><mi>w</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>h</mi><mn>2</mn></msub><msub><mi>w</mi><mrow><mi>h</mi><mn>2</mn></mrow></msub><mo>=</mo><mo>−</mo><mn>0.02</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{array}{l} h_{1}=w_{11} x_{1}+w_{12} x_{2}=0.2 \\\\ h_{2}=w_{21} x_{1}+w_{22} x_{2}=-0.2 \\\\ y=h_{1} w_{h 1}+h_{2} w_{h 2}=-0.02 \\end{array} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.6000000000000005em;vertical-align:-1.5500000000000007em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p>那么我们可以计算 E 对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{h1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的误差传播值为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi mathvariant=\"normal\">E</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msub><mi>w</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi mathvariant=\"normal\">E</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi mathvariant=\"normal\">y</mi></mrow></mfrac><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msub><mi>w</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub></mrow></mfrac><mo>=</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo>−</mo><mi>t</mi><mo stretchy=\"false\">)</mo><msub><mi>h</mi><mn>1</mn></msub><mo>=</mo><mo>−</mo><mn>0.004</mn></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial \\mathrm{E}}{\\partial w_{h 1}}=\\frac{\\partial \\mathrm{E}}{\\partial \\mathrm{y}} \\frac{\\partial y}{\\partial w_{h 1}}=(y-t) h_{1}=-0.004 \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.20744em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathrm\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.25188em;vertical-align:-0.8804400000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">y</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathrm\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">4</span></span></span></span></span></p>\n<p>下次更新<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{h1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 这个参数的时候就可以采用：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>w</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>w</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub><mo>−</mo><mi>η</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>E</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msub><mi>w</mi><mrow><mi>h</mi><mn>1</mn></mrow></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">w_{h 1}=w_{h 1}-\\eta \\frac{\\partial E}{\\partial w_{h 1}} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.20744em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>η 就是学习率了，原理就是这样，一层一层推导下去就行了。</p>\n<p>反向传播算法让多层感知机，或者说传统的全连接神经网络有了训练的手段，引发了神经网络的第二次热潮，虽然为期不长，毕竟当时算力和数据都很有限，但是全连接神经网络总算是正式起来了。</p>\n<p>卷积神经网络</p>\n<ol>\n<li>全连接神经网络的 2 大缺陷<br />\n传统的 BP 神经网络在 20 世纪 80 年代左右流行，但是很快因为 SVM 等核方法的诞生而黯然失色。这是因为传统的 BP 神经网络有几个重大的缺陷。</li>\n</ol>\n<p>首先是原理上的缺陷：BP 神经网络仍然是有监督的传统机器学习方法，遵循着以下思路。</p>\n<p>Image</p>\n<p>也就是说，不过是在最后面将 SVM 或者其他分类器换成神经网络，在大部分情况下其实没有什么优势，甚至增加了问题的复杂度。</p>\n<p>提取的特征虽然是研究者们经过反复实验证明有效的特征，但仍然会一定程度上丢失了图像中的结构信息，从而丢失了一些对旋转扭曲等的不变性。而且要求输入的大小是固定的。为了学习到如偏移等微小的变化，需要有足够多的参数和足够多丰富的样本，最终学习到的权重，很可能在不同的位置处还会有非常相似的权重。</p>\n<p>有人可能会说，直接把图像作为输入而不提取特征行不行？请接着往下看。</p>\n<p>再一个就是结构上的缺陷：参数巨多，丢失空间信息。<br />\n全连接神经网络从 BP 算法提出开始，发展于 90 年代，那时候的计算机属于 CPU 时代，根本就无法撑起海量参数的计算。</p>\n<p>如果一个隐藏层特征图像大小为 100×100，输入层的特征图像大小为 100×100，这意味着学习这一层需要 100×100×100×100=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span> 的参数。如果以 32 位的浮点数进行存储，就需要<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">4×10^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span> 的字节的存储量，约等于 400MB 的参数量。仅仅这样的一个网络层，其模型参数量已经超过了 AlexNet 网络的参数量，而 100×100 的特征图像分辨率，已经低于很多任务能够成功解决的下限。除了计算过程中需要存储的海量的参数，还有海量的计算，这些都超过了当时硬件的能力，因此大大限制了网络的大小，尤其是对于一些大的图像输入。</p>\n<ol start=\"2\">\n<li>卷积神经网络的崛起<br />\n不管是历史局限性也好，还是神经网络有种种毛病，总之 80 年代后的 20 年间它不是主流。</li>\n</ol>\n<p>不过在上个世纪 90 年代研究神经网络的学者们没有停止，经典的诸如 LeNet5 这样的网络被提出。</p>\n<p>Image</p>\n<p>LeNet5，1999 年由深度学习三巨头中 LeCun， Bengi 的提出，成功用于银行支票上的手写数字识别，最重要的两个概念（局部连接 + 池化）</p>\n<p>下面这个视频记录了 1993 年 Yann LeCun 展示的，用于文本识别的世界上第一个卷积网络，所有人都可以通过当时的视频，亲自深刻感受到，当今经典又伟大的 CNN，是如何诞生的。</p>\n<p>为什么是卷积神经网络呢？首先自然是要知道什么是卷积神经网络。</p>\n<p>卷积神经网络的基本网络层<br />\n卷积神经网络：英文全称：Convolutional Neural Networks、简称：CNN</p>\n<p>CNN 主要包含卷积层、池化层和全连接层</p>\n<p>卷积层：用于对图像进行特征提取操作，其卷积核权重是共享权值的，对应的相关概念还包括步长，填充。<br />\n池化层：用于降低特征图大小，降低后续操作的计算量和参数量<br />\n全连接层：最终进行分类输出使用，本质就是多层感知机</p>\n<ol>\n<li>什么是卷积？<br />\n卷积在工程和数学上有非常多的应用，在信号处理领域中，任意一个线性系统的输出，就是输入信号和系统激励函数的卷积。放到数字图像处理领域，卷积操作一般指图像领域的二维卷积。</li>\n</ol>\n<p>Image</p>\n<p>一个二维卷积的案例如上，在图像上滑动，取与卷积核大小相等的区域，逐像素做乘法然后相加。 例如原始图像大小是 5×5，卷积核大小是 3×3。首先卷积核与原始图像左上角 3×3 对应位置的元素相乘求和，得到的数值作为结果矩阵第一行第一列的元素值，然后卷积核向右移动一个单位（即步长 stride 为 1），与原始图像前三行第 2、3、4 列所对应位置的元素分别相乘并求和，得到的数值作为结果矩阵第一行第二列的元素值，以此类推。</p>\n<p>故卷积就是：一个核矩阵在一个原始矩阵上从上往下、从左往右扫描，每次扫描都得到一个结果，将所有结果组合到一起得到一个新的结果矩阵。 注意这里我们不区分卷积和互相关，它们的区别只在于权重算子是否进行了翻转。之所以不重视，是因为在机器学习中，卷积核是否翻转，并不影响算法学习。</p>\n<p>以下的代码可以帮助理解：</p>\n<p>import torch<br />\nfrom torch import nn<br />\n​<br />\ndef corr2d (X, K):  # X 是输入，K 是卷积核<br />\n h, w = K.shape  # 获取卷积核的大小<br />\n Y = torch.zeros ((X.shape [0] - h + 1, X.shape [1] - w + 1))<br />\nfor i in range(Y.shape[0]):<br />\nfor j in range(Y.shape[1]):<br />\nY [i, j] = (X [i: i + h, j: j + w] * K).sum ()  # 累加<br />\n return Y<br />\n​<br />\nX = torch.tensor ([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) # 模拟一个输入<br />\n K = torch.tensor ([[0, 1], [2, 3]])                  # 模拟一个卷积核<br />\n corr2d (X, K)<br />\ntensor([[19., 25.],<br />\n[37., 43.]])<br />\n 下图就是上面程序的模拟图 Image</p>\n<ol start=\"2\">\n<li>填充（Padding）<br />\n使卷积后图像分辨率不变，方便计算特征图尺寸的变化<br />\n弥补边界信息 “丢失”<br />\n 填充（padding）是指在输入高和宽的两侧填充元素（通常是 0 元素）。下图我们在原输入高和宽的两侧分别添加了值为 0 的元素，使得输入高和宽从 3 变成了 5，并导致输出高和宽由 2 增加到 4。下图阴影部分为第一个输出元素及其计算所使用的输入和核数组元素：0×0+0×1+0×2+0×3=0。</li>\n</ol>\n<p>Image</p>\n<ol start=\"3\">\n<li>步长（Stride）<br />\n卷积窗口从输入数组的最左上方开始，按从左往右、从上往下的顺序，依次在输入数组上滑动。我们将每次滑动的行数和列数称为步幅或步长（stride）。</li>\n</ol>\n<p>下图展示了在高上步幅为 3、在宽上步幅为 2 的卷积运算。可以看到，输出第一列第二个元素时，卷积窗口向下滑动了 3 行，而在输出第一行第二个元素时卷积窗口向右滑动了 2 列。当卷积窗口在输入上再向右滑动 2 列时，由于输入元素无法填满窗口，无结果输出。下图阴影部分为输出元素及其计算所使用的输入和核数组元素：0×0+0×1+1×2+2×3=8、0×0+6×1+0×2+0×3=6。</p>\n<p>Image</p>\n<ol start=\"4\">\n<li>池化<br />\n对图像进行下采样，降低图像分辨率。</li>\n</ol>\n<p>池化层的作用：使特征图变小，简化网络计算复杂度；压缩特征，提取主要特征</p>\n<p>常见的池化操作可以分为：最大池化（Max Pool）、平均池化（Avg Pool），示意图如下：</p>\n<p>Image</p>\n<ol start=\"5\">\n<li>卷积和池化输出尺寸计算<br />\n假设输入图片的高和宽一致，卷积核的宽和高一致，那么输入图像的尺寸与输出图像的尺寸有如下关系：</li>\n</ol>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">F_{in}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是输入图像、k 是卷积核的大小、p 是图像填充的大小、s 是卷积核的步幅、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>o</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_o</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">o</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是输出、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mn>6.6</mn><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor 6.6 \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mclose\">⌋</span></span></span></span> 是向下取整的意思，比如结果是 6.6，那么向下取整就是 6</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>F</mi><mi>o</mi></msub><mo>=</mo><mrow><mo fence=\"true\">⌊</mo><mfrac><mrow><msub><mi>F</mi><mtext>in </mtext></msub><mo>−</mo><mi>k</mi><mo>+</mo><mn>2</mn><mi>p</mi></mrow><mi>s</mi></mfrac><mo fence=\"true\">⌋</mo></mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">F_{o}=\\left\\lfloor\\frac{F_{\\text {in }}-k+2 p}{s}\\right\\rfloor+1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">⌊</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31750199999999995em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">in </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">⌋</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>Image</p>\n<p>除此之外，卷积神经网络还包括许多优化技术，大家可以参考相关资料。</p>\n<ol start=\"6\">\n<li>为什么要用卷积来学习呢？<br />\n图像都是用方形矩阵来表达的，学习的本质就是要抽象出特征，以边缘检测为例。它就是识别数字图像中亮度变化明显的点，这些点连接起来往往是物体的边缘。</li>\n</ol>\n<p>传统的边缘检测常用的方法包括一阶和二阶导数法，本质上都是利用一个卷积核在原图上进行滑动，只是其中各个位置的系数不同，比如 3×3 的 sobel 算子计算 x 方向的梯度幅度，使用的就是下面的卷积核算子。</p>\n<p>Image</p>\n<p>如果要用 sobel 算子完成一次完整的边缘检测，就要同时检测 x 方向和 y 方向，然后进行融合。这就是两个通道的卷积，先用两个卷积核进行通道内的信息提取，再进行通道间的信息融合。 这就是卷积提取特征的本质，而所有基于卷积神经网络来学习的图像算法，都是通过不断的卷积来进行特征的抽象，直到实现网络的目标。</p>\n<ol start=\"7\">\n<li>卷积神经网络的优势在哪？<br />\n前面说了全连接神经网络的原理和结构上的缺陷，而这正好是卷积的优势。</li>\n</ol>\n<p>学习原理上的改进。<br />\n卷积神经网络不再是有监督学习了，不需要从图像中提取特征，而是直接从原始图像数据进行学习，这样可以最大程度的防止信息在还没有进入网络之前就丢失。</p>\n<p>学习方式的改进。<br />\n前面说了全连接神经网络一层的结果是与上一层的节点全部连接的，100×100 的图像，如果隐藏层也是同样大小（100×100 个）的神经元，光是一层网络，就已经有 10^8 个参数。要优化和存储这样的参数量，是无法想象的，所以经典的神经网络，基本上隐藏层在一两层左右。而卷积神经网络某一层的结点，只与上一层的一个图像块相连。</p>\n<p>用于产生同一个图像中各个空间位置像素的卷积核是同一个，这就是所谓的权值共享。对于与全连接层同样多的隐藏层，假如每个神经元只和输入 10×10 的局部 patch 相连接，且卷积核移动步长为 10，则参数为：100×100×10×10，降低了 2 个数量级。 又能更好的学习，参数又低，卷积神经网络当然是可以成功了。</p>\n<p>以上就是本训练营所有理论知识了，接下来将是项目实战部分，是不是迫不及待想要敲代码了</p>\n<p>-- By：有三 AI 团队</p>\n<p>聚焦于让大家能够系统性地完成 AI 各个领域所需的专业知识的学习，实现三人行必有 AI，三人行必有我师的愿景。</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/29/python-6-day/",
            "url": "https://theprofessor249.github.io/2021/01/29/python-6-day/",
            "title": "python_6_day",
            "date_published": "2021-01-29T13:38:29.000Z",
            "content_html": "<p>基于人脸的常见表情识别 —— 模型搭建、训练与测试<br />\n模型搭建与训练</p>\n<ol>\n<li>数据接口准备</li>\n<li>模型定义</li>\n<li>模型训练</li>\n</ol>\n<p>模型测试</p>\n<p>本 Task 是『基于人脸的常见表情识别』训练营的第 3 课，如果你未学习前面的课程，请从 Task1 开始学习，本 Task 需要使用到数据集，在 Task2 中提供下载的渠道。</p>\n<p>在完成了数据准备后，接下来就是卷积神经网络一展身手的时候了，通过本次任务，您将学到如何使用 PyTorch 深度学习框架，实现卷积神经网络的定义、训练和预测。</p>\n<p>模型搭建与训练<br />\n得到了数据之后，接下来咱们使用 PyTorch 这个框架来进行模型的训练。整个训练流程包括数据接口准备、模型定义、结果保存与分析。</p>\n<ol>\n<li>数据接口准备<br />\n PyTorch 图像分类直接利用文件夹作为输入，只需要把不同类的数据放到不同的文件夹中。数据读取的完整代码如下：</li>\n</ol>\n<p>data_transforms = {<br />\n'train': transforms.Compose([<br />\ntransforms.RandomSizedCrop(48),<br />\ntransforms.RandomHorizontalFlip(),<br />\ntransforms.ToTensor(),<br />\ntransforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])<br />\n]),<br />\n'val': transforms.Compose([<br />\ntransforms.Scale(64),<br />\ntransforms.CenterCrop(48),<br />\ntransforms.ToTensor(),<br />\ntransforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])<br />\n]),<br />\n}</p>\n<p>data_dir = './train_val_data/'<br />\nimage_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),<br />\ndata_transforms[x]) for x in ['train', 'val']}<br />\ndataloders = {x: torch.utils.data.DataLoader(image_datasets[x],<br />\nbatch_size=16,<br />\nshuffle=True,<br />\nnum_workers=4) for x in ['train', 'val']}<br />\n 上面脚本中的函数，输入一个文件夹，输出图片路径以及标签，在开始训练之前需要将数据集进行拆分，拆分成训练集 (train) 和验证集 (val)，训练集和测试集的比例为 9:1，train_val_data 文件结构如下所示，其中 0 代表 none、 1 代表 pouting、2 代表 smile、3 代表 openmouth：</p>\n<ul>\n<li>train_val_data\n<ul>\n<li>\n<p>train</p>\n<ul>\n<li>0</li>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n</li>\n<li>\n<p>val</p>\n<ul>\n<li>0</li>\n<li>1</li>\n<li>2</li>\n<li>3<br />\n 到此，数据接口就定义完毕了，接下来在训练代码中看如何使用迭代器进行数据读取就可以了。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>模型定义<br />\n创建数据接⼝后，我们开始定义⼀个⽹络 simpleconv3</li>\n</ol>\n<p>import torch.nn as nn<br />\nimport torch.nn.functional as F<br />\n​<br />\nclass simpleconv3(nn.Module):<br />\ndef <strong>init</strong>(self):<br />\nsuper(simpleconv3,self).<strong>init</strong>()<br />\nself.conv1 = nn.Conv2d(3, 12, 3, 2)<br />\nself.bn1 = nn.BatchNorm2d(12)<br />\nself.conv2 = nn.Conv2d(12, 24, 3, 2)<br />\nself.bn2 = nn.BatchNorm2d(24)<br />\nself.conv3 = nn.Conv2d(24, 48, 3, 2)<br />\nself.bn3 = nn.BatchNorm2d(48)<br />\nself.fc1 = nn.Linear(48 * 5 * 5 , 1200)<br />\nself.fc2 = nn.Linear(1200 , 128)<br />\nself.fc3 = nn.Linear(128 , 4)<br />\n​<br />\ndef forward(self , x):<br />\nx = F.relu(self.bn1(self.conv1(x)))<br />\n#print &quot;bn1 shape&quot;,x.shape<br />\nx = F.relu(self.bn2(self.conv2(x)))<br />\nx = F.relu(self.bn3(self.conv3(x)))<br />\nx = x.view(-1 , 48 * 5 * 5)<br />\nx = F.relu(self.fc1(x))<br />\nx = F.relu(self.fc2(x))<br />\nx = self.fc3(x)<br />\nreturn x<br />\n 上面就是我们定义的网络，是一个简单的 3 层卷积。在 torch.nn 下，有各种网络层，这里就用到了 nn.Conv2d，nn.BatchNorm2d 和 nn.Linear，分别是卷积层，BN 层和全连接层。我们以一个卷积层为例：</p>\n<p>conv1 = nn.Conv2d(in_channels=3, out_channels=12, kernel_size=3, stride=2)<br />\nbn1 = nn.BatchNorm2d(num_features=12)<br />\n in_channels：输入通道数<br />\n out_channels：输出通道数<br />\n kernel_size：卷积核的大小<br />\n stride：卷积核的移动步长<br />\n更全面的参数，请自查 API：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXRvcmNoLm9yZy8=\">https://pytorch.org/</span></p>\n<ol start=\"3\">\n<li>模型训练<br />\n这里准备好了数据集，可以直接使用</li>\n</ol>\n<p>深度学习一般使用 GPU 进行训练，大家可以根据下图的操作，将设备切换至 GPU 状态，再运行下面的程序，切换过程需要一定时间，请耐心等待</p>\n<p>Image</p>\n<p>#coding:utf8<br />\nfrom <strong>future</strong> import print_function, division<br />\n​<br />\nimport torch<br />\nimport torch.nn as nn<br />\nimport torch.optim as optim<br />\nfrom torch.optim import lr_scheduler<br />\nfrom torch.autograd import Variable<br />\nimport torchvision<br />\nfrom torchvision import datasets, models, transforms<br />\nimport time<br />\nimport os<br />\nfrom tensorboardX import SummaryWriter<br />\nimport torch.nn.functional as F<br />\nimport numpy as np<br />\n​<br />\nimport warnings<br />\n​<br />\nwarnings.filterwarnings('ignore')<br />\n​<br />\nwriter = SummaryWriter()<br />\n​<br />\ndef train_model(model, criterion, optimizer, scheduler, num_epochs=25):<br />\nfor epoch in range(num_epochs):<br />\nprint('Epoch {}/{}'.format(epoch, num_epochs - 1))<br />\nfor phase in ['train', 'val']:<br />\nif phase == 'train':<br />\nscheduler.step()<br />\nmodel.train(True)  # Set model to training mode<br />\nelse:<br />\nmodel.train(False)  # Set model to evaluate mode<br />\n​<br />\nrunning_loss = 0.0<br />\nrunning_corrects = 0.0<br />\n​<br />\nfor data in dataloders[phase]:<br />\ninputs, labels = data<br />\nif use_gpu:<br />\ninputs = Variable(inputs.cuda())<br />\nlabels = Variable(labels.cuda())<br />\nelse:<br />\ninputs, labels = Variable(inputs), Variable(labels)<br />\n​<br />\noptimizer.zero_grad()<br />\noutputs = model(inputs)<br />\n_, preds = torch.max(outputs.data, 1)<br />\nloss = criterion(outputs, labels)<br />\nif phase == 'train':<br />\nloss.backward()<br />\noptimizer.step()<br />\n​<br />\nrunning_loss += loss.data.item()<br />\nrunning_corrects += torch.sum(preds == labels).item()<br />\n​<br />\nepoch_loss = running_loss / dataset_sizes[phase]<br />\nepoch_acc = running_corrects / dataset_sizes[phase]</p>\n<pre><code>        if phase == 'train':\n            writer.add_scalar('data/trainloss', epoch_loss, epoch)\n            writer.add_scalar('data/trainacc', epoch_acc, epoch)\n        else:\n            writer.add_scalar('data/valloss', epoch_loss, epoch)\n            writer.add_scalar('data/valacc', epoch_acc, epoch)\n</code></pre>\n<p>​<br />\nprint('{} Loss: {:.4f} Acc: {:.4f}'.format(<br />\nphase, epoch_loss, epoch_acc))<br />\n​<br />\nwriter.export_scalars_to_json(&quot;./all_scalars.json&quot;)<br />\nwriter.close()<br />\nreturn model<br />\n​<br />\nif <strong>name</strong> == '<strong>main</strong>':<br />\n​<br />\ndata_transforms = {<br />\n'train': transforms.Compose([<br />\ntransforms.RandomSizedCrop(48),<br />\ntransforms.RandomHorizontalFlip(),<br />\ntransforms.ToTensor(),<br />\ntransforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])<br />\n]),<br />\n'val': transforms.Compose([<br />\ntransforms.Scale(64),<br />\ntransforms.CenterCrop(48),<br />\ntransforms.ToTensor(),<br />\ntransforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])<br />\n]),<br />\n}<br />\n​<br />\ndata_dir = './Emotion_Recognition_File/train_val_data/' # 数据集所在的位置<br />\n image_datasets = {x: datasets.ImageFolder (os.path.join (data_dir, x),<br />\ndata_transforms[x]) for x in ['train', 'val']}<br />\ndataloders = {x: torch.utils.data.DataLoader(image_datasets[x],<br />\nbatch_size=64,<br />\nshuffle=True if x==&quot;train&quot; else False,<br />\nnum_workers=8) for x in ['train', 'val']}<br />\n​<br />\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}<br />\n​<br />\nuse_gpu = torch.cuda.is_available()<br />\n print (&quot;是否使用 GPU&quot;, use_gpu)<br />\nmodelclc = simpleconv3()<br />\nprint(modelclc)<br />\nif use_gpu:<br />\nmodelclc = modelclc.cuda()<br />\n​<br />\ncriterion = nn.CrossEntropyLoss()<br />\noptimizer_ft = optim.SGD(modelclc.parameters(), lr=0.1, momentum=0.9)<br />\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=100, gamma=0.1)<br />\n​<br />\nmodelclc = train_model(model=modelclc,<br />\ncriterion=criterion,<br />\noptimizer=optimizer_ft,<br />\nscheduler=exp_lr_scheduler,<br />\nnum_epochs=10)  # 这里可以调节训练的轮次<br />\n if not os.path.exists (&quot;models&quot;):<br />\nos.mkdir('models')<br />\ntorch.save(modelclc.state_dict(),'models/model.ckpt')<br />\n 训练的过程需要注意几个参数，第一个是数据加载器 (dataloders) 中的 batch_size，这个代表的含义是每次送入模型训练的图片数量，这个需要根据 GPU 的显存来设置，显存越大，可以设置越大，这个数一般设置为 2 的整数次幂（如 4、8、16、32 等）</p>\n<p>dataloders = {x: torch.utils.data.DataLoader(image_datasets[x],<br />\nbatch_size=64,<br />\nshuffle=True if x==&quot;train&quot; else False,<br />\nnum_workers=8) for x in ['train', 'val']}<br />\n 第二个需要注意的参数是训练函数的 num_epochs，这个参数代表的意义是，模型训练的轮次。</p>\n<p>modelclc = train_model(model=modelclc,<br />\ncriterion=criterion,<br />\noptimizer=optimizer_ft,<br />\nscheduler=exp_lr_scheduler,<br />\nnum_epochs=10)  # 这里可以调节训练的轮次<br />\n模型测试<br />\n上⾯已经训练好了模型，我们接下来的⽬标，就是要⽤它来做推理，真正把模型⽤起来，下⾯我们载⼊⼀个图⽚，⽤模型进⾏测试。 结果在 results 文件夹中</p>\n<h1 id=\"codingutf8\"><a class=\"anchor\" href=\"#codingutf8\">#</a> coding:utf8</h1>\n<p>​<br />\nimport sys<br />\nimport numpy as np<br />\nimport cv2<br />\nimport os<br />\nimport dlib<br />\n​<br />\nimport torch<br />\nimport torch.nn as nn<br />\nimport torch.optim as optim<br />\nfrom torch.optim import lr_scheduler<br />\nfrom torch.autograd import Variable<br />\nimport torchvision<br />\nfrom torchvision import datasets, models, transforms<br />\nimport time<br />\nfrom PIL import Image<br />\nimport torch.nn.functional as F<br />\n​<br />\nimport matplotlib.pyplot as plt<br />\nimport warnings<br />\n​<br />\nwarnings.filterwarnings('ignore')<br />\n​<br />\n​<br />\nPREDICTOR_PATH = &quot;./Emotion_Recognition_File/face_detect_model/shape_predictor_68_face_landmarks.dat&quot;<br />\npredictor = dlib.shape_predictor(PREDICTOR_PATH)<br />\ncascade_path = './Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml'<br />\ncascade = cv2.CascadeClassifier(cascade_path)<br />\n​<br />\nif not os.path.exists(&quot;results&quot;):<br />\nos.mkdir(&quot;results&quot;)</p>\n<p>​<br />\ndef standardization(data):<br />\nmu = np.mean(data, axis=0)<br />\nsigma = np.std(data, axis=0)<br />\nreturn (data - mu) / sigma<br />\n​<br />\n​<br />\ndef get_landmarks(im):<br />\nrects = cascade.detectMultiScale(im, 1.3, 5)<br />\nx, y, w, h = rects[0]<br />\nrect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h))<br />\nreturn np.matrix([[p.x, p.y] for p in predictor(im, rect).parts()])<br />\n​<br />\n​<br />\ndef annotate_landmarks(im, landmarks):<br />\nim = im.copy()<br />\nfor idx, point in enumerate(landmarks):<br />\npos = (point[0, 0], point[0, 1])<br />\ncv2.putText(im,<br />\nstr(idx),<br />\npos,<br />\nfontFace=cv2.FONT_HERSHEY_SCRIPT_SIMPLEX,<br />\nfontScale=0.4,<br />\ncolor=(0, 0, 255))<br />\ncv2.circle(im, pos, 3, color=(0, 255, 255))<br />\nreturn im<br />\n​<br />\n​<br />\ntestsize = 48  # 测试图大小<br />\n​<br />\ndata_transforms = transforms.Compose([<br />\ntransforms.ToTensor(),<br />\ntransforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])<br />\n])<br />\nnet = simpleconv3()<br />\nnet.eval()<br />\n modelpath = &quot;./models/model.ckpt&quot;  # 模型路径<br />\n net.load_state_dict (<br />\ntorch.load(modelpath, map_location=lambda storage, loc: storage))<br />\n​</p>\n<h1 id=\"一次测试一个文件\"><a class=\"anchor\" href=\"#一次测试一个文件\">#</a> 一次测试一个文件</h1>\n<p>img_path = &quot;./Emotion_Recognition_File/find_face_img/&quot;<br />\nimagepaths = os.listdir (img_path)  # 图像文件夹<br />\n for imagepath in imagepaths:<br />\nim = cv2.imread(os.path.join(img_path, imagepath), 1)<br />\ntry:<br />\nrects = cascade.detectMultiScale(im, 1.3, 5)<br />\nx, y, w, h = rects[0]<br />\nrect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h))<br />\nlandmarks = np.matrix([[p.x, p.y]<br />\nfor p in predictor(im, rect).parts()])<br />\nexcept:</p>\n<h1 id=\"print没有检测到人脸\"><a class=\"anchor\" href=\"#print没有检测到人脸\">#</a> print (&quot;没有检测到人脸&quot;)</h1>\n<pre><code>    continue  # 没有检测到人脸\n</code></pre>\n<p>​<br />\nxmin = 10000<br />\nxmax = 0<br />\nymin = 10000<br />\nymax = 0<br />\n​<br />\nfor i in range(48, 67):<br />\nx = landmarks[i, 0]<br />\ny = landmarks[i, 1]<br />\nif x &lt; xmin:<br />\nxmin = x<br />\nif x &gt; xmax:<br />\nxmax = x<br />\nif y &lt; ymin:<br />\nymin = y<br />\nif y &gt; ymax:<br />\nymax = y<br />\n​<br />\nroiwidth = xmax - xmin<br />\nroiheight = ymax - ymin<br />\n​<br />\nroi = im[ymin:ymax, xmin:xmax, 0:3]<br />\n​<br />\nif roiwidth &gt; roiheight:<br />\ndstlen = 1.5 * roiwidth<br />\nelse:<br />\ndstlen = 1.5 * roiheight<br />\n​<br />\ndiff_xlen = dstlen - roiwidth<br />\ndiff_ylen = dstlen - roiheight<br />\n​<br />\nnewx = xmin<br />\nnewy = ymin<br />\n​<br />\nimagerows, imagecols, channel = im.shape<br />\nif newx &gt;= diff_xlen / 2 and newx + roiwidth + diff_xlen / 2 &lt; imagecols:<br />\nnewx = newx - diff_xlen / 2<br />\nelif newx &lt; diff_xlen / 2:<br />\nnewx = 0<br />\nelse:<br />\nnewx = imagecols - dstlen<br />\n​<br />\nif newy &gt;= diff_ylen / 2 and newy + roiheight + diff_ylen / 2 &lt; imagerows:<br />\nnewy = newy - diff_ylen / 2<br />\nelif newy &lt; diff_ylen / 2:<br />\nnewy = 0<br />\nelse:<br />\nnewy = imagecols - dstlen<br />\n​<br />\nroi = im[int(newy):int(newy + dstlen), int(newx):int(newx + dstlen), 0:3]<br />\nroi = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)<br />\nroiresized = cv2.resize(roi,<br />\n(testsize, testsize)).astype(np.float32) / 255.0<br />\nimgblob = data_transforms(roiresized).unsqueeze(0)<br />\nimgblob.requires_grad = False<br />\nimgblob = Variable(imgblob)<br />\ntorch.no_grad()<br />\npredict = F.softmax(net(imgblob))<br />\nprint(predict)<br />\nindex = np.argmax(predict.detach().numpy())<br />\n​<br />\nim_show = cv2.imread(os.path.join(img_path, imagepath), 1)<br />\nim_h, im_w, im_c = im_show.shape<br />\npos_x = int(newx + dstlen)<br />\npos_y = int(newy + dstlen)<br />\nfont = cv2.FONT_HERSHEY_SIMPLEX<br />\ncv2.rectangle(im_show, (int(newx), int(newy)),<br />\n(int(newx + dstlen), int(newy + dstlen)), (0, 255, 255), 2)<br />\nif index == 0:<br />\ncv2.putText(im_show, 'none', (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)<br />\nif index == 1:<br />\ncv2.putText(im_show, 'pout', (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)<br />\nif index == 2:<br />\ncv2.putText(im_show, 'smile', (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)<br />\nif index == 3:<br />\ncv2.putText(im_show, 'open', (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)</p>\n<h1 id=\"cv2namedwindowresult-0\"><a class=\"anchor\" href=\"#cv2namedwindowresult-0\">#</a> cv2.namedWindow('result', 0)</h1>\n<h1 id=\"cv2imshowresult-im_show\"><a class=\"anchor\" href=\"#cv2imshowresult-im_show\">#</a> cv2.imshow('result', im_show)</h1>\n<pre><code>cv2.imwrite(os.path.join('results', imagepath), im_show)\n</code></pre>\n<h1 id=\"printospathjoinresults-imagepath\"><a class=\"anchor\" href=\"#printospathjoinresults-imagepath\">#</a> print(os.path.join('results', imagepath))</h1>\n<pre><code>plt.imshow(im_show[:, :, ::-1])  # 这里需要交换通道，因为 matplotlib 保存图片的通道顺序是 RGB，而在 OpenCV 中是 BGR\nplt.show()\n</code></pre>\n<h1 id=\"cv2waitkey0\"><a class=\"anchor\" href=\"#cv2waitkey0\">#</a> cv2.waitKey(0)</h1>\n<h1 id=\"cv2destroyallwindows\"><a class=\"anchor\" href=\"#cv2destroyallwindows\">#</a> cv2.destroyAllWindows()</h1>\n<p>tensor([[8.1330e-03, 6.7033e-04, 9.8497e-01, 6.2311e-03]],<br />\ngrad_fn=&lt;SoftmaxBackward&gt;)</p>\n<p>tensor([[1.0822e-06, 1.9005e-09, 1.0000e+00, 2.3623e-07]],<br />\ngrad_fn=&lt;SoftmaxBackward&gt;)</p>\n<p>tensor([[9.9190e-01, 3.7207e-03, 4.3589e-03, 1.5936e-05]],<br />\ngrad_fn=&lt;SoftmaxBackward&gt;)</p>\n<p>tensor([[4.3434e-07, 1.2525e-06, 1.1251e-05, 9.9999e-01]],<br />\ngrad_fn=&lt;SoftmaxBackward&gt;)</p>\n<p>tensor([[0.0899, 0.8970, 0.0115, 0.0016]], grad_fn=&lt;SoftmaxBackward&gt;)</p>\n<p>再次说明：0 代表 none、 1 代表 pouting、2 代表 smile、3 代表 openmouth</p>\n<p>上面展示的图片上方会有一个输出，如：tensor ([[8.1330e-03, 6.7033e-04, 9.8497e-01, 6.2311e-03]])</p>\n<p>这个代表的含义是，该图片在这个模型预测下，是该类别的可能性，比如上面这个例子 9.8497e-01 是四个值最大的，它的索引是 2（从 0 开始算），所以预测该图片为 smile</p>\n<p>以上就是本训练营的全部内容了，希望通过本次训练营，可以帮助大家搭建起一个深度学习项目的框架，然后将所学的知识应用到自己的项目、工作中。谢谢！</p>\n<p>-- By：有三 AI 团队</p>\n<p>聚焦于让大家能够系统性地完成 AI 各个领域所需的专业知识的学习，实现三人行必有 AI，三人行必有我师的愿景。</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/29/python_5_day/",
            "url": "https://theprofessor249.github.io/2021/01/29/python_5_day/",
            "title": "python_5_day",
            "date_published": "2021-01-29T13:38:29.000Z",
            "content_html": "<p>基于人脸的常见表情识别 —— 数据获取与整理<br />\n项目背景</p>\n<p>数据获取<br />\n 2.1 数据爬取</p>\n<p>数据整理<br />\n 3.1 图片格式统一<br />\n 3.2 数据清洗<br />\n 3.3 提取嘴唇区域</p>\n<p>该 Task 就是本训练营的实战部分了，这一部分我们会讲解如何获取数据集，并对数据集进行整理。</p>\n<p>这个 Task 会涉及到数据集等文件的下载，请运行以下代码下载相关文件，由于需要对下载的文件进行解压，所以速度会比较慢，请耐心等候。（大概需要 8 分钟左右）</p>\n<p>如果你不是第一次运行这个项目，那么就跳过以下代码</p>\n<p>print (&quot;**************** 下载文件中。。。&quot;)<br />\n!wget <span class=\"exturl\" data-url=\"aHR0cDovL3RpYW5jaGktbWVkaWEub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL2RyYWdvbmJhbGwvREwvb3RoZXIvZGF0YS9FbW90aW9uX1JlY29nbml0aW9uX0ZpbGUuemlw\">http://tianchi-media.oss-cn-beijing.aliyuncs.com/dragonball/DL/other/data/Emotion_Recognition_File.zip</span><br />\nprint (&quot;**************** 下载完成。。。&quot;)<br />\n print (&quot;**************** 解压文件中。。。&quot;)<br />\n!unzip -q -o ./Emotion_Recognition_File.zip -d Emotion_Recognition_File/<br />\nprint(&quot;*<em><strong><strong><strong><strong><strong><strong><strong> 解压完毕</strong></strong></strong></strong></strong></strong></strong></em> &quot;)<br />\n 为了帮助大家理解所下载的文件，这里将会做一个简单的说明</p>\n<p>所有下载的文件均在 Emotion_Recognition_File （表情识别的英文名称）文件夹下，以下对各个文件进行说明</p>\n<p>img_type_test：放置了不同后缀名的图片，在 3.1 图片格式统一 将会使用到<br />\n face_detect_model：放置了人脸检测所需要的模型，在 3.2 数据清洗、3.3 提取嘴唇区域 将会使用到<br />\n face_det_img：放置了一些包含人脸的图片和不包含人人脸的图片，在 3.2 数据清洗 将会使用到<br />\n mouth_det_img：放置了一些包含人脸的图片，在 3.3 提取嘴唇区域 将会使用到<br />\n train_val_data：放置了本训练营为各位读者准备的数据集，将会在下一个 Task 用到<br />\n test_img：放置了包含 4 种表情的图片各一张，将会在下一个 Task 用到，我们就是使用这个文件夹里的图片来展示我们的成果<br />\n项目背景<br />\n对于很多初⼊深度学习计算机视觉领域的朋友来说，当前开源资料⾮常多，但有时候难以适从，其中很多资料都没有包含完整的项⽬流程，⽽只是对某个流程的部分截取，对能⼒的锻炼不够。图像分类是整个计算机视觉领域中最基础的任务，也是最重要的任务之⼀，最适合拿来进⾏学习实践。为了让新⼿们能够⼀次性体验⼀个⼯业级别的图像分类任务的完整流程，本次我们选择带领⼤家完成⼀个对图片中⼈脸进⾏表情识别的任务。</p>\n<p>⼈脸表情识别 (facial expression recognition, FER) 作为⼈脸识别技术中的⼀个重要组成部分，近年来在⼈机交互、安全、机器⼈制造、⾃动化、医疗、通信和驾驶领域得到了⼴泛的关注，成为学术界和⼯业界的研究热点，是⼈脸属性分析的重点。</p>\n<p>数据获取<br />\n很多实际项⽬我们不会有现成的数据集，虽然可以通过开源数据集获取，但是我们还是要学会⾃⼰从零开始获取和整理。下⾯讲述如何准备好本次项⽬所需要的数据集，包括以下部分:</p>\n<p>学会使⽤爬⾍爬取图像。<br />\n对获得的图⽚数据进⾏整理，包括重命名，格式统⼀。<br />\n利⽤⼈脸检测算法删选出有⽤的样本，利⽤关键点检测算法裁剪出⽤于算法训练的嘴唇区域。<br />\n2.1 数据爬取<br />\n由于没有直接对应的开源数据集，或者开源数据集中的数据⽐较少，尤其是对于嘟嘴，⼤笑等类的数据。搜索引擎上有海量数据，所以我们可以从中爬取。下⾯开始讲述具体的步骤，我们的任务是⼀个表情分类任务，因此需要爬取相关图⽚，包括嘟嘴（pout），微笑（smile），⼤笑（openmouth）、无表情（none）等表情。</p>\n<p>当前有很多开源的爬虫项目，即使你不懂爬虫的知识，也能够很容易的爬取互联网的资源，下文整理了一些常见的爬虫项目，可以参考进行学习。 【杂谈】深度学习必备，各路免费爬虫一举拿下</p>\n<p>本项目使用的爬虫项目是：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Njemhlbmd5YWJpbi9JbWFnZS1Eb3dubG9hZGVy\">https://github.com/sczhengyabin/Image-Downloader</span> ，可以按要求爬取百度、Bing、Google 上的图片，提供了非常人性化的 GUI 方便操作，使用方法如下：</p>\n<p>下载爬虫工具</p>\n<p>图片无法加载时显示的文字<br />\n使用 python image_downloader_gui.py 调用 GUI 界面，配置好参数 (关键词，路径，爬取数目等)，关键词可以直接在这里输入也可以选择从 txt 文件中选择。</p>\n<p>可以配置需要爬取的样本数目，这里一次爬了 2000 张，妥妥的 3 分钟搞定。</p>\n<p>该项目的 GUI 界面如下，我们尝试爬取 “嘟嘴” 的相关表情：</p>\n<p>图片无法加载时显示的文字<br />\n爬取图⽚结果如下：</p>\n<p>图片无法加载时显示的文字<br />\n⾃此就可以获得数千张图像，然后进⾏第⼆步，数据整理。</p>\n<p>TIPS：读者可以下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Njemhlbmd5YWJpbi9JbWFnZS1Eb3dubG9hZGVy\">https://github.com/sczhengyabin/Image-Downloader</span> 这个项目中的爬虫工具，在自己的电脑尝试一下数据爬取，相信通过操作，会加深你的印象</p>\n<p>数据整理<br />\n爬取得到的数据是⽐较脏的，需要进⾏整理，主要包括统⼀图⽚后缀和重命名。统⼀后缀格式可以减少以后写数据 API 时的压⼒，也可以测试图⽚是不是可以正常的读取，及时防⽌未知问题的出现，这很重要。</p>\n<p>3.1 图片格式统一<br />\n以下代码可以实现对图片格式的统一，我们在 img_type_test 文件下放置了几张测试图片，读者可以运行尝试。『读者也可以上传不同格式（如 jpg、jpeg、png 等）的图片到 img_type_test 文件下，然后运行下面的代码，下面的代码读取每种图片，然后将其转为 jpg 格式，同时会将原始的图片删除』</p>\n<p>import os<br />\nimport sys<br />\nimport cv2<br />\nimport numpy as np<br />\n​<br />\n​<br />\ndef listfiles(rootDir):<br />\nlist_dirs = os.walk(rootDir)<br />\n for root, dirs, files in list_dirs:  # 遍历文件夹下的图片<br />\n for d in dirs:<br />\nprint((os.path.join(root, d)))<br />\nfor f in files:<br />\nfileid = f.split ('.')[0]  # 获得图片的名字，不含后缀<br />\n filepath = os.path.join (root, f)<br />\nprint(filepath)<br />\ntry:<br />\nsrc = cv2.imread (filepath, 1)  # 读取原始图片，数据会加载到内存中<br />\n print (&quot;src=&quot;, filepath, src.shape)<br />\n os.remove (filepath) # 移除原来的图片<br />\n cv2.imwrite (os.path.join (root, fileid + &quot;.jpg&quot;), src)  # 保存经过格式转换的图片<br />\n except:<br />\nos.remove(filepath)<br />\ncontinue<br />\n​<br />\npath = &quot;./Emotion_Recognition_File/img_type_test/&quot;  # 输入图片路径即可，可以在这个文件夹下放置各种后缀名的图片，代码会将所有图片统一成 jpg 格式<br />\n listfiles (path)<br />\n./Emotion_Recognition_File/img_type_test/000012.jpg<br />\nsrc= ./Emotion_Recognition_File/img_type_test/000012.jpg (218, 178, 3)<br />\n./Emotion_Recognition_File/img_type_test/000039.jpg<br />\nsrc= ./Emotion_Recognition_File/img_type_test/000039.jpg (218, 178, 3)<br />\n./Emotion_Recognition_File/img_type_test/000063.jpg<br />\nsrc= ./Emotion_Recognition_File/img_type_test/000063.jpg (218, 178, 3)<br />\n./Emotion_Recognition_File/img_type_test/000104.jpg<br />\nsrc= ./Emotion_Recognition_File/img_type_test/000104.jpg (218, 178, 3)<br />\n./Emotion_Recognition_File/img_type_test/000112.jpg<br />\nsrc= ./Emotion_Recognition_File/img_type_test/000112.jpg (218, 178, 3)<br />\n 统⼀格式为 jpg 之后预览如下：</p>\n<p>图片无法加载时显示的文字<br />\n 3.2 数据清洗<br />\n利⽤搜索引擎爬取得到的图⽚肯定有不符合要求的，数据清洗主要是删除不合适的图⽚，即⾮⼈脸的照⽚。</p>\n<p>图片无法加载时显示的文字<br />\n可以采⽤⾁眼观察的⽅式，也可以利⽤程序进⾏筛选，我们调⽤ OpenCV 的⼈脸检测算法进⾏筛选，代码如下：</p>\n<h1 id=\"codingutf8\"><a class=\"anchor\" href=\"#codingutf8\">#</a> coding:utf8</h1>\n<p>import cv2<br />\nimport dlib<br />\nimport numpy as np<br />\nimport sys<br />\nimport os<br />\nimport matplotlib.pyplot as plt<br />\n​</p>\n<h1 id=\"人脸检测的接口这个是-opencv-中自带的\"><a class=\"anchor\" href=\"#人脸检测的接口这个是-opencv-中自带的\">#</a> 人脸检测的接口，这个是 OpenCV 中自带的</h1>\n<p>cascade_path = './Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml'<br />\ncascade = cv2.CascadeClassifier(cascade_path)<br />\n​<br />\nimg_path = &quot;./Emotion_Recognition_File/face_det_img/&quot; # 测试图片路径<br />\n images = os.listdir (img_path)<br />\nfor image in images:<br />\nim = cv2.imread (os.path.join (img_path, image), 1) # 读取图片<br />\n rects = cascade.detectMultiScale (im, 1.3, 5)  # 人脸检测函数<br />\n print (&quot;检测到人脸的数量&quot;, len (rects))<br />\n if len (rects) == 0:  # len (rects) 是检测人脸的数量，如果没有检测到人脸的话，会显示出图片，适合本地调试使用，在服务器上可能不会显示</p>\n<h1 id=\"cv2namedwindowresult-0\"><a class=\"anchor\" href=\"#cv2namedwindowresult-0\">#</a> cv2.namedWindow('Result', 0)</h1>\n<h1 id=\"cv2imshowresult-im\"><a class=\"anchor\" href=\"#cv2imshowresult-im\">#</a> cv2.imshow('Result', im)</h1>\n<h1 id=\"print没有检测到人脸\"><a class=\"anchor\" href=\"#print没有检测到人脸\">#</a> print (&quot;没有检测到人脸&quot;)</h1>\n<pre><code>    pass\nplt.imshow(im[:, :, ::-1])  # 显示\nplt.show()\n</code></pre>\n<h1 id=\"osremoveospathjoinimg_path-image\"><a class=\"anchor\" href=\"#osremoveospathjoinimg_path-image\">#</a> os.remove(os.path.join(img_path, image))</h1>\n<h1 id=\"k-cv2waitkey0\"><a class=\"anchor\" href=\"#k-cv2waitkey0\">#</a> k = cv2.waitKey(0)</h1>\n<h1 id=\"if-k-ordq-在英文状态下按下按键-q-会关闭显示窗口\"><a class=\"anchor\" href=\"#if-k-ordq-在英文状态下按下按键-q-会关闭显示窗口\">#</a> if k == ord ('q'): # 在英文状态下，按下按键 q 会关闭显示窗口</h1>\n<h1 id=\"break\"><a class=\"anchor\" href=\"#break\">#</a> break</h1>\n<h1 id=\"print\"><a class=\"anchor\" href=\"#print\">#</a> print()</h1>\n<h1 id=\"cv2destroyallwindows\"><a class=\"anchor\" href=\"#cv2destroyallwindows\">#</a> cv2.destroyAllWindows()</h1>\n<p>检测到人脸的数量 1</p>\n<p>检测到人脸的数量 1</p>\n<p>检测到人脸的数量 0</p>\n<p>如果上面的代码运行结果与下面类似，可以重新运行代码</p>\n<p>图片无法加载时显示的文字<br />\n这个⼈脸检测算法是传统算法，召回率不⾼，因此会有⼀些好样本被删除。经过处理后，可以看到都是⽐较好的样本了，后⾯提取⼈脸关键点也会简单很多。</p>\n<p>图片无法加载时显示的文字<br />\n如果利⽤⼈脸检测算法仍然⽆法清除⼲净样本，则需要⼿动筛选。当然如果你使⽤多个关键词或者使⽤不同的搜索引擎同样的关键词，或者从视频中提取图⽚，那么爬取回来的图⽚很可能有重复或者⾮常的相似，这样的数据集需要去重。</p>\n<p>3.3 提取嘴唇区域<br />\n接下来我们要将样本处理成我们真正训练所需要的图像，本任务只对嘴唇部分的表情进⾏识别，所以我们的目标就是获取人脸嘴唇区域的图像，然后进行分类。我们利⽤ Opencv+Dlib 算法提取嘴唇区域， Dlib 算法会得到⾯部的 68 个关键点，我们从中得到嘴唇区域，并适当扩⼤。</p>\n<p>人脸 68 点位置图如下：</p>\n<p>图片无法加载时显示的文字<br />\n下面的代码可以对图片进行人脸检测，检测到人脸后，会将嘴巴区域分割出来，形成数据集！</p>\n<p>读者可以尝试运行代码，便可以理解这样做的意义</p>\n<h1 id=\"codingutf8-2\"><a class=\"anchor\" href=\"#codingutf8-2\">#</a> coding:utf8</h1>\n<p>​<br />\nimport cv2<br />\nimport dlib<br />\nimport numpy as np<br />\nimport sys<br />\nimport os<br />\nimport matplotlib.pyplot as plt<br />\n​</p>\n<h1 id=\"配置-dlib-关键点检测路径\"><a class=\"anchor\" href=\"#配置-dlib-关键点检测路径\">#</a> 配置 Dlib 关键点检测路径</h1>\n<h1 id=\"文件可以从-httpdlibnetfiles-下载\"><a class=\"anchor\" href=\"#文件可以从-httpdlibnetfiles-下载\">#</a> 文件可以从 <span class=\"exturl\" data-url=\"aHR0cDovL2RsaWIubmV0L2ZpbGVzLw==\">http://dlib.net/files/</span> 下载</h1>\n<p>PREDICTOR_PATH = &quot;./Emotion_Recognition_File/face_detect_model/shape_predictor_68_face_landmarks.dat&quot;<br />\npredictor = dlib.shape_predictor(PREDICTOR_PATH)</p>\n<h1 id=\"配置人脸检测器路径\"><a class=\"anchor\" href=\"#配置人脸检测器路径\">#</a> 配置人脸检测器路径</h1>\n<p>cascade_path = './Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml'<br />\ncascade = cv2.CascadeClassifier(cascade_path)<br />\n​</p>\n<h1 id=\"调用-cascadedetectmultiscale-人脸检测器和-dlib-的关键点检测算法-predictor-获得关键点结果\"><a class=\"anchor\" href=\"#调用-cascadedetectmultiscale-人脸检测器和-dlib-的关键点检测算法-predictor-获得关键点结果\">#</a> 调用 cascade.detectMultiScale 人脸检测器和 Dlib 的关键点检测算法 predictor 获得关键点结果</h1>\n<p>def get_landmarks(im):<br />\nrects = cascade.detectMultiScale (im, 1.3, 5) # 人脸检测<br />\n x, y, w, h = rects [0]  # 获取人脸的四个属性值，左上角坐标 x,y 、高宽 w、h</p>\n<h1 id=\"printx-y-w-h\"><a class=\"anchor\" href=\"#printx-y-w-h\">#</a> print(x, y, w, h)</h1>\n<pre><code>rect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h)) \nreturn np.matrix([[p.x, p.y] for p in predictor(im, rect).parts()])\n</code></pre>\n<p>​<br />\n​<br />\ndef annotate_landmarks(im, landmarks):<br />\nim = im.copy()<br />\nfor idx, point in enumerate(landmarks):<br />\npos = (point[0, 0], point[0, 1])<br />\ncv2.putText(im,<br />\nstr(idx),<br />\npos,<br />\nfontFace=cv2.FONT_HERSHEY_SCRIPT_SIMPLEX,<br />\nfontScale=0.4,<br />\ncolor=(0, 0, 255))<br />\ncv2.circle(im, pos, 5, color=(0, 255, 255))<br />\nreturn im<br />\n​<br />\n​<br />\ndef getlipfromimage(im, landmarks):<br />\nxmin = 10000<br />\nxmax = 0<br />\nymin = 10000<br />\nymax = 0<br />\n# 根据最外围的关键点获取包围嘴唇的最小矩形框<br />\n# 68 个关键点是从<br />\n# 左耳朵 0 - 下巴 - 右耳朵 16 - 左眉毛（17-21）- 右眉毛（22-26）- 左眼睛（36-41）<br />\n# 右眼睛（42-47）- 鼻子从上到下（27-30）- 鼻孔（31-35）<br />\n# 嘴巴外轮廓（48-59）嘴巴内轮廓（60-67）<br />\nfor i in range(48, 67):<br />\nx = landmarks[i, 0]<br />\ny = landmarks[i, 1]<br />\nif x &lt; xmin:<br />\nxmin = x<br />\nif x &gt; xmax:<br />\nxmax = x<br />\nif y &lt; ymin:<br />\nymin = y<br />\nif y &gt; ymax:<br />\nymax = y<br />\n​<br />\nprint(&quot;xmin=&quot;, xmin)<br />\nprint(&quot;xmax=&quot;, xmax)<br />\nprint(&quot;ymin=&quot;, ymin)<br />\nprint(&quot;ymax=&quot;, ymax)<br />\n​<br />\nroiwidth = xmax - xmin<br />\nroiheight = ymax - ymin<br />\n​<br />\nroi = im[ymin:ymax, xmin:xmax, 0:3]<br />\n​<br />\nif roiwidth &gt; roiheight:<br />\ndstlen = 1.5 * roiwidth<br />\nelse:<br />\ndstlen = 1.5 * roiheight<br />\n​<br />\ndiff_xlen = dstlen - roiwidth<br />\ndiff_ylen = dstlen - roiheight<br />\n​<br />\nnewx = xmin<br />\nnewy = ymin<br />\n​<br />\nimagerows, imagecols, channel = im.shape<br />\nif newx &gt;= diff_xlen / 2 and newx + roiwidth + diff_xlen / 2 &lt; imagecols:<br />\nnewx = newx - diff_xlen / 2<br />\nelif newx &lt; diff_xlen / 2:<br />\nnewx = 0<br />\nelse:<br />\nnewx = imagecols - dstlen<br />\n​<br />\nif newy &gt;= diff_ylen / 2 and newy + roiheight + diff_ylen / 2 &lt; imagerows:<br />\nnewy = newy - diff_ylen / 2<br />\nelif newy &lt; diff_ylen / 2:<br />\nnewy = 0<br />\nelse:<br />\nnewy = imagerows - dstlen<br />\n​<br />\nroi = im[int(newy):int(newy + dstlen), int(newx):int(newx + dstlen), 0:3]<br />\nreturn roi<br />\n​<br />\n​<br />\ndef listfiles(rootDir):<br />\nlist_dirs = os.walk(rootDir)<br />\nfor root, dirs, files in list_dirs:<br />\nfor d in dirs:<br />\nprint(os.path.join(root, d))<br />\nfor f in files:<br />\nfileid = f.split('.')[0]<br />\n​<br />\nfilepath = os.path.join(root, f)<br />\ntry:<br />\nim = cv2.imread(filepath, 1)<br />\nlandmarks = get_landmarks(im)<br />\nroi = getlipfromimage(im, landmarks)<br />\nroipath = filepath.replace('.jpg', '_mouth.png')</p>\n<h1 id=\"cv2imwriteroipath-roi\"><a class=\"anchor\" href=\"#cv2imwriteroipath-roi\">#</a> cv2.imwrite(roipath, roi)</h1>\n<pre><code>            plt.imshow(roi[:, :, ::-1])\n            plt.show()\n        except:\n</code></pre>\n<h1 id=\"printerror\"><a class=\"anchor\" href=\"#printerror\">#</a> print(&quot;error&quot;)</h1>\n<pre><code>            continue\n</code></pre>\n<p>​<br />\n​<br />\nlistfiles(&quot;./Emotion_Recognition_File/mouth_det_img/&quot;)<br />\nxmin= 65<br />\nxmax= 114<br />\nymin= 150<br />\nymax= 168</p>\n<p>xmin= 67<br />\nxmax= 111<br />\nymin= 151<br />\nymax= 169</p>\n<p>xmin= 73<br />\nxmax= 105<br />\nymin= 149<br />\nymax= 161</p>\n<p>xmin= 513<br />\nxmax= 652<br />\nymin= 406<br />\nymax= 515</p>\n<p>xmin= 211<br />\nxmax= 259<br />\nymin= 287<br />\nymax= 322</p>\n<p>运行上面的代码会显示嘴巴区域图，如果看不到，重新运行一下即可</p>\n<p>（xmin，ymin） （xmax，ymax） 分别代表嘴唇区域在原始图像的位置，即左上角坐标和右下角坐标</p>\n<p>结果如下，⾃此就完成了⾃建数据集操作</p>\n<p>图片无法加载时显示的文字<br />\n每种表情放置在各自的文件夹下并命名</p>\n<p>图片无法加载时显示的文字<br />\n上面就是本训练营『数据获取与整理』部分的内容，有了数据，接下来的任务就可以训练我们的表情分类模型吧。</p>\n<p>加油！这也许是你的第一个深度学习模型了。</p>\n<p>-- By：有三 AI 团队</p>\n<p>聚焦于让大家能够系统性地完成 AI 各个领域所需的专业知识的学习，实现三人行必有 AI，三人行必有我师的愿景。</p>\n<p>​</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/29/python-3-day/",
            "url": "https://theprofessor249.github.io/2021/01/29/python-3-day/",
            "title": "python_3_day",
            "date_published": "2021-01-29T13:38:29.000Z",
            "content_html": "<p>Python 入门 (下)<br />\n 简介</p>\n<p>函数</p>\n<ol>\n<li>函数的定义</li>\n<li>函数的调用</li>\n<li>函数文档</li>\n<li>函数参数</li>\n<li>函数的返回值</li>\n<li>变量作用域</li>\n</ol>\n<p>Lambda - 表达式</p>\n<ol>\n<li>匿名函数的定义</li>\n<li>匿名函数的应用</li>\n</ol>\n<p>类与对象</p>\n<ol>\n<li>属性和方法组成对象</li>\n<li>self 是什么？</li>\n<li>Python 的魔法方法</li>\n<li>公有和私有</li>\n<li>继承</li>\n<li>组合</li>\n<li>类、类对象和实例对象</li>\n<li>什么是绑定？</li>\n<li>一些相关的内置函数（BIF）</li>\n</ol>\n<p>魔法方法</p>\n<ol>\n<li>基本的魔法方法</li>\n<li>算术运算符</li>\n<li>反算术运算符</li>\n<li>增量赋值运算</li>\n<li>一元运算符</li>\n<li>属性访问</li>\n<li>描述符</li>\n<li>定制序列</li>\n<li>迭代器</li>\n</ol>\n<p>简介<br />\n Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>\n<p>本实验包括以下内容：</p>\n<p>函数<br />\n函数的定义<br />\n函数的调用<br />\n函数文档<br />\n函数参数<br />\n函数的返回值<br />\n变量作用域<br />\n Lambda 表达式<br />\n匿名函数的定义<br />\n匿名函数的应用<br />\n类与对象<br />\n对象 = 属性 + 方法<br />\n self 是什么？<br />\nPython 的魔法方法<br />\n公有和私有<br />\n继承<br />\n组合<br />\n类、类对象和实例对象<br />\n什么是绑定？<br />\n一些相关的内置函数（BIF）<br />\n魔法方法<br />\n基本的魔法方法<br />\n算术运算符<br />\n反算术运算符<br />\n增量赋值运算符<br />\n一元运算符<br />\n属性访问<br />\n描述符<br />\n定制序列<br />\n迭代器<br />\n函数<br />\n函数的定义<br />\n还记得 Python 里面 “万物皆对象” 么？Python 把函数也当成对象，可以从另一个函数中返回出来而去构建高阶函数，比如： 参数是函数、返回值是函数。</p>\n<p>我们首先来介绍函数的定义。</p>\n<p>函数以 def 关键词开头，后接函数名和圆括号 ()。<br />\n函数执行的代码以冒号起始，并且缩进。<br />\nreturn [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的 return 相当于返回 None。<br />\ndef functionname (parameters):<br />\n&quot;函数_文档字符串&quot;<br />\nfunction_suite<br />\nreturn [expression]</p>\n<p>函数的调用<br />\n【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">printme</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>printme<span class=\"token punctuation\">(</span><span class=\"token string\">\"我要调用用户自定义函数!\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 我要调用用户自定义函数！</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>printme<span class=\"token punctuation\">(</span><span class=\"token string\">\"再次调用同一函数\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 再次调用同一函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>temp <span class=\"token operator\">=</span> printme<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># hello</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># None</span></pre></td></tr></table></figure><p>我要调用用户自定义函数！<br />\n 再次调用同一函数<br />\n hello<br />\nNone<br />\n 函数文档<br />\n def MyFirstFunction (name):<br />\n&quot;函数定义过程中 name 是形参&quot;<br />\n# 因为 Ta 只是一个形式，表示占据一个参数位置<br />\n print (' 传递进来的 {0} 叫做实参，因为 Ta 是具体的参数值！'.format (name))<br />\n​<br />\n​<br />\nMyFirstFunction (' 老马的程序人生 ')</p>\n<h1 id=\"传递进来的老马的程序人生叫做实参因为ta是具体的参数值\"><a class=\"anchor\" href=\"#传递进来的老马的程序人生叫做实参因为ta是具体的参数值\">#</a> 传递进来的老马的程序人生叫做实参，因为 Ta 是具体的参数值！</h1>\n<p>​<br />\nprint(MyFirstFunction.<strong>doc</strong>)</p>\n<h1 id=\"函数定义过程中name是形参\"><a class=\"anchor\" href=\"#函数定义过程中name是形参\">#</a> 函数定义过程中 name 是形参</h1>\n<p>​<br />\nhelp(MyFirstFunction)</p>\n<h1 id=\"help-on-function-myfirstfunction-in-module-main\"><a class=\"anchor\" href=\"#help-on-function-myfirstfunction-in-module-main\">#</a> Help on function MyFirstFunction in module <strong>main</strong>:</h1>\n<h1 id=\"myfirstfunctionname\"><a class=\"anchor\" href=\"#myfirstfunctionname\">#</a> MyFirstFunction(name)</h1>\n<h1 id=\"函数定义过程中name是形参-2\"><a class=\"anchor\" href=\"#函数定义过程中name是形参-2\">#</a> 函数定义过程中 name 是形参</h1>\n<p>传递进来的老马的程序人生叫做实参，因为 Ta 是具体的参数值！<br />\n函数定义过程中 name 是形参<br />\n Help on function MyFirstFunction in module <strong>main</strong>:</p>\n<p>MyFirstFunction(name)<br />\n 函数定义过程中 name 是形参</p>\n<p>函数参数<br />\n Python 的函数具有非常灵活多样的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。从简到繁的参数形态如下：</p>\n<p>位置参数 (positional argument)<br />\n 默认参数 (default argument)<br />\n 可变参数 (variable argument)<br />\n 关键字参数 (keyword argument)<br />\n 命名关键字参数 (name keyword argument)<br />\n 参数组合</p>\n<ol>\n<li>位置参数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token string\">\"函数_文档字符串\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       function_suite</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>arg1 - 位置参数 ，这些参数在调用函数 (call function) 时位置要固定。<br />\n2. 默认参数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">=</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token string\">\"函数_文档字符串\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       function_suite</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>expression<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>arg2 = v - 默认参数 = 默认值，调用函数时，默认参数的值如果没有传入，则被认为是默认值。<br />\n默认参数一定要放在位置参数 后面，不然程序会报错。<br />\n【例子】</p>\n<p>def printinfo(name, age=8):<br />\nprint('Name:{0},Age:{1}'.format(name, age))<br />\n​<br />\n​<br />\nprintinfo (' 小马 ')  # Name: 小马，Age:8<br />\nprintinfo (' 小马 ', 10)  # Name: 小马，Age:10<br />\nName: 小马，Age:8<br />\nName: 小马，Age:10<br />\nPython 允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br />\n【例子】</p>\n<p>def printinfo(name, age):<br />\nprint('Name:{0},Age:{1}'.format(name, age))<br />\n​<br />\n​<br />\nprintinfo (age=8, name=' 小马 ')  # Name: 小马，Age:8<br />\nName: 小马，Age:8<br />\n3. 可变参数</p>\n<p>顾名思义，可变参数就是传入的参数个数是可变的，可以是 0, 1, 2 到任意个，是不定长的参数。</p>\n<p>def functionname(arg1, arg2=v, *args):<br />\n&quot;函数_文档字符串&quot;<br />\nfunction_suite<br />\nreturn [expression]</p>\n<p><em>args - 可变参数，可以是从零个到任意个，自动组装成元组。<br />\n加了星号（</em>）的变量名会存放所有未命名的变量参数。<br />\n【例子】</p>\n<p>def printinfo(arg1, *args):<br />\nprint(arg1)<br />\nfor var in args:<br />\nprint(var)<br />\n​<br />\n​<br />\nprintinfo(10)  # 10<br />\nprintinfo(70, 60, 50)</p>\n<h1 id=\"70\"><a class=\"anchor\" href=\"#70\">#</a> 70</h1>\n<h1 id=\"60\"><a class=\"anchor\" href=\"#60\">#</a> 60</h1>\n<h1 id=\"50\"><a class=\"anchor\" href=\"#50\">#</a> 50</h1>\n<p>10<br />\n70<br />\n60<br />\n50<br />\n4. 关键字参数</p>\n<p>def functionname(arg1, arg2=v, args, *kw):<br />\n&quot;函数_文档字符串&quot;<br />\nfunction_suite<br />\nreturn [expression]</p>\n<p>**kw - 关键字参数，可以是从零个到任意个，自动组装成字典。<br />\n【例子】</p>\n<p>def printinfo(arg1, *args, **kwargs):<br />\nprint(arg1)<br />\nprint(args)<br />\nprint(kwargs)<br />\n​<br />\n​<br />\nprintinfo(70, 60, 50)</p>\n<h1 id=\"70-2\"><a class=\"anchor\" href=\"#70-2\">#</a> 70</h1>\n<h1 id=\"60-50\"><a class=\"anchor\" href=\"#60-50\">#</a> (60, 50)</h1>\n<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> {}</h1>\n<p>printinfo(70, 60, 50, a=1, b=2)</p>\n<h1 id=\"70-3\"><a class=\"anchor\" href=\"#70-3\">#</a> 70</h1>\n<h1 id=\"60-50-2\"><a class=\"anchor\" href=\"#60-50-2\">#</a> (60, 50)</h1>\n<h1 a:=\"\" 1,=\"\" b:=\"\" 2=\"\" id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h1>\n<p>70<br />\n(60, 50)<br />\n{}<br />\n70<br />\n(60, 50)<br />\n{'a': 1, 'b': 2}<br />\n「可变参数」和「关键字参数」的同异总结如下：</p>\n<p>可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。<br />\n关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)。<br />\n5. 命名关键字参数</p>\n<p>def functionname(arg1, arg2=v, args, *, nkw, *kw):<br />\n&quot;函数_文档字符串&quot;<br />\nfunction_suite<br />\nreturn [expression]</p>\n<p>*, nkw - 命名关键字参数，用户想要输入的关键字参数，定义方式是在 nkw 前面加个分隔符 *。<br />\n如果要限制关键字参数的名字，就可以用「命名关键字参数」<br />\n使用命名关键字参数时，要特别注意不能缺少参数名。<br />\n【例子】</p>\n<p>def printinfo(arg1, *, nkw, **kwargs):<br />\nprint(arg1)<br />\nprint(nkw)<br />\nprint(kwargs)<br />\n​<br />\n​<br />\nprintinfo(70, nkw=10, a=1, b=2)</p>\n<h1 id=\"70-4\"><a class=\"anchor\" href=\"#70-4\">#</a> 70</h1>\n<h1 id=\"10\"><a class=\"anchor\" href=\"#10\">#</a> 10</h1>\n<h1 a:=\"\" 1,=\"\" b:=\"\" 2=\"\" id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> </h1>\n<p>​<br />\nprintinfo(70, 10, a=1, b=2)</p>\n<h1 id=\"typeerror-printinfo-takes-1-positional-argument-but-2-were-given\"><a class=\"anchor\" href=\"#typeerror-printinfo-takes-1-positional-argument-but-2-were-given\">#</a> TypeError: printinfo() takes 1 positional argument but 2 were given</h1>\n<p>70<br />\n10<br />\n{'a': 1, 'b': 2}<br />\n 没有写参数名 nwk，因此 10 被当成「位置参数」，而原函数只有 1 个位置函数，现在调用了 2 个，因此程序会报错。<br />\n6. 参数组合</p>\n<p>在 Python 中定义函数，可以用位置参数、默认参数、可变参数、命名关键字参数和关键字参数，这 5 种参数中的 4 个都可以一起使用，但是注意，参数定义的顺序必须是：</p>\n<p>位置参数、默认参数、可变参数和关键字参数。<br />\n位置参数、默认参数、命名关键字参数和关键字参数。<br />\n要注意定义可变参数和关键字参数的语法：</p>\n<p>*args 是可变参数，args 接收的是一个 tuple<br />\n**kw 是关键字参数，kw 接收的是一个 dict<br />\n 命名关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。定义命名关键字参数不要忘了写分隔符 *，否则定义的是位置参数。</p>\n<p>警告：虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数很难懂。</p>\n<p>函数的返回值<br />\n【例子】</p>\n<p>def add(a, b):<br />\nreturn a + b<br />\n​<br />\n​<br />\nprint(add(1, 2))  # 3<br />\nprint(add([1, 2, 3], [4, 5, 6]))  # [1, 2, 3, 4, 5, 6]<br />\n3<br />\n[1, 2, 3, 4, 5, 6]<br />\n【例子】</p>\n<p>def back():<br />\nreturn [1, ' 小马的程序人生 ', 3.14]<br />\n​<br />\n​<br />\nprint (back ())  # [1, ' 小马的程序人生 ', 3.14]<br />\n[1, ' 小马的程序人生 ', 3.14]<br />\n【例子】</p>\n<p>def back():<br />\nreturn 1, ' 小马的程序人生 ', 3.14<br />\n​<br />\n​<br />\nprint (back ())  # (1, ' 小马的程序人生 ', 3.14)<br />\n(1, ' 小马的程序人生 ', 3.14)<br />\n【例子】</p>\n<p>def printme(str):<br />\nprint(str)<br />\n​<br />\ntemp = printme('hello') # hello<br />\nprint(temp) # None<br />\nprint(type(temp))  # &lt;class 'NoneType'&gt;<br />\nhello<br />\nNone<br />\n&lt;class 'NoneType'&gt;<br />\n 变量作用域<br />\n Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。<br />\n定义在函数内部的变量拥有局部作用域，该变量称为局部变量。<br />\n定义在函数外部的变量拥有全局作用域，该变量称为全局变量。<br />\n局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。<br />\n【例子】</p>\n<p>def discounts(price, rate):<br />\nfinal_price = price * rate<br />\nreturn final_price<br />\n​<br />\n​<br />\nold_price = float (input (' 请输入原价:'))  # 98<br />\nrate = float (input (' 请输入折扣率:'))  # 0.9<br />\nnew_price = discounts(old_price, rate)<br />\n print (' 打折后价格是:%.2f' % new_price)  # 88.20<br />\n 请输入原价：98<br />\n 请输入折扣率：0.9<br />\n 打折后价格是：88.20<br />\n 当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。<br />\n【例子】</p>\n<p>num = 1<br />\n​<br />\n​<br />\ndef fun1():<br />\nglobal num  # 需要使用 global 关键字声明<br />\n print (num)  # 1<br />\nnum = 123<br />\nprint(num)  # 123<br />\n​<br />\n​<br />\nfun1()<br />\nprint(num)  # 123<br />\n1<br />\n123<br />\n123<br />\n 内嵌函数</p>\n<p>【例子】</p>\n<p>def outer():<br />\nprint ('outer 函数在这被调用 ')<br />\n​<br />\ndef inner():<br />\nprint ('inner 函数在这被调用 ')<br />\n​<br />\ninner ()  # 该函数只能在 outer 函数内部被调用<br />\n​<br />\n​<br />\nouter()</p>\n<h1 id=\"outer函数在这被调用\"><a class=\"anchor\" href=\"#outer函数在这被调用\">#</a> outer 函数在这被调用</h1>\n<h1 id=\"inner函数在这被调用\"><a class=\"anchor\" href=\"#inner函数在这被调用\">#</a> inner 函数在这被调用</h1>\n<p>outer 函数在这被调用<br />\n inner 函数在这被调用<br />\n闭包</p>\n<p>是函数式编程的一个重要的语法结构，是一种特殊的内嵌函数。<br />\n如果在一个内部函数里对外层非全局作用域的变量进行引用，那么内部函数就被认为是闭包。<br />\n通过闭包可以访问外层非全局作用域的变量，这个作用域称为 闭包作用域。<br />\n【例子】</p>\n<p>def funX(x):<br />\ndef funY(y):<br />\nreturn x * y<br />\n​<br />\nreturn funY<br />\n​<br />\n​<br />\ni = funX(8)<br />\nprint(type(i))  # &lt;class 'function'&gt;<br />\nprint(i(5))  # 40<br />\n&lt;class 'function'&gt;<br />\n40<br />\n【例子】闭包的返回值通常是函数。</p>\n<p>def make_counter(init):<br />\ncounter = [init]<br />\n​<br />\ndef inc(): counter[0] += 1<br />\n​<br />\ndef dec(): counter[0] -= 1<br />\n​<br />\ndef get(): return counter[0]<br />\n​<br />\ndef reset(): counter[0] = init<br />\n​<br />\nreturn inc, dec, get, reset<br />\n​<br />\n​<br />\ninc, dec, get, reset = make_counter(0)<br />\ninc()<br />\ninc()<br />\ninc()<br />\nprint(get())  # 3<br />\ndec()<br />\nprint(get())  # 2<br />\nreset()<br />\nprint(get())  # 0<br />\n3<br />\n2<br />\n0<br />\n【例子】 如果要修改闭包作用域中的变量则需要 nonlocal 关键字</p>\n<p>def outer():<br />\nnum = 10<br />\n​<br />\ndef inner():<br />\nnonlocal num  # nonlocal 关键字声明<br />\n num = 100<br />\nprint(num)<br />\n​<br />\ninner()<br />\nprint(num)<br />\n​<br />\n​<br />\nouter()<br />\n​</p>\n<h1 id=\"100\"><a class=\"anchor\" href=\"#100\">#</a> 100</h1>\n<h1 id=\"100-2\"><a class=\"anchor\" href=\"#100-2\">#</a> 100</h1>\n<p>100<br />\n100<br />\n 递归</p>\n<p>如果一个函数在内部调用自身本身，这个函数就是递归函数。<br />\n【例子】n! = 1 x 2 x 3 x ... x n</p>\n<h1 id=\"利用循环\"><a class=\"anchor\" href=\"#利用循环\">#</a> 利用循环</h1>\n<p>n = 5<br />\nfor k in range(1, 5):<br />\nn = n * k<br />\nprint(n)  # 120<br />\n​</p>\n<h1 id=\"利用递归\"><a class=\"anchor\" href=\"#利用递归\">#</a> 利用递归</h1>\n<p>def factorial(n):<br />\nif n == 1:<br />\nreturn 1<br />\nreturn n * factorial(n - 1)<br />\n​<br />\n​<br />\nprint(factorial(5)) # 120<br />\n120<br />\n120<br />\n【例子】斐波那契数列 f (n)=f (n-1)+f (n-2), f (0)=0 f (1)=1</p>\n<h1 id=\"利用循环-2\"><a class=\"anchor\" href=\"#利用循环-2\">#</a> 利用循环</h1>\n<p>i = 0<br />\nj = 1<br />\nlst = list([i, j])<br />\nfor k in range(2, 11):<br />\nk = i + j<br />\nlst.append(k)<br />\ni = j<br />\nj = k<br />\nprint(lst)</p>\n<h1 id=\"0-1-1-2-3-5-8-13-21-34-55\"><a class=\"anchor\" href=\"#0-1-1-2-3-5-8-13-21-34-55\">#</a> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</h1>\n<p>​</p>\n<h1 id=\"利用递归-2\"><a class=\"anchor\" href=\"#利用递归-2\">#</a> 利用递归</h1>\n<p>def recur_fibo(n):<br />\nif n &lt;= 1:<br />\nreturn n<br />\nreturn recur_fibo(n - 1) + recur_fibo(n - 2)<br />\n​<br />\n​<br />\nlst = list()<br />\nfor k in range(11):<br />\nlst.append(recur_fibo(k))<br />\nprint(lst)</p>\n<h1 id=\"0-1-1-2-3-5-8-13-21-34-55-2\"><a class=\"anchor\" href=\"#0-1-1-2-3-5-8-13-21-34-55-2\">#</a> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</h1>\n<p>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]<br />\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]<br />\n【例子】设置递归的层数，Python 默认递归层数为 100</p>\n<p>import sys<br />\n​<br />\nsys.setrecursionlimit(1000)<br />\n Lambda 表达式<br />\n匿名函数的定义<br />\n在 Python 里有两类函数：</p>\n<p>第一类：用 def 关键词定义的正规函数<br />\n第二类：用 lambda 关键词定义的匿名函数<br />\n Python 使用 lambda 关键词来创建匿名函数，而非 def 关键词，它没有函数名，其语法结构如下：</p>\n<p>lambda argument_list: expression</p>\n<p>lambda - 定义匿名函数的关键词。<br />\nargument_list - 函数参数，它们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样。<br />\n:- 冒号，在函数参数和表达式中间要加个冒号。<br />\nexpression - 只是一个表达式，输入函数参数，输出一些值。<br />\n注意：</p>\n<p>expression 中没有 return 语句，因为 lambda 不需要它来返回，表达式本身结果就是返回值。<br />\n匿名函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。<br />\n【例子】</p>\n<p>def sqr(x):<br />\nreturn x ** 2<br />\n​<br />\n​<br />\nprint(sqr)</p>\n<h1 id=\"function-sqr-at-0x000000babd3a4400\"><a class=\"anchor\" href=\"#function-sqr-at-0x000000babd3a4400\">#</a> &lt;function sqr at 0x000000BABD3A4400&gt;</h1>\n<p>​<br />\ny = [sqr(x) for x in range(10)]<br />\nprint(y)</p>\n<h1 id=\"0-1-4-9-16-25-36-49-64-81\"><a class=\"anchor\" href=\"#0-1-4-9-16-25-36-49-64-81\">#</a> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</h1>\n<p>​<br />\nlbd_sqr = lambda x: x ** 2<br />\nprint(lbd_sqr)</p>\n<h1 id=\"function-lambda-at-0x000000babb6ac1e0\"><a class=\"anchor\" href=\"#function-lambda-at-0x000000babb6ac1e0\">#</a> &lt;function &lt;lambda&gt; at 0x000000BABB6AC1E0&gt;</h1>\n<p>​<br />\ny = [lbd_sqr(x) for x in range(10)]<br />\nprint(y)</p>\n<h1 id=\"0-1-4-9-16-25-36-49-64-81-2\"><a class=\"anchor\" href=\"#0-1-4-9-16-25-36-49-64-81-2\">#</a> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</h1>\n<p>​<br />\n​<br />\nsumary = lambda arg1, arg2: arg1 + arg2<br />\nprint(sumary(10, 20))  # 30<br />\n​<br />\nfunc = lambda *args: sum(args)<br />\nprint(func(1, 2, 3, 4, 5))  # 15<br />\n&lt;function sqr at 0x00000220081D9E18&gt;<br />\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br />\n&lt;function &lt;lambda&gt; at 0x00000220081FF400&gt;<br />\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br />\n30<br />\n15<br />\n 匿名函数的应用<br />\n函数式编程 是指代码中每一块都是不可变的，都由纯函数的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用。</p>\n<p>【例子】非函数式编程</p>\n<p>def f(x):<br />\nfor i in range(0, len(x)):<br />\nx[i] += 10<br />\nreturn x<br />\n​<br />\n​<br />\nx = [1, 2, 3]<br />\nf(x)<br />\nprint(x)</p>\n<h1 id=\"11-12-13\"><a class=\"anchor\" href=\"#11-12-13\">#</a> [11, 12, 13]</h1>\n<p>[11, 12, 13]<br />\n【例子】函数式编程</p>\n<p>def f(x):<br />\ny = []<br />\nfor item in x:<br />\ny.append(item + 10)<br />\nreturn y<br />\n​<br />\n​<br />\nx = [1, 2, 3]<br />\nf(x)<br />\nprint(x)</p>\n<h1 id=\"1-2-3\"><a class=\"anchor\" href=\"#1-2-3\">#</a> [1, 2, 3]</h1>\n<p>[1, 2, 3]<br />\n 匿名函数 常常应用于函数式编程的高阶函数 (high-order function) 中，主要有两种形式：</p>\n<p>参数是函数 (filter, map)<br />\n 返回值是函数 (closure)<br />\n 如，在 filter 和 map 函数中的应用：</p>\n<p>filter (function, iterable) 过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list () 来转换。<br />\n【例子】</p>\n<p>odd = lambda x: x % 2 == 1<br />\ntemplist = filter(odd, [1, 2, 3, 4, 5, 6, 7, 8, 9])<br />\nprint(list(templist))  # [1, 3, 5, 7, 9]<br />\n[1, 3, 5, 7, 9]<br />\n map (function, *iterables) 根据提供的函数对指定序列做映射。<br />\n【例子】</p>\n<p>m1 = map(lambda x: x ** 2, [1, 2, 3, 4, 5])<br />\nprint(list(m1))</p>\n<h1 id=\"1-4-9-16-25\"><a class=\"anchor\" href=\"#1-4-9-16-25\">#</a> [1, 4, 9, 16, 25]</h1>\n<p>​<br />\nm2 = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])<br />\nprint(list(m2))</p>\n<h1 id=\"3-7-11-15-19\"><a class=\"anchor\" href=\"#3-7-11-15-19\">#</a> [3, 7, 11, 15, 19]</h1>\n<p>[1, 4, 9, 16, 25]<br />\n[3, 7, 11, 15, 19]<br />\n 除了 Python 这些内置函数，我们也可以自己定义高阶函数。</p>\n<p>【例子】</p>\n<p>def apply_to_list(fun, some_list):<br />\nreturn fun(some_list)<br />\n​<br />\nlst = [1, 2, 3, 4, 5]<br />\nprint(apply_to_list(sum, lst))</p>\n<h1 id=\"15\"><a class=\"anchor\" href=\"#15\">#</a> 15</h1>\n<p>​<br />\nprint(apply_to_list(len, lst))</p>\n<h1 id=\"5\"><a class=\"anchor\" href=\"#5\">#</a> 5</h1>\n<p>​<br />\nprint(apply_to_list(lambda x: sum(x) / len(x), lst))</p>\n<h1 id=\"30\"><a class=\"anchor\" href=\"#30\">#</a> 3.0</h1>\n<p>15<br />\n5<br />\n3.0<br />\n 类与对象<br />\n对象 = 属性 + 方法<br />\n对象是类的实例。换句话说，类主要定义对象的结构，然后我们以类为模板创建对象。类不但包含方法定义，而且还包含所有实例共享的数据。</p>\n<p>封装：信息隐蔽技术<br />\n我们可以使用关键字 class 定义 Python 类，关键字后面紧跟类的名称、分号和类的实现。</p>\n<p>【例子】</p>\n<p>class Turtle:  # Python 中的类名约定以大写字母开头<br />\n &quot;&quot;&quot;关于类的一个简单例子&quot;&quot;&quot;<br />\n# 属性<br />\n color = 'green'<br />\nweight = 10<br />\nlegs = 4<br />\nshell = True<br />\nmouth = ' 大嘴'<br />\n​<br />\n# 方法<br />\n def climb (self):<br />\nprint (' 我正在很努力的向前爬...')<br />\n​<br />\ndef run(self):<br />\nprint (' 我正在飞快的向前跑...')<br />\n​<br />\ndef bite(self):<br />\nprint (' 咬死你咬死你！！')<br />\n​<br />\ndef eat(self):<br />\nprint (' 有得吃，真满足...')<br />\n​<br />\ndef sleep(self):<br />\nprint (' 困了，睡了，晚安，zzz')<br />\n​<br />\n​<br />\ntt = Turtle()<br />\nprint(tt)</p>\n<h1 id=\"mainturtle-object-at-0x0000007c32d67f98\"><a class=\"anchor\" href=\"#mainturtle-object-at-0x0000007c32d67f98\">#</a> &lt;<strong>main</strong>.Turtle object at 0x0000007C32D67F98&gt;</h1>\n<p>​<br />\nprint(type(tt))</p>\n<h1 id=\"class-mainturtle\"><a class=\"anchor\" href=\"#class-mainturtle\">#</a> &lt;class '<strong>main</strong>.Turtle'&gt;</h1>\n<p>​<br />\nprint(tt.<strong>class</strong>)</p>\n<h1 id=\"class-mainturtle-2\"><a class=\"anchor\" href=\"#class-mainturtle-2\">#</a> &lt;class '<strong>main</strong>.Turtle'&gt;</h1>\n<p>​<br />\nprint(tt.<strong>class</strong>.<strong>name</strong>)</p>\n<h1 id=\"turtle\"><a class=\"anchor\" href=\"#turtle\">#</a> Turtle</h1>\n<p>​<br />\ntt.climb()</p>\n<h1 id=\"我正在很努力的向前爬\"><a class=\"anchor\" href=\"#我正在很努力的向前爬\">#</a> 我正在很努力的向前爬...</h1>\n<p>​<br />\ntt.run()</p>\n<h1 id=\"我正在飞快的向前跑\"><a class=\"anchor\" href=\"#我正在飞快的向前跑\">#</a> 我正在飞快的向前跑...</h1>\n<p>​<br />\ntt.bite()</p>\n<h1 id=\"咬死你咬死你\"><a class=\"anchor\" href=\"#咬死你咬死你\">#</a> 咬死你咬死你！！</h1>\n<p>​</p>\n<h1 id=\"python类也是对象-它们是type的实例\"><a class=\"anchor\" href=\"#python类也是对象-它们是type的实例\">#</a> Python 类也是对象。它们是 type 的实例</h1>\n<p>print(type(Turtle))</p>\n<h1 id=\"class-type\"><a class=\"anchor\" href=\"#class-type\">#</a> &lt;class 'type'&gt;</h1>\n<p>&lt;<strong>main</strong>.Turtle object at 0x000002200820E898&gt;<br />\n&lt;class '<strong>main</strong>.Turtle'&gt;<br />\n&lt;class '<strong>main</strong>.Turtle'&gt;<br />\nTurtle<br />\n 我正在很努力的向前爬...<br />\n 我正在飞快的向前跑...<br />\n 咬死你咬死你！！<br />\n&lt;class 'type'&gt;<br />\n 继承：子类自动共享父类之间数据和方法的机制<br />\n【例子】</p>\n<p>class MyList(list):<br />\npass<br />\n​<br />\n​<br />\nlst = MyList([1, 5, 2, 7, 8])<br />\nlst.append(9)<br />\nlst.sort()<br />\nprint(lst)<br />\n​</p>\n<h1 id=\"1-2-5-7-8-9\"><a class=\"anchor\" href=\"#1-2-5-7-8-9\">#</a> [1, 2, 5, 7, 8, 9]</h1>\n<p>[1, 2, 5, 7, 8, 9]<br />\n 多态：不同对象对同一方法响应不同的行动<br />\n【例子】</p>\n<p>class Animal:<br />\ndef run(self):<br />\nraise AttributeError (' 子类必须实现这个方法 ')<br />\n​<br />\n​<br />\nclass People(Animal):<br />\ndef run(self):<br />\nprint (' 人正在走 ')<br />\n​<br />\n​<br />\nclass Pig(Animal):<br />\ndef run(self):<br />\nprint('pig is walking')<br />\n​<br />\n​<br />\nclass Dog(Animal):<br />\ndef run(self):<br />\nprint('dog is running')<br />\n​<br />\n​<br />\ndef func(animal):<br />\nanimal.run()<br />\n​<br />\n​<br />\nfunc(Pig())</p>\n<h1 id=\"pig-is-walking\"><a class=\"anchor\" href=\"#pig-is-walking\">#</a> pig is walking</h1>\n<p>pig is walking<br />\nself 是什么？<br />\nPython 的 self 相当于 C++ 的 this 指针。</p>\n<p>【例子】</p>\n<p>class Test:<br />\ndef prt(self):<br />\nprint(self)<br />\nprint(self.<strong>class</strong>)<br />\n​<br />\n​<br />\nt = Test()<br />\nt.prt()</p>\n<h1 id=\"maintest-object-at-0x000000bc5a351208\"><a class=\"anchor\" href=\"#maintest-object-at-0x000000bc5a351208\">#</a> &lt;<strong>main</strong>.Test object at 0x000000BC5A351208&gt;</h1>\n<h1 id=\"class-maintest\"><a class=\"anchor\" href=\"#class-maintest\">#</a> &lt;class '<strong>main</strong>.Test'&gt;</h1>\n<p>&lt;<strong>main</strong>.Test object at 0x000002200820EA20&gt;<br />\n&lt;class '<strong>main</strong>.Test'&gt;<br />\n 类的方法与普通的函数只有一个特别的区别 —— 它们必须有一个额外的第一个参数名称（对应于该实例，即该对象本身），按照惯例它的名称是 self。在调用方法时，我们无需明确提供与参数 self 相对应的参数。</p>\n<p>【例子】</p>\n<p>class Ball:<br />\ndef setName(self, name):<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span> = name<br />\n​<br />\ndef kick(self):<br />\nprint (&quot;我叫 % s, 该死的，谁踢我...&quot; % <span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>)<br />\n​<br />\n​<br />\na = Ball()<br />\n a.setName (&quot;球 A&quot;)<br />\nb = Ball()<br />\n b.setName (&quot;球 B&quot;)<br />\nc = Ball()<br />\n c.setName (&quot;球 C&quot;)<br />\na.kick()</p>\n<h1 id=\"我叫球a该死的谁踢我\"><a class=\"anchor\" href=\"#我叫球a该死的谁踢我\">#</a> 我叫球 A, 该死的，谁踢我...</h1>\n<p>b.kick()</p>\n<h1 id=\"我叫球b该死的谁踢我\"><a class=\"anchor\" href=\"#我叫球b该死的谁踢我\">#</a> 我叫球 B, 该死的，谁踢我...</h1>\n<p>我叫球 A, 该死的，谁踢我...<br />\n 我叫球 B, 该死的，谁踢我...<br />\nPython 的魔法方法<br />\n据说，Python 的对象天生拥有一些神奇的方法，它们是面向对象的 Python 的一切...</p>\n<p>它们是可以给你的类增加魔力的特殊方法...</p>\n<p>如果你的对象实现了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，而这一切都是自动发生的...</p>\n<p>类有一个名为__init__(self [, param1, param2...]) 的魔法方法，该方法在类实例化时会自动调用。</p>\n<p>【例子】</p>\n<p>​<br />\nclass Ball:<br />\ndef <strong>init</strong>(self, name):<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span> = name<br />\n​<br />\ndef kick(self):<br />\nprint (&quot;我叫 % s, 该死的，谁踢我...&quot; % <span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>)<br />\n​<br />\n​<br />\na = Ball (&quot;球 A&quot;)<br />\n b = Ball (&quot;球 B&quot;)<br />\n c = Ball (&quot;球 C&quot;)<br />\na.kick()</p>\n<h1 id=\"我叫球a该死的谁踢我-2\"><a class=\"anchor\" href=\"#我叫球a该死的谁踢我-2\">#</a> 我叫球 A, 该死的，谁踢我...</h1>\n<p>b.kick()</p>\n<h1 id=\"我叫球b该死的谁踢我-2\"><a class=\"anchor\" href=\"#我叫球b该死的谁踢我-2\">#</a> 我叫球 B, 该死的，谁踢我...</h1>\n<p>我叫球 A, 该死的，谁踢我...<br />\n 我叫球 B, 该死的，谁踢我...<br />\n 公有和私有<br />\n在 Python 中定义私有变量只需要在变量名或函数名前加上 “__” 两个下划线，那么这个函数或变量就会为私有的了。</p>\n<p>【例子】类的私有属性实例</p>\n<p>class JustCounter:<br />\n__secretCount = 0  # 私有变量<br />\n publicCount = 0  # 公开变量<br />\n​<br />\ndef count(self):<br />\nself.__secretCount += 1<br />\nself.publicCount += 1<br />\nprint(self.__secretCount)<br />\n​<br />\n​<br />\ncounter = JustCounter()<br />\ncounter.count()  # 1<br />\ncounter.count()  # 2<br />\nprint(counter.publicCount)  # 2<br />\n​</p>\n<h1 id=\"python的私有为伪私有\"><a class=\"anchor\" href=\"#python的私有为伪私有\">#</a> Python 的私有为伪私有</h1>\n<p>print(counter._JustCounter__secretCount)  # 2<br />\nprint(counter.__secretCount)</p>\n<h1 id=\"attributeerror-justcounter-object-has-no-attribute-__secretcount\"><a class=\"anchor\" href=\"#attributeerror-justcounter-object-has-no-attribute-__secretcount\">#</a> AttributeError: 'JustCounter' object has no attribute '__secretCount'</h1>\n<p>1<br />\n2<br />\n2<br />\n2<br />\n【例子】类的私有方法实例</p>\n<p>class Site:<br />\ndef <strong>init</strong>(self, name, url):<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span> = name  # public<br />\nself.__url = url  # private<br />\n​<br />\ndef who(self):<br />\nprint('name  : ', <span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>)<br />\nprint('url : ', self.__url)<br />\n​<br />\ndef __foo (self):  # 私有方法<br />\n print (' 这是私有方法 ')<br />\n​<br />\ndef foo (self):  # 公共方法<br />\n print (' 这是公共方法 ')<br />\nself.__foo()<br />\n​<br />\n​<br />\nx = Site (' 老马的程序人生 ', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xTR09fTVlQ\">https://blog.csdn.net/LSGO_MYP</span>')<br />\nx.who()</p>\n<h1 id=\"name-老马的程序人生\"><a class=\"anchor\" href=\"#name-老马的程序人生\">#</a> name  :  老马的程序人生</h1>\n<h1 id=\"url-httpsblogcsdnnetlsgo_myp\"><a class=\"anchor\" href=\"#url-httpsblogcsdnnetlsgo_myp\">#</a> url :  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xTR09fTVlQ\">https://blog.csdn.net/LSGO_MYP</span></h1>\n<p>​<br />\nx.foo()</p>\n<h1 id=\"这是公共方法\"><a class=\"anchor\" href=\"#这是公共方法\">#</a> 这是公共方法</h1>\n<h1 id=\"这是私有方法\"><a class=\"anchor\" href=\"#这是私有方法\">#</a> 这是私有方法</h1>\n<p>​<br />\nx.__foo()</p>\n<h1 id=\"attributeerror-site-object-has-no-attribute-__foo\"><a class=\"anchor\" href=\"#attributeerror-site-object-has-no-attribute-__foo\">#</a> AttributeError: 'Site' object has no attribute '__foo'</h1>\n<p>name  :  老马的程序人生<br />\n url :  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xTR09fTVlQ\">https://blog.csdn.net/LSGO_MYP</span><br />\n 这是公共方法<br />\n这是私有方法<br />\n继承<br />\n Python 同样支持类的继承，派生类的定义如下所示：</p>\n<p>class DerivedClassName(BaseClassName):<br />\nstatement-1<br />\n.<br />\n.<br />\n.<br />\nstatement-N</p>\n<p>BaseClassName（基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用：</p>\n<p>class DerivedClassName(modname.BaseClassName):<br />\nstatement-1<br />\n.<br />\n.<br />\n.<br />\nstatement-N</p>\n<p>【例子】如果子类中定义与父类同名的方法或属性，则会自动覆盖父类对应的方法或属性。</p>\n<h1 id=\"类定义\"><a class=\"anchor\" href=\"#类定义\">#</a> 类定义</h1>\n<p>class people:<br />\n# 定义基本属性<br />\n name = ''<br />\nage = 0<br />\n# 定义私有属性，私有属性在类外部无法直接进行访问<br />\n__weight = 0<br />\n​<br />\n# 定义构造方法<br />\n def <strong>init</strong>(self, n, a, w):<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span> = n<br />\nself.age = a<br />\nself.__weight = w<br />\n​<br />\ndef speak(self):<br />\nprint (&quot;% s 说：我 % d 岁。&quot; % (<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>, self.age))<br />\n​<br />\n​</p>\n<h1 id=\"单继承示例\"><a class=\"anchor\" href=\"#单继承示例\">#</a> 单继承示例</h1>\n<p>class student(people):<br />\ngrade = ''<br />\n​<br />\ndef <strong>init</strong>(self, n, a, w, g):<br />\n# 调用父类的构函<br />\n people.<strong>init</strong>(self, n, a, w)<br />\nself.grade = g<br />\n​<br />\n# 覆写父类的方法<br />\n def speak (self):<br />\nprint (&quot;% s 说：我 % d 岁了，我在读 % d 年级&quot; % (<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>, self.age, self.grade))<br />\n​<br />\n​<br />\ns = student (' 小马的程序人生 ', 10, 60, 3)<br />\ns.speak()</p>\n<h1 id=\"小马的程序人生-说-我-10-岁了我在读-3-年级\"><a class=\"anchor\" href=\"#小马的程序人生-说-我-10-岁了我在读-3-年级\">#</a> 小马的程序人生 说：我 10 岁了，我在读 3 年级</h1>\n<p>小马的程序人生 说：我 10 岁了，我在读 3 年级<br />\n注意：如果上面的程序去掉：people.<strong>init</strong> (self, n, a, w)，则输出：说：我 0 岁了，我在读 3 年级，因为子类的构造方法把父类的构造方法覆盖了。</p>\n<p>【例子】</p>\n<p>import random<br />\n​<br />\nclass Fish:<br />\ndef <strong>init</strong>(self):<br />\nself.x = random.randint(0, 10)<br />\nself.y = random.randint(0, 10)<br />\n​<br />\ndef move(self):<br />\nself.x -= 1<br />\nprint (&quot;我的位置&quot;, self.x, self.y)<br />\n​<br />\n​<br />\nclass GoldFish (Fish):  # 金鱼<br />\n pass<br />\n​<br />\n​<br />\nclass Carp (Fish):  # 鲤鱼<br />\n pass<br />\n​<br />\n​<br />\nclass Salmon (Fish):  # 三文鱼<br />\n pass<br />\n​<br />\n​<br />\nclass Shark (Fish):  # 鲨鱼<br />\n def <strong>init</strong>(self):<br />\nself.hungry = True<br />\n​<br />\ndef eat(self):<br />\nif self.hungry:<br />\nprint (&quot;吃货的梦想就是天天有得吃！&quot;)<br />\nself.hungry = False<br />\nelse:<br />\nprint (&quot;太撑了，吃不下了！&quot;)<br />\nself.hungry = True<br />\n​<br />\n​<br />\ng = GoldFish()<br />\n g.move ()  # 我的位置 9 4<br />\ns = Shark()<br />\n s.eat () # 吃货的梦想就是天天有得吃！<br />\ns.move()</p>\n<h1 id=\"attributeerror-shark-object-has-no-attribute-x\"><a class=\"anchor\" href=\"#attributeerror-shark-object-has-no-attribute-x\">#</a> AttributeError: 'Shark' object has no attribute 'x'</h1>\n<p>我的位置 3 8<br />\n 吃货的梦想就是天天有得吃！<br />\n解决该问题可用以下两种方式：</p>\n<p>调用未绑定的父类方法 Fish.<strong>init</strong>(self)<br />\n class Shark (Fish):  # 鲨鱼<br />\n def <strong>init</strong>(self):<br />\nFish.<strong>init</strong>(self)<br />\nself.hungry = True<br />\n​<br />\ndef eat(self):<br />\nif self.hungry:<br />\nprint (&quot;吃货的梦想就是天天有得吃！&quot;)<br />\nself.hungry = False<br />\nelse:<br />\nprint (&quot;太撑了，吃不下了！&quot;)<br />\nself.hungry = True<br />\n 使用 super 函数 super ().<strong>init</strong>()<br />\n class Shark (Fish):  # 鲨鱼<br />\n def <strong>init</strong>(self):<br />\nsuper().<strong>init</strong>()<br />\nself.hungry = True<br />\n​<br />\ndef eat(self):<br />\nif self.hungry:<br />\nprint (&quot;吃货的梦想就是天天有得吃！&quot;)<br />\nself.hungry = False<br />\nelse:<br />\nprint (&quot;太撑了，吃不下了！&quot;)<br />\nself.hungry = True<br />\nPython 虽然支持多继承的形式，但我们一般不使用多继承，因为容易引起混乱。</p>\n<p>class DerivedClassName(Base1, Base2, Base3):<br />\nstatement-1<br />\n.<br />\n.<br />\n.<br />\nstatement-N</p>\n<p>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，Python 从左至右搜索，即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p>\n<p>【例子】</p>\n<h1 id=\"类定义-2\"><a class=\"anchor\" href=\"#类定义-2\">#</a> 类定义</h1>\n<p>class People:<br />\n# 定义基本属性<br />\n name = ''<br />\nage = 0<br />\n# 定义私有属性，私有属性在类外部无法直接进行访问<br />\n__weight = 0<br />\n​<br />\n# 定义构造方法<br />\n def <strong>init</strong>(self, n, a, w):<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span> = n<br />\nself.age = a<br />\nself.__weight = w<br />\n​<br />\ndef speak(self):<br />\nprint (&quot;% s 说：我 % d 岁。&quot; % (<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>, self.age))<br />\n​<br />\n​</p>\n<h1 id=\"单继承示例-2\"><a class=\"anchor\" href=\"#单继承示例-2\">#</a> 单继承示例</h1>\n<p>class Student(People):<br />\ngrade = ''<br />\n​<br />\ndef <strong>init</strong>(self, n, a, w, g):<br />\n# 调用父类的构函<br />\n People.<strong>init</strong>(self, n, a, w)<br />\nself.grade = g<br />\n​<br />\n# 覆写父类的方法<br />\n def speak (self):<br />\nprint (&quot;% s 说：我 % d 岁了，我在读 % d 年级&quot; % (<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>, self.age, self.grade))<br />\n​<br />\n​</p>\n<h1 id=\"另一个类多重继承之前的准备\"><a class=\"anchor\" href=\"#另一个类多重继承之前的准备\">#</a> 另一个类，多重继承之前的准备</h1>\n<p>class Speaker:<br />\ntopic = ''<br />\nname = ''<br />\n​<br />\ndef <strong>init</strong>(self, n, t):<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span> = n<br />\nself.topic = t<br />\n​<br />\ndef speak(self):<br />\nprint (&quot;我叫 % s，我是一个演说家，我演讲的主题是 % s&quot; % (<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>, self.topic))<br />\n​<br />\n​</p>\n<h1 id=\"多重继承\"><a class=\"anchor\" href=\"#多重继承\">#</a> 多重继承</h1>\n<p>class Sample01(Speaker, Student):<br />\na = ''<br />\n​<br />\ndef <strong>init</strong>(self, n, a, w, g, t):<br />\nStudent.<strong>init</strong>(self, n, a, w, g)<br />\nSpeaker.<strong>init</strong>(self, n, t)<br />\n​</p>\n<h1 id=\"方法名同默认调用的是在括号中排前地父类的方法\"><a class=\"anchor\" href=\"#方法名同默认调用的是在括号中排前地父类的方法\">#</a> 方法名同，默认调用的是在括号中排前地父类的方法</h1>\n<p>test = Sample01(&quot;Tim&quot;, 25, 80, 4, &quot;Python&quot;)<br />\ntest.speak()</p>\n<h1 id=\"我叫-tim我是一个演说家我演讲的主题是-python\"><a class=\"anchor\" href=\"#我叫-tim我是一个演说家我演讲的主题是-python\">#</a> 我叫 Tim，我是一个演说家，我演讲的主题是 Python</h1>\n<p>​<br />\nclass Sample02(Student, Speaker):<br />\na = ''<br />\n​<br />\ndef <strong>init</strong>(self, n, a, w, g, t):<br />\nStudent.<strong>init</strong>(self, n, a, w, g)<br />\nSpeaker.<strong>init</strong>(self, n, t)<br />\n​</p>\n<h1 id=\"方法名同默认调用的是在括号中排前地父类的方法-2\"><a class=\"anchor\" href=\"#方法名同默认调用的是在括号中排前地父类的方法-2\">#</a> 方法名同，默认调用的是在括号中排前地父类的方法</h1>\n<p>test = Sample02(&quot;Tim&quot;, 25, 80, 4, &quot;Python&quot;)<br />\ntest.speak()</p>\n<h1 id=\"tim-说-我-25-岁了我在读-4-年级\"><a class=\"anchor\" href=\"#tim-说-我-25-岁了我在读-4-年级\">#</a> Tim 说：我 25 岁了，我在读 4 年级</h1>\n<p>我叫 Tim，我是一个演说家，我演讲的主题是 Python<br />\nTim 说：我 25 岁了，我在读 4 年级<br />\n组合<br />\n【例子】</p>\n<p>class Turtle:<br />\ndef <strong>init</strong>(self, x):<br />\nself.num = x<br />\n​<br />\n​<br />\nclass Fish:<br />\ndef <strong>init</strong>(self, x):<br />\nself.num = x<br />\n​<br />\n​<br />\nclass Pool:<br />\ndef <strong>init</strong>(self, x, y):<br />\nself.turtle = Turtle(x)<br />\nself.fish = Fish(y)<br />\n​<br />\ndef print_num(self):<br />\nprint (&quot;水池里面有乌龟 % s 只，小鱼 % s 条&quot; % (self.turtle.num, self.fish.num))<br />\n​<br />\n​<br />\np = Pool(2, 3)<br />\np.print_num()</p>\n<h1 id=\"水池里面有乌龟2只小鱼3条\"><a class=\"anchor\" href=\"#水池里面有乌龟2只小鱼3条\">#</a> 水池里面有乌龟 2 只，小鱼 3 条</h1>\n<p>水池里面有乌龟 2 只，小鱼 3 条<br />\n类、类对象和实例对象<br />\n类对象和实例对象</p>\n<p>类对象：创建一个类，其实也是一个对象也在内存开辟了一块空间，称为类对象，类对象只有一个。</p>\n<p>class A(object):<br />\npass</p>\n<p>实例对象：就是通过实例化类创建的对象，称为实例对象，实例对象可以有多个。</p>\n<p>【例子】</p>\n<p>class A(object):<br />\npass<br />\n​</p>\n<h1 id=\"实例化对象-a-b-c都属于实例对象\"><a class=\"anchor\" href=\"#实例化对象-a-b-c都属于实例对象\">#</a> 实例化对象 a、b、c 都属于实例对象。</h1>\n<p>a = A()<br />\nb = A()<br />\nc = A()<br />\n 类属性：类里面方法外面定义的变量称为类属性。类属性所属于类对象并且多个实例对象之间共享同一个类属性，说白了就是类属性所有的通过该类实例化的对象都能共享。</p>\n<p>【例子】</p>\n<p>class A():<br />\na = 0  #类属性<br />\n def <strong>init</strong>(self, xx):<br />\nA.a = xx  #使用类属性可以通过 （类名。类属性）调用。<br />\n实例属性：实例属性和具体的某个实例对象有关系，并且一个实例对象和另外一个实例对象是不共享属性的，说白了实例属性只能在自己的对象里面使用，其他的对象不能直接使用，因为 self 是谁调用，它的值就属于该对象。</p>\n<p>【例子】</p>\n<h1 id=\"创建类对象\"><a class=\"anchor\" href=\"#创建类对象\">#</a> 创建类对象</h1>\n<p>class Test(object):<br />\nclass_attr = 100  # 类属性<br />\n​<br />\ndef <strong>init</strong>(self):<br />\nself.sl_attr = 100  # 实例属性<br />\n​<br />\ndef func(self):<br />\nprint (' 类对象。类属性的值:', Test.class_attr)  # 调用类属性<br />\n print ('self. 类属性的值 ', self.class_attr)  # 相当于把类属性 变成实例属性<br />\n print ('self. 实例属性的值 ', self.sl_attr)  # 调用实例属性<br />\n​<br />\n​<br />\na = Test()<br />\na.func()<br />\n​</p>\n<h1 id=\"类对象类属性的值-100\"><a class=\"anchor\" href=\"#类对象类属性的值-100\">#</a> 类对象。类属性的值: 100</h1>\n<h1 id=\"self类属性的值-100\"><a class=\"anchor\" href=\"#self类属性的值-100\">#</a> self. 类属性的值 100</h1>\n<h1 id=\"self实例属性的值-100\"><a class=\"anchor\" href=\"#self实例属性的值-100\">#</a> self. 实例属性的值 100</h1>\n<p>​<br />\nb = Test()<br />\nb.func()<br />\n​</p>\n<h1 id=\"类对象类属性的值-100-2\"><a class=\"anchor\" href=\"#类对象类属性的值-100-2\">#</a> 类对象。类属性的值: 100</h1>\n<h1 id=\"self类属性的值-100-2\"><a class=\"anchor\" href=\"#self类属性的值-100-2\">#</a> self. 类属性的值 100</h1>\n<h1 id=\"self实例属性的值-100-2\"><a class=\"anchor\" href=\"#self实例属性的值-100-2\">#</a> self. 实例属性的值 100</h1>\n<p>​<br />\na.class_attr = 200<br />\na.sl_attr = 200<br />\na.func()<br />\n​</p>\n<h1 id=\"类对象类属性的值-100-3\"><a class=\"anchor\" href=\"#类对象类属性的值-100-3\">#</a> 类对象。类属性的值: 100</h1>\n<h1 id=\"self类属性的值-200\"><a class=\"anchor\" href=\"#self类属性的值-200\">#</a> self. 类属性的值 200</h1>\n<h1 id=\"self实例属性的值-200\"><a class=\"anchor\" href=\"#self实例属性的值-200\">#</a> self. 实例属性的值 200</h1>\n<p>​<br />\nb.func()<br />\n​</p>\n<h1 id=\"类对象类属性的值-100-4\"><a class=\"anchor\" href=\"#类对象类属性的值-100-4\">#</a> 类对象。类属性的值: 100</h1>\n<h1 id=\"self类属性的值-100-3\"><a class=\"anchor\" href=\"#self类属性的值-100-3\">#</a> self. 类属性的值 100</h1>\n<h1 id=\"self实例属性的值-100-3\"><a class=\"anchor\" href=\"#self实例属性的值-100-3\">#</a> self. 实例属性的值 100</h1>\n<p>​<br />\nTest.class_attr = 300<br />\na.func()<br />\n​</p>\n<h1 id=\"类对象类属性的值-300\"><a class=\"anchor\" href=\"#类对象类属性的值-300\">#</a> 类对象。类属性的值: 300</h1>\n<h1 id=\"self类属性的值-200-2\"><a class=\"anchor\" href=\"#self类属性的值-200-2\">#</a> self. 类属性的值 200</h1>\n<h1 id=\"self实例属性的值-200-2\"><a class=\"anchor\" href=\"#self实例属性的值-200-2\">#</a> self. 实例属性的值 200</h1>\n<p>​<br />\nb.func()</p>\n<h1 id=\"类对象类属性的值-300-2\"><a class=\"anchor\" href=\"#类对象类属性的值-300-2\">#</a> 类对象。类属性的值: 300</h1>\n<h1 id=\"self类属性的值-300\"><a class=\"anchor\" href=\"#self类属性的值-300\">#</a> self. 类属性的值 300</h1>\n<h1 id=\"self实例属性的值-100-4\"><a class=\"anchor\" href=\"#self实例属性的值-100-4\">#</a> self. 实例属性的值 100</h1>\n<p>类对象。类属性的值: 100<br />\nself. 类属性的值 100<br />\nself. 实例属性的值 100<br />\n 类对象。类属性的值: 100<br />\nself. 类属性的值 100<br />\nself. 实例属性的值 100<br />\n 类对象。类属性的值: 100<br />\nself. 类属性的值 200<br />\nself. 实例属性的值 200<br />\n 类对象。类属性的值: 100<br />\nself. 类属性的值 100<br />\nself. 实例属性的值 100<br />\n 类对象。类属性的值: 300<br />\nself. 类属性的值 200<br />\nself. 实例属性的值 200<br />\n 类对象。类属性的值: 300<br />\nself. 类属性的值 300<br />\nself. 实例属性的值 100<br />\n 注意：属性与方法名相同，属性会覆盖方法。</p>\n<p>【例子】</p>\n<p>class A:<br />\ndef x(self):<br />\nprint('x_man')<br />\n​<br />\n​<br />\naa = A()<br />\naa.x()  # x_man<br />\naa.x = 1<br />\nprint(aa.x)  # 1<br />\naa.x()</p>\n<h1 id=\"typeerror-int-object-is-not-callable\"><a class=\"anchor\" href=\"#typeerror-int-object-is-not-callable\">#</a> TypeError: 'int' object is not callable</h1>\n<p>x_man<br />\n1<br />\n 什么是绑定？<br />\nPython 严格要求方法需要有实例才能被调用，这种限制其实就是 Python 所谓的绑定概念。</p>\n<p>Python 对象的数据属性通常存储在名为.__ dict__的字典中，我们可以直接访问__dict__，或利用 Python 的内置函数 vars () 获取.__ dict__。</p>\n<p>【例子】</p>\n<p>class CC:<br />\ndef setXY(self, x, y):<br />\nself.x = x<br />\nself.y = y<br />\n​<br />\ndef printXY(self):<br />\nprint(self.x, self.y)<br />\n​<br />\n​<br />\ndd = CC()<br />\nprint(dd.<strong>dict</strong>)</p>\n<h1 id=\"-4\"><a class=\"anchor\" href=\"#-4\">#</a> {}</h1>\n<p>​<br />\nprint(vars(dd))</p>\n<h1 id=\"-5\"><a class=\"anchor\" href=\"#-5\">#</a> {}</h1>\n<p>​<br />\nprint(CC.<strong>dict</strong>)</p>\n<h1 id=\"module-main-setxy-function-ccsetxy-at-0x000000c3473da048-printxy-function-ccprintxy-at-0x000000c3473c4f28-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none\"><a class=\"anchor\" href=\"#module-main-setxy-function-ccsetxy-at-0x000000c3473da048-printxy-function-ccprintxy-at-0x000000c3473c4f28-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none\">#</a> {'<strong>module</strong>': '<strong>main</strong>', 'setXY': &lt;function CC.setXY at 0x000000C3473DA048&gt;, 'printXY': &lt;function CC.printXY at 0x000000C3473C4F28&gt;, '<strong>dict</strong>': &lt;attribute '<strong>dict</strong>' of 'CC' objects&gt;, '<strong>weakref</strong>': &lt;attribute '<strong>weakref</strong>' of 'CC' objects&gt;, '<strong>doc</strong>': None}</h1>\n<p>​<br />\ndd.setXY(4, 5)<br />\nprint(dd.<strong>dict</strong>)</p>\n<h1 x:=\"\" 4,=\"\" y:=\"\" 5=\"\" id=\"-6\"><a class=\"anchor\" href=\"#-6\">#</a> </h1>\n<p>​<br />\nprint(vars(CC))</p>\n<h1 id=\"module-main-setxy-function-ccsetxy-at-0x000000632ca9b048-printxy-function-ccprintxy-at-0x000000632ca83048-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none\"><a class=\"anchor\" href=\"#module-main-setxy-function-ccsetxy-at-0x000000632ca9b048-printxy-function-ccprintxy-at-0x000000632ca83048-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none\">#</a> {'<strong>module</strong>': '<strong>main</strong>', 'setXY': &lt;function CC.setXY at 0x000000632CA9B048&gt;, 'printXY': &lt;function CC.printXY at 0x000000632CA83048&gt;, '<strong>dict</strong>': &lt;attribute '<strong>dict</strong>' of 'CC' objects&gt;, '<strong>weakref</strong>': &lt;attribute '<strong>weakref</strong>' of 'CC' objects&gt;, '<strong>doc</strong>': None}</h1>\n<p>​<br />\nprint(CC.<strong>dict</strong>)</p>\n<h1 id=\"module-main-setxy-function-ccsetxy-at-0x000000632ca9b048-printxy-function-ccprintxy-at-0x000000632ca83048-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none-2\"><a class=\"anchor\" href=\"#module-main-setxy-function-ccsetxy-at-0x000000632ca9b048-printxy-function-ccprintxy-at-0x000000632ca83048-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none-2\">#</a> {'<strong>module</strong>': '<strong>main</strong>', 'setXY': &lt;function CC.setXY at 0x000000632CA9B048&gt;, 'printXY': &lt;function CC.printXY at 0x000000632CA83048&gt;, '<strong>dict</strong>': &lt;attribute '<strong>dict</strong>' of 'CC' objects&gt;, '<strong>weakref</strong>': &lt;attribute '<strong>weakref</strong>' of 'CC' objects&gt;, '<strong>doc</strong>': None}</h1>\n<p>{}<br />\n{}<br />\n{'<strong>module</strong>': '<strong>main</strong>', 'setXY': &lt;function CC.setXY at 0x000002200822BD08&gt;, 'printXY': &lt;function CC.printXY at 0x000002200822BF28&gt;, '<strong>dict</strong>': &lt;attribute '<strong>dict</strong>' of 'CC' objects&gt;, '<strong>weakref</strong>': &lt;attribute '<strong>weakref</strong>' of 'CC' objects&gt;, '<strong>doc</strong>': None}<br />\n{'x': 4, 'y': 5}<br />\n{'<strong>module</strong>': '<strong>main</strong>', 'setXY': &lt;function CC.setXY at 0x000002200822BD08&gt;, 'printXY': &lt;function CC.printXY at 0x000002200822BF28&gt;, '<strong>dict</strong>': &lt;attribute '<strong>dict</strong>' of 'CC' objects&gt;, '<strong>weakref</strong>': &lt;attribute '<strong>weakref</strong>' of 'CC' objects&gt;, '<strong>doc</strong>': None}<br />\n{'<strong>module</strong>': '<strong>main</strong>', 'setXY': &lt;function CC.setXY at 0x000002200822BD08&gt;, 'printXY': &lt;function CC.printXY at 0x000002200822BF28&gt;, '<strong>dict</strong>': &lt;attribute '<strong>dict</strong>' of 'CC' objects&gt;, '<strong>weakref</strong>': &lt;attribute '<strong>weakref</strong>' of 'CC' objects&gt;, '<strong>doc</strong>': None}<br />\n 一些相关的内置函数（BIF）<br />\nissubclass (class, classinfo) 方法用于判断参数 class 是否是类型参数 classinfo 的子类。<br />\n一个类被认为是其自身的子类。<br />\nclassinfo 可以是类对象的元组，只要 class 是其中任何一个候选类的子类，则返回 True。<br />\n【例子】</p>\n<p>class A:<br />\npass<br />\n​<br />\n​<br />\nclass B(A):<br />\npass<br />\n​<br />\n​<br />\nprint(issubclass(B, A))  # True<br />\nprint(issubclass(B, B))  # True<br />\nprint(issubclass(A, B))  # False<br />\nprint(issubclass(B, object))  # True<br />\nTrue<br />\nTrue<br />\nFalse<br />\nTrue<br />\nisinstance (object, classinfo) 方法用于判断一个对象是否是一个已知的类型，类似 type ()。<br />\ntype () 不会认为子类是一种父类类型，不考虑继承关系。<br />\nisinstance () 会认为子类是一种父类类型，考虑继承关系。<br />\n如果第一个参数不是对象，则永远返回 False。<br />\n如果第二个参数不是类或者由类对象组成的元组，会抛出一个 TypeError 异常。<br />\n【例子】</p>\n<p>a = 2<br />\nprint(isinstance(a, int))  # True<br />\nprint(isinstance(a, str))  # False<br />\nprint(isinstance(a, (str, int, list)))  # True<br />\n​<br />\n​<br />\nclass A:<br />\npass<br />\n​<br />\n​<br />\nclass B(A):<br />\npass<br />\n​<br />\n​<br />\nprint(isinstance(A(), A))  # True<br />\nprint(type(A()) == A)  # True<br />\nprint(isinstance(B(), A))  # True<br />\nprint(type(B()) == A)  # False<br />\nTrue<br />\nFalse<br />\nTrue<br />\nTrue<br />\nTrue<br />\nTrue<br />\nFalse<br />\nhasattr (object, name) 用于判断对象是否包含对应的属性。<br />\n【例子】</p>\n<p>class Coordinate:<br />\nx = 10<br />\ny = -5<br />\nz = 0<br />\n​<br />\n​<br />\npoint1 = Coordinate()<br />\nprint(hasattr(point1, 'x'))  # True<br />\nprint(hasattr(point1, 'y'))  # True<br />\nprint(hasattr(point1, 'z'))  # True<br />\nprint(hasattr(point1, 'no'))  # False<br />\nTrue<br />\nTrue<br />\nTrue<br />\nFalse<br />\ngetattr (object, name [, default]) 用于返回一个对象属性值。<br />\n【例子】</p>\n<p>class A(object):<br />\nbar = 1<br />\n​<br />\n​<br />\na = A()<br />\nprint(getattr(a, 'bar'))  # 1<br />\nprint(getattr(a, 'bar2', 3))  # 3<br />\nprint(getattr(a, 'bar2'))</p>\n<h1 id=\"attributeerror-a-object-has-no-attribute-bar2\"><a class=\"anchor\" href=\"#attributeerror-a-object-has-no-attribute-bar2\">#</a> AttributeError: 'A' object has no attribute 'bar2'</h1>\n<p>1<br />\n3<br />\n【例子】这个例子很酷！</p>\n<p>class A(object):<br />\ndef set(self, a, b):<br />\nx = a<br />\na = b<br />\nb = x<br />\nprint(a, b)<br />\n​<br />\n​<br />\na = A()<br />\nc = getattr(a, 'set')<br />\nc(a='1', b='2')  # 2 1<br />\n​<br />\n2 1<br />\nsetattr (object, name, value) 对应函数 getattr ()，用于设置属性值，该属性不一定是存在的。<br />\n【例子】</p>\n<p>class A(object):<br />\nbar = 1<br />\n​<br />\n​<br />\na = A()<br />\nprint(getattr(a, 'bar'))  # 1<br />\nsetattr(a, 'bar', 5)<br />\nprint(a.bar)  # 5<br />\nsetattr(a, &quot;age&quot;, 28)<br />\nprint(a.age)  # 28<br />\n1<br />\n5<br />\n28<br />\ndelattr (object, name) 用于删除属性。<br />\n【例子】</p>\n<p>class Coordinate:<br />\nx = 10<br />\ny = -5<br />\nz = 0<br />\n​<br />\n​<br />\npoint1 = Coordinate()<br />\n​<br />\nprint('x = ', point1.x)  # x =  10<br />\nprint('y = ', point1.y)  # y =  -5<br />\nprint('z = ', point1.z)  # z =  0<br />\n​<br />\ndelattr(Coordinate, 'z')<br />\n​<br />\nprint ('-- 删除 z 属性后 --')  # -- 删除 z 属性后 --<br />\nprint('x = ', point1.x)  # x =  10<br />\nprint('y = ', point1.y)  # y =  -5<br />\n​</p>\n<h1 id=\"触发错误\"><a class=\"anchor\" href=\"#触发错误\">#</a> 触发错误</h1>\n<p>print('z = ', point1.z)</p>\n<h1 id=\"attributeerror-coordinate-object-has-no-attribute-z\"><a class=\"anchor\" href=\"#attributeerror-coordinate-object-has-no-attribute-z\">#</a> AttributeError: 'Coordinate' object has no attribute 'z'</h1>\n<p>x =  10<br />\ny =  -5<br />\nz =  0<br />\n-- 删除 z 属性后 --<br />\nx =  10<br />\ny =  -5<br />\nclass property ([fget [, fset [, fdel [, doc]]]]) 用于在新式类中返回属性值。<br />\nfget -- 获取属性值的函数<br />\n fset -- 设置属性值的函数<br />\n fdel -- 删除属性值函数<br />\n doc -- 属性描述信息<br />\n【例子】</p>\n<p>class C(object):<br />\ndef <strong>init</strong>(self):<br />\nself.__x = None<br />\n​<br />\ndef getx(self):<br />\nreturn self.__x<br />\n​<br />\ndef setx(self, value):<br />\nself.__x = value<br />\n​<br />\ndef delx(self):<br />\ndel self.__x<br />\n​<br />\nx = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;)<br />\n​<br />\n​<br />\ncc = C()<br />\ncc.x = 2<br />\nprint(cc.x)  # 2<br />\n​<br />\ndel cc.x<br />\nprint(cc.x)</p>\n<h1 id=\"attributeerror-c-object-has-no-attribute-_c__x\"><a class=\"anchor\" href=\"#attributeerror-c-object-has-no-attribute-_c__x\">#</a> AttributeError: 'C' object has no attribute '_C__x'</h1>\n<p>2<br />\n 魔法方法<br />\n魔法方法总是被双下划线包围，例如__init__。</p>\n<p>魔法方法是面向对象的 Python 的一切，如果你不知道魔法方法，说明你还没能意识到面向对象的 Python 的强大。</p>\n<p>魔法方法的 “魔力” 体现在它们总能够在适当的时候被自动调用。</p>\n<p>魔法方法的第一个参数应为 cls（类方法） 或者 self（实例方法）。</p>\n<p>cls：代表一个类的名称<br />\n self：代表一个实例对象的名称<br />\n基本的魔法方法<br />\n<strong> init</strong> (self [, ...]) 构造器，当一个实例被创建的时候调用的初始化方法<br />\n【例子】</p>\n<p>class Rectangle:<br />\ndef <strong>init</strong>(self, x, y):<br />\nself.x = x<br />\nself.y = y<br />\n​<br />\ndef getPeri(self):<br />\nreturn (self.x + self.y) * 2<br />\n​<br />\ndef getArea(self):<br />\nreturn self.x * self.y<br />\n​<br />\n​<br />\nrect = Rectangle(4, 5)<br />\nprint(rect.getPeri())  # 18<br />\nprint(rect.getArea())  # 20<br />\n18<br />\n20<br />\n<strong>new</strong> (cls [, ...]) 在一个对象实例化的时候所调用的第一个方法，在调用__init__初始化前，先调用__new__。<br />\n<strong>new__至少要有一个参数 cls，代表要实例化的类，此参数在实例化时由 Python 解释器自动提供，后面的参数直接传递给__init</strong>。<br />\n<strong>new__对当前类进行了实例化，并将实例返回，传给__init__的 self。但是，执行了__new</strong>，并不一定会进入__init__，只有__new__返回了，当前类 cls 的实例，当前类的__init__才会进入。<br />\n【例子】</p>\n<p>class A(object):<br />\ndef <strong>init</strong>(self, value):<br />\nprint(&quot;into A <strong>init</strong>&quot;)<br />\nself.value = value<br />\n​<br />\ndef <strong>new</strong>(cls, *args, **kwargs):<br />\nprint(&quot;into A <strong>new</strong>&quot;)<br />\nprint(cls)<br />\nreturn object.<strong>new</strong>(cls)<br />\n​<br />\n​<br />\nclass B(A):<br />\ndef <strong>init</strong>(self, value):<br />\nprint(&quot;into B <strong>init</strong>&quot;)<br />\nself.value = value<br />\n​<br />\ndef <strong>new</strong>(cls, *args, **kwargs):<br />\nprint(&quot;into B <strong>new</strong>&quot;)<br />\nprint(cls)<br />\nreturn super().<strong>new</strong>(cls, *args, **kwargs)<br />\n​<br />\n​<br />\nb = B(10)<br />\n​</p>\n<h1 id=\"结果\"><a class=\"anchor\" href=\"#结果\">#</a> 结果：</h1>\n<h1 id=\"into-b-new\"><a class=\"anchor\" href=\"#into-b-new\">#</a> into B <strong>new</strong></h1>\n<h1 id=\"class-mainb\"><a class=\"anchor\" href=\"#class-mainb\">#</a> &lt;class '<strong>main</strong>.B'&gt;</h1>\n<h1 id=\"into-a-new\"><a class=\"anchor\" href=\"#into-a-new\">#</a> into A <strong>new</strong></h1>\n<h1 id=\"class-mainb-2\"><a class=\"anchor\" href=\"#class-mainb-2\">#</a> &lt;class '<strong>main</strong>.B'&gt;</h1>\n<h1 id=\"into-b-init\"><a class=\"anchor\" href=\"#into-b-init\">#</a> into B <strong>init</strong></h1>\n<p>​<br />\nclass A(object):<br />\ndef <strong>init</strong>(self, value):<br />\nprint(&quot;into A <strong>init</strong>&quot;)<br />\nself.value = value<br />\n​<br />\ndef <strong>new</strong>(cls, *args, **kwargs):<br />\nprint(&quot;into A <strong>new</strong>&quot;)<br />\nprint(cls)<br />\nreturn object.<strong>new</strong>(cls)<br />\n​<br />\n​<br />\nclass B(A):<br />\ndef <strong>init</strong>(self, value):<br />\nprint(&quot;into B <strong>init</strong>&quot;)<br />\nself.value = value<br />\n​<br />\ndef <strong>new</strong>(cls, *args, **kwargs):<br />\nprint(&quot;into B <strong>new</strong>&quot;)<br />\nprint(cls)<br />\nreturn super().<strong>new</strong> (A, *args, **kwargs)  # 改动了 cls 变为 A<br />\n​<br />\n​<br />\nb = B(10)<br />\n​</p>\n<h1 id=\"结果-2\"><a class=\"anchor\" href=\"#结果-2\">#</a> 结果：</h1>\n<h1 id=\"into-b-new-2\"><a class=\"anchor\" href=\"#into-b-new-2\">#</a> into B <strong>new</strong></h1>\n<h1 id=\"class-mainb-3\"><a class=\"anchor\" href=\"#class-mainb-3\">#</a> &lt;class '<strong>main</strong>.B'&gt;</h1>\n<h1 id=\"into-a-new-2\"><a class=\"anchor\" href=\"#into-a-new-2\">#</a> into A <strong>new</strong></h1>\n<h1 id=\"class-maina\"><a class=\"anchor\" href=\"#class-maina\">#</a> &lt;class '<strong>main</strong>.A'&gt;</h1>\n<p>into B <strong>new</strong><br />\n&lt;class '<strong>main</strong>.B'&gt;<br />\ninto A <strong>new</strong><br />\n&lt;class '<strong>main</strong>.B'&gt;<br />\ninto B <strong>init</strong><br />\ninto B <strong>new</strong><br />\n&lt;class '<strong>main</strong>.B'&gt;<br />\ninto A <strong>new</strong><br />\n&lt;class '<strong>main</strong>.A'&gt;<br />\n 若__new__没有正确返回当前类 cls 的实例，那__init__是不会被调用的，即使是父类的实例也不行，将没有__init__被调用。<br />\n【例子】利用__new__实现单例模式。</p>\n<p>class Earth:<br />\npass<br />\n​<br />\n​<br />\na = Earth()<br />\nprint(id(a))  # 260728291456<br />\nb = Earth()<br />\nprint(id(b))  # 260728291624<br />\n​<br />\nclass Earth:<br />\n__instance = None  # 定义一个类属性做判断<br />\n​<br />\ndef <strong>new</strong>(cls):<br />\nif cls.__instance is None:<br />\ncls.__instance = object.<strong>new</strong>(cls)<br />\nreturn cls.__instance<br />\nelse:<br />\nreturn cls.__instance<br />\n​<br />\n​<br />\na = Earth()<br />\nprint(id(a))  # 512320401648<br />\nb = Earth()<br />\nprint(id(b))  # 512320401648<br />\n2336598724336<br />\n2336598528464<br />\n2336598467752<br />\n2336598467752<br />\n__new__方法主要是当你继承一些不可变的 class 时（比如 int, str, tuple）， 提供给你一个自定义这些类的实例化过程的途径。<br />\n【例子】</p>\n<p>class CapStr(str):<br />\ndef <strong>new</strong>(cls, string):<br />\nstring = string.upper()<br />\nreturn str.<strong>new</strong>(cls, string)<br />\n​<br />\n​<br />\na = CapStr(&quot;i love lsgogroup&quot;)<br />\nprint(a)  # I LOVE LSGOGROUP<br />\nI LOVE LSGOGROUP<br />\n<strong>del</strong> (self) 析构器，当一个对象将要被系统回收之时调用的方法。<br />\nPython 采用自动引用计数（ARC）方式来回收对象所占用的空间，当程序中有一个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 1；当程序中有两个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 2，依此类推，如果一个对象的引用计数变成了 0，则说明程序中不再有变量引用该对象，表明程序不再需要该对象，因此 Python 就会回收该对象。</p>\n<p>大部分时候，Python 的 ARC 都能准确、高效地回收系统中的每个对象。但如果系统中出现循环引用的情况，比如对象 a 持有一个实例变量引用对象 b，而对象 b 又持有一个实例变量引用对象 a，此时两个对象的引用计数都是 1，而实际上程序已经不再有变量引用它们，系统应该回收它们，此时 Python 的垃圾回收器就可能没那么快，要等专门的循环垃圾回收器（Cyclic Garbage Collector）来检测并回收这种引用循环。</p>\n<p>【例子】</p>\n<p>class C(object):<br />\ndef <strong>init</strong>(self):<br />\nprint('into C <strong>init</strong>')<br />\n​<br />\ndef <strong>del</strong>(self):<br />\nprint('into C <strong>del</strong>')<br />\n​<br />\n​<br />\nc1 = C()</p>\n<h1 id=\"into-c-init\"><a class=\"anchor\" href=\"#into-c-init\">#</a> into C <strong>init</strong></h1>\n<p>c2 = c1<br />\nc3 = c2<br />\ndel c3<br />\ndel c2<br />\ndel c1</p>\n<h1 id=\"into-c-del\"><a class=\"anchor\" href=\"#into-c-del\">#</a> into C <strong>del</strong></h1>\n<p>into C <strong>init</strong><br />\ninto C <strong>del</strong><br />\n<strong>str</strong>(self):</p>\n<p>当你打印一个对象的时候，触发__str__<br />\n当你使用 % s 格式化的时候，触发__str__<br />\nstr 强转数据类型的时候，触发__str__<br />\n<strong>repr</strong>(self)：</p>\n<p>repr 是 str 的备胎<br />\n有__str__的时候执行__str__, 没有实现__str__的时候，执行__repr__<br />\nrepr (obj) 内置函数对应的结果是__repr__的返回值<br />\n当你使用 % r 格式化的时候 触发__repr__<br />\n【例子】</p>\n<p>class Cat:<br />\n&quot;&quot;&quot;定义一个猫类&quot;&quot;&quot;<br />\n​<br />\ndef <strong>init</strong>(self, new_name, new_age):<br />\n&quot;&quot;&quot;在创建完对象之后 会自动调用，它完成对象的初始化的功能&quot;&quot;&quot;<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span> = new_name<br />\nself.age = new_age<br />\n​<br />\ndef <strong>str</strong>(self):<br />\n&quot;&quot;&quot;返回一个对象的描述信息&quot;&quot;&quot;<br />\nreturn&quot; 名字是:% s , 年龄是:% d&quot; % (<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>, self.age)</p>\n<pre><code>def __repr__(self):\n    &quot;&quot;&quot;返回一个对象的描述信息&quot;&quot;&quot;\n    return &quot;Cat:(%s,%d)&quot; % (self.name, self.age)\n</code></pre>\n<p>​<br />\ndef eat(self):<br />\nprint (&quot;% s 在吃鱼....&quot; % <span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>)<br />\n​<br />\ndef drink(self):<br />\nprint (&quot;% s 在喝可乐...&quot; % <span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>)<br />\n​<br />\ndef introduce(self):<br />\nprint (&quot;名字是:% s, 年龄是:% d&quot; % (<span class=\"exturl\" data-url=\"aHR0cDovL3NlbGYubmFtZQ==\">self.name</span>, self.age))<br />\n​<br />\n​</p>\n<h1 id=\"创建了一个对象\"><a class=\"anchor\" href=\"#创建了一个对象\">#</a> 创建了一个对象</h1>\n<p>tom = Cat (&quot;汤姆&quot;, 30)<br />\n print (tom)  # 名字是：汤姆，年龄是：30<br />\nprint (str (tom)) # 名字是：汤姆，年龄是：30<br />\nprint (repr (tom))  # Cat:(汤姆，30)<br />\n tom.eat ()  # 汤姆在吃鱼....<br />\ntom.introduce ()  # 名字是：汤姆，年龄是：30<br />\n 名字是：汤姆，年龄是：30<br />\n 名字是：汤姆，年龄是：30<br />\nCat:(汤姆，30)<br />\n 汤姆在吃鱼....<br />\n 名字是：汤姆，年龄是：30<br />\n<strong>str</strong> (self) 的返回结果可读性强。也就是说，<strong>str</strong> 的意义是得到便于人们阅读的信息，就像下面的 '2019-10-11' 一样。</p>\n<p><strong>repr</strong> (self) 的返回结果应更准确。怎么说，<strong>repr</strong> 存在的目的在于调试，便于开发者使用。</p>\n<p>【例子】</p>\n<p>import datetime<br />\n​<br />\ntoday = datetime.date.today()<br />\nprint(str(today))  # 2019-10-11<br />\nprint(repr(today))  # datetime.date(2019, 10, 11)<br />\nprint('%s' %today)  # 2019-10-11<br />\nprint('%r' %today)  # datetime.date(2019, 10, 11)<br />\n2020-08-01<br />\ndatetime.date(2020, 8, 1)<br />\n2020-08-01<br />\ndatetime.date(2020, 8, 1)<br />\n 算术运算符<br />\n类型工厂函数，指的是 “不通过类而是通过函数来创建对象”。</p>\n<p>【例子】</p>\n<p>class C:<br />\npass<br />\n​<br />\n​<br />\nprint(type(len))  # &lt;class 'builtin_function_or_method'&gt;<br />\nprint(type(dir))  # &lt;class 'builtin_function_or_method'&gt;<br />\nprint(type(int))  # &lt;class 'type'&gt;<br />\nprint(type(list))  # &lt;class 'type'&gt;<br />\nprint(type(tuple))  # &lt;class 'type'&gt;<br />\nprint(type(C))  # &lt;class 'type'&gt;<br />\nprint(int('123'))  # 123<br />\n​</p>\n<h1 id=\"这个例子中list工厂函数把一个元祖对象加工成了一个列表对象\"><a class=\"anchor\" href=\"#这个例子中list工厂函数把一个元祖对象加工成了一个列表对象\">#</a> 这个例子中 list 工厂函数把一个元祖对象加工成了一个列表对象。</h1>\n<p>print(list((1, 2, 3)))  # [1, 2, 3]<br />\n&lt;class 'builtin_function_or_method'&gt;<br />\n&lt;class 'builtin_function_or_method'&gt;<br />\n&lt;class 'type'&gt;<br />\n&lt;class 'type'&gt;<br />\n&lt;class 'type'&gt;<br />\n&lt;class 'type'&gt;<br />\n123<br />\n[1, 2, 3]<br />\n<strong>add</strong> (self, other) 定义加法的行为：+<br />\n<strong>sub</strong> (self, other) 定义减法的行为：-<br />\n【例子】</p>\n<p>class MyClass:<br />\n​<br />\ndef <strong>init</strong>(self, height, weight):<br />\nself.height = height<br />\nself.weight = weight<br />\n​<br />\n# 两个对象的长相加，宽不变。返回一个新的类<br />\n def <strong>add</strong>(self, others):<br />\nreturn MyClass(self.height + others.height, self.weight + others.weight)<br />\n​<br />\n# 两个对象的宽相减，长不变。返回一个新的类<br />\n def <strong>sub</strong>(self, others):<br />\nreturn MyClass(self.height - others.height, self.weight - others.weight)<br />\n​<br />\n# 说一下自己的参数<br />\n def intro (self):<br />\nprint (&quot;高为&quot;, self.height, &quot;重为&quot;, self.weight)<br />\n​<br />\n​<br />\ndef main():<br />\na = MyClass(height=10, weight=5)<br />\na.intro()<br />\n​<br />\nb = MyClass(height=20, weight=10)<br />\nb.intro()<br />\n​<br />\nc = b - a<br />\nc.intro()<br />\n​<br />\nd = a + b<br />\nd.intro()<br />\n​<br />\n​<br />\nif <strong>name</strong> == '<strong>main</strong>':<br />\nmain()<br />\n​</p>\n<h1 id=\"高为-10-重为-5\"><a class=\"anchor\" href=\"#高为-10-重为-5\">#</a> 高为 10  重为 5</h1>\n<h1 id=\"高为-20-重为-10\"><a class=\"anchor\" href=\"#高为-20-重为-10\">#</a> 高为 20  重为 10</h1>\n<h1 id=\"高为-10-重为-5-2\"><a class=\"anchor\" href=\"#高为-10-重为-5-2\">#</a> 高为 10  重为 5</h1>\n<h1 id=\"高为-30-重为-15\"><a class=\"anchor\" href=\"#高为-30-重为-15\">#</a> 高为 30  重为 15</h1>\n<p>高为 10  重为 5<br />\n 高为 20  重为 10<br />\n 高为 10  重为 5<br />\n 高为 30  重为 15<br />\n<strong>mul</strong> (self, other) 定义乘法的行为：*<br />\n<strong>truediv</strong> (self, other) 定义真除法的行为：/<br />\n<strong>floordiv</strong> (self, other) 定义整数除法的行为：//<br />\n<strong>mod</strong> (self, other) 定义取模算法的行为：%<br />\n<strong>divmod</strong> (self, other) 定义当被 divmod () 调用时的行为<br />\n divmod (a, b) 把除数和余数运算结果结合起来，返回一个包含商和余数的元组 (a //b, a % b)。<br />\n【例子】</p>\n<p>print(divmod(7, 2))  # (3, 1)<br />\nprint(divmod(8, 2))  # (4, 0)<br />\n(3, 1)<br />\n(4, 0)<br />\n<strong>pow</strong> (self, other [, module]) 定义当被 power () 调用或 ** 运算时的行为<br />\n<strong> lshift</strong> (self, other) 定义按位左移位的行为：&lt;&lt;<br />\n<strong>rshift</strong> (self, other) 定义按位右移位的行为：&gt;&gt;<br />\n<strong>and</strong> (self, other) 定义按位与操作的行为：&amp;<br />\n<strong>xor</strong> (self, other) 定义按位异或操作的行为：^<br />\n<strong>or</strong> (self, other) 定义按位或操作的行为：|<br />\n 反算术运算符<br />\n反运算魔方方法，与算术运算符保持一一对应，不同之处就是反运算的魔法方法多了一个 “r”。当文件左操作不支持相应的操作时被调用。</p>\n<p><strong>radd</strong> (self, other) 定义加法的行为：+<br />\n<strong>rsub</strong> (self, other) 定义减法的行为：-<br />\n<strong>rmul</strong> (self, other) 定义乘法的行为：*<br />\n<strong>rtruediv</strong> (self, other) 定义真除法的行为：/<br />\n<strong>rfloordiv</strong> (self, other) 定义整数除法的行为：//<br />\n<strong>rmod</strong> (self, other) 定义取模算法的行为：%<br />\n<strong>rdivmod</strong> (self, other) 定义当被 divmod () 调用时的行为<br />\n<strong> rpow</strong> (self, other [, module]) 定义当被 power () 调用或 ** 运算时的行为<br />\n<strong> rlshift</strong> (self, other) 定义按位左移位的行为：&lt;&lt;<br />\n<strong>rrshift</strong> (self, other) 定义按位右移位的行为：&gt;&gt;<br />\n<strong>rand</strong> (self, other) 定义按位与操作的行为：&amp;<br />\n<strong>rxor</strong> (self, other) 定义按位异或操作的行为：^<br />\n<strong>ror</strong> (self, other) 定义按位或操作的行为：|<br />\na + b</p>\n<p>这里加数是 a，被加数是 b，因此是 a 主动，反运算就是如果 a 对象的__add__() 方法没有实现或者不支持相应的操作，那么 Python 就会调用 b 的__radd__() 方法。</p>\n<p>【例子】</p>\n<p>class Nint(int):<br />\ndef <strong>radd</strong>(self, other):<br />\nreturn int.<strong>sub</strong> (other, self) # 注意 self 在后面<br />\n​<br />\n​<br />\na = Nint(5)<br />\nb = Nint(3)<br />\nprint(a + b)  # 8<br />\nprint(1 + b)  # -2<br />\n8<br />\n-2<br />\n 增量赋值运算符<br />\n<strong> iadd</strong> (self, other) 定义赋值加法的行为：+=<br />\n<strong>isub</strong> (self, other) 定义赋值减法的行为：-=<br />\n<strong>imul</strong> (self, other) 定义赋值乘法的行为：*=<br />\n<strong>itruediv</strong> (self, other) 定义赋值真除法的行为：/=<br />\n<strong>ifloordiv</strong> (self, other) 定义赋值整数除法的行为：//=<br />\n<strong>imod</strong> (self, other) 定义赋值取模算法的行为：%=<br />\n<strong>ipow</strong> (self, other [, modulo]) 定义赋值幂运算的行为：**=<br />\n<strong>ilshift</strong> (self, other) 定义赋值按位左移位的行为：&lt;&lt;=<br />\n<strong>irshift</strong> (self, other) 定义赋值按位右移位的行为：&gt;&gt;=<br />\n<strong>iand</strong> (self, other) 定义赋值按位与操作的行为：&amp;=<br />\n<strong>ixor</strong> (self, other) 定义赋值按位异或操作的行为：^=<br />\n<strong>ior</strong> (self, other) 定义赋值按位或操作的行为：|=<br />\n 一元运算符<br />\n<strong> neg</strong> (self) 定义正号的行为：+x<br />\n<strong>pos</strong> (self) 定义负号的行为：-x<br />\n<strong>abs</strong> (self) 定义当被 abs () 调用时的行为<br />\n<strong> invert</strong> (self) 定义按位求反的行为：~x<br />\n 属性访问<br />\n<strong> getattr</strong> (self, name): 定义当用户试图获取一个不存在的属性时的行为。<br />\n<strong>getattribute</strong> (self, name)：定义当该类的属性被访问时的行为（先调用该方法，查看是否存在该属性，若不存在，接着去调用__getattr__）。<br />\n<strong>setattr</strong> (self, name, value)：定义当一个属性被设置时的行为。<br />\n<strong>delattr</strong> (self, name)：定义当一个属性被删除时的行为。<br />\n【例子】</p>\n<p>class C:<br />\ndef <strong>getattribute</strong>(self, item):<br />\nprint('<strong>getattribute</strong>')<br />\nreturn super().<strong>getattribute</strong>(item)<br />\n​<br />\ndef <strong>getattr</strong>(self, item):<br />\nprint('<strong>getattr</strong>')<br />\n​<br />\ndef <strong>setattr</strong>(self, key, value):<br />\nprint('<strong>setattr</strong>')<br />\nsuper().<strong>setattr</strong>(key, value)<br />\n​<br />\ndef <strong>delattr</strong>(self, item):<br />\nprint('<strong>delattr</strong>')<br />\nsuper().<strong>delattr</strong>(item)<br />\n​<br />\n​<br />\nc = C()<br />\nc.x</p>\n<h1 id=\"getattribute\"><a class=\"anchor\" href=\"#getattribute\">#</a> <strong>getattribute</strong></h1>\n<h1 id=\"getattr\"><a class=\"anchor\" href=\"#getattr\">#</a> <strong>getattr</strong></h1>\n<p>​<br />\nc.x = 1</p>\n<h1 id=\"setattr\"><a class=\"anchor\" href=\"#setattr\">#</a> <strong>setattr</strong></h1>\n<p>​<br />\ndel c.x</p>\n<h1 id=\"delattr\"><a class=\"anchor\" href=\"#delattr\">#</a> <strong>delattr</strong></h1>\n<p><strong>getattribute</strong><br />\n<strong>getattr</strong><br />\n<strong>setattr</strong><br />\n<strong>delattr</strong><br />\n 描述符<br />\n描述符就是将某种特殊类型的类的实例指派给另一个类的属性。</p>\n<p><strong>get</strong> (self, instance, owner) 用于访问属性，它返回属性的值。<br />\n<strong>set</strong> (self, instance, value) 将在属性分配操作中调用，不返回任何内容。<br />\n<strong>del</strong> (self, instance) 控制删除操作，不返回任何内容。<br />\n【例子】</p>\n<p>class MyDecriptor:<br />\ndef <strong>get</strong>(self, instance, owner):<br />\nprint('<strong>get</strong>', self, instance, owner)<br />\n​<br />\ndef <strong>set</strong>(self, instance, value):<br />\nprint('<strong>set</strong>', self, instance, value)<br />\n​<br />\ndef <strong>delete</strong>(self, instance):<br />\nprint('<strong>delete</strong>', self, instance)<br />\n​<br />\n​<br />\nclass Test:<br />\nx = MyDecriptor()<br />\n​<br />\n​<br />\nt = Test()<br />\nt.x</p>\n<h1 id=\"get-mainmydecriptor-object-at-0x000000ceaaeb6b00-maintest-object-at-0x000000ceabdc0898-class-maintest\"><a class=\"anchor\" href=\"#get-mainmydecriptor-object-at-0x000000ceaaeb6b00-maintest-object-at-0x000000ceabdc0898-class-maintest\">#</a> <strong>get</strong> &lt;<strong>main</strong>.MyDecriptor object at 0x000000CEAAEB6B00&gt; &lt;<strong>main</strong>.Test object at 0x000000CEABDC0898&gt; &lt;class '<strong>main</strong>.Test'&gt;</h1>\n<p>​<br />\nt.x = 'x-man'</p>\n<h1 id=\"set-mainmydecriptor-object-at-0x00000023687c6b00-maintest-object-at-0x00000023696b0940-x-man\"><a class=\"anchor\" href=\"#set-mainmydecriptor-object-at-0x00000023687c6b00-maintest-object-at-0x00000023696b0940-x-man\">#</a> <strong>set</strong> &lt;<strong>main</strong>.MyDecriptor object at 0x00000023687C6B00&gt; &lt;<strong>main</strong>.Test object at 0x00000023696B0940&gt; x-man</h1>\n<p>​<br />\ndel t.x</p>\n<h1 id=\"delete-mainmydecriptor-object-at-0x000000ec9b160a90-maintest-object-at-0x000000ec9b160b38\"><a class=\"anchor\" href=\"#delete-mainmydecriptor-object-at-0x000000ec9b160a90-maintest-object-at-0x000000ec9b160b38\">#</a> <strong>delete</strong> &lt;<strong>main</strong>.MyDecriptor object at 0x000000EC9B160A90&gt; &lt;<strong>main</strong>.Test object at 0x000000EC9B160B38&gt;</h1>\n<p><strong>get</strong> &lt;<strong>main</strong>.MyDecriptor object at 0x0000022008242668&gt; &lt;<strong>main</strong>.Test object at 0x00000220082427B8&gt; &lt;class '<strong>main</strong>.Test'&gt;<br />\n<strong>set</strong> &lt;<strong>main</strong>.MyDecriptor object at 0x0000022008242668&gt; &lt;<strong>main</strong>.Test object at 0x00000220082427B8&gt; x-man<br />\n<strong>delete</strong> &lt;<strong>main</strong>.MyDecriptor object at 0x0000022008242668&gt; &lt;<strong>main</strong>.Test object at 0x00000220082427B8&gt;<br />\n 定制序列<br />\n协议（Protocols）与其它编程语言中的接口很相似，它规定你哪些方法必须要定义。然而，在 Python 中的协议就显得不那么正式。事实上，在 Python 中，协议更像是一种指南。</p>\n<p>容器类型的协议</p>\n<p>如果说你希望定制的容器是不可变的话，你只需要定义__len__() 和__getitem__() 方法。<br />\n如果你希望定制的容器是可变的话，除了__len__() 和__getitem__() 方法，你还需要定义__setitem__() 和__delitem__() 两个方法。<br />\n【例子】编写一个不可改变的自定义列表，要求记录列表中每个元素被访问的次数。</p>\n<p>class CountList:<br />\ndef <strong>init</strong>(self, *args):<br />\nself.values = [x for x in args]<br />\nself.count = {}.fromkeys(range(len(self.values)), 0)<br />\n​<br />\ndef <strong>len</strong>(self):<br />\nreturn len(self.values)<br />\n​<br />\ndef <strong>getitem</strong>(self, item):<br />\nself.count[item] += 1<br />\nreturn self.values[item]<br />\n​<br />\n​<br />\nc1 = CountList(1, 3, 5, 7, 9)<br />\nc2 = CountList(2, 4, 6, 8, 10)<br />\nprint(c1[1])  # 3<br />\nprint(c2[2])  # 6<br />\nprint(c1[1] + c2[1])  # 7<br />\n​<br />\nprint(c1.count)</p>\n<h1 0:=\"\" 0,=\"\" 1:=\"\" 2,=\"\" 2:=\"\" 0,=\"\" 3:=\"\" 0,=\"\" 4:=\"\" 0=\"\" id=\"-7\"><a class=\"anchor\" href=\"#-7\">#</a> </h1>\n<p>​<br />\nprint(c2.count)</p>\n<h1 0:=\"\" 0,=\"\" 1:=\"\" 1,=\"\" 2:=\"\" 1,=\"\" 3:=\"\" 0,=\"\" 4:=\"\" 0=\"\" id=\"-8\"><a class=\"anchor\" href=\"#-8\">#</a> </h1>\n<p>3<br />\n6<br />\n7<br />\n{0: 0, 1: 2, 2: 0, 3: 0, 4: 0}<br />\n{0: 0, 1: 1, 2: 1, 3: 0, 4: 0}<br />\n<strong>len</strong> (self) 定义当被 len () 调用时的行为（返回容器中元素的个数）。<br />\n<strong>getitem</strong> (self, key) 定义获取容器中元素的行为，相当于 self [key]。<br />\n<strong>setitem</strong> (self, key, value) 定义设置容器中指定元素的行为，相当于 self [key] = value。<br />\n<strong>delitem</strong> (self, key) 定义删除容器中指定元素的行为，相当于 del self [key]。<br />\n【例子】编写一个可改变的自定义列表，要求记录列表中每个元素被访问的次数。</p>\n<p>class CountList:<br />\ndef <strong>init</strong>(self, *args):<br />\nself.values = [x for x in args]<br />\nself.count = {}.fromkeys(range(len(self.values)), 0)<br />\n​<br />\ndef <strong>len</strong>(self):<br />\nreturn len(self.values)<br />\n​<br />\ndef <strong>getitem</strong>(self, item):<br />\nself.count[item] += 1<br />\nreturn self.values[item]<br />\n​<br />\ndef <strong>setitem</strong>(self, key, value):<br />\nself.values[key] = value<br />\n​<br />\ndef <strong>delitem</strong>(self, key):<br />\ndel self.values[key]<br />\nfor i in range(0, len(self.values)):<br />\nif i &gt;= key:<br />\nself.count[i] = self.count[i + 1]<br />\nself.count.pop(len(self.values))<br />\n​<br />\n​<br />\nc1 = CountList(1, 3, 5, 7, 9)<br />\nc2 = CountList(2, 4, 6, 8, 10)<br />\nprint(c1[1])  # 3<br />\nprint(c2[2])  # 6<br />\nc2[2] = 12<br />\nprint(c1[1] + c2[2])  # 15<br />\nprint(c1.count)</p>\n<h1 0:=\"\" 0,=\"\" 1:=\"\" 2,=\"\" 2:=\"\" 0,=\"\" 3:=\"\" 0,=\"\" 4:=\"\" 0=\"\" id=\"-9\"><a class=\"anchor\" href=\"#-9\">#</a> </h1>\n<p>print(c2.count)</p>\n<h1 0:=\"\" 0,=\"\" 1:=\"\" 0,=\"\" 2:=\"\" 2,=\"\" 3:=\"\" 0,=\"\" 4:=\"\" 0=\"\" id=\"-10\"><a class=\"anchor\" href=\"#-10\">#</a> </h1>\n<p>del c1[1]<br />\nprint(c1.count)</p>\n<h1 0:=\"\" 0,=\"\" 1:=\"\" 0,=\"\" 2:=\"\" 0,=\"\" 3:=\"\" 0=\"\" id=\"-11\"><a class=\"anchor\" href=\"#-11\">#</a> </h1>\n<p>3<br />\n6<br />\n15<br />\n{0: 0, 1: 2, 2: 0, 3: 0, 4: 0}<br />\n{0: 0, 1: 0, 2: 2, 3: 0, 4: 0}<br />\n{0: 0, 1: 0, 2: 0, 3: 0}<br />\n 迭代器<br />\n迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。<br />\n迭代器是一个可以记住遍历的位置的对象。<br />\n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。<br />\n迭代器只能往前不会后退。<br />\n字符串，列表或元组对象都可用于创建迭代器：<br />\n【例子】</p>\n<p>string = 'lsgogroup'<br />\nfor c in string:<br />\nprint(c)<br />\n​<br />\n'''<br />\nl<br />\ns<br />\ng<br />\no<br />\ng<br />\nr<br />\no<br />\nu<br />\np<br />\n'''<br />\n​<br />\nfor c in iter(string):<br />\nprint(c)<br />\nl<br />\ns<br />\ng<br />\no<br />\ng<br />\nr<br />\no<br />\nu<br />\np<br />\nl<br />\ns<br />\ng<br />\no<br />\ng<br />\nr<br />\no<br />\nu<br />\np<br />\n【例子】</p>\n<p>links = {'B': ' 百度 ', 'A': ' 阿里 ', 'T': ' 腾讯 '}<br />\nfor each in links:<br />\nprint('%s -&gt; %s' % (each, links[each]))</p>\n<p>'''<br />\nB -&gt; 百度<br />\n A -&gt; 阿里<br />\n T -&gt; 腾讯<br />\n '''<br />\n​<br />\nfor each in iter(links):<br />\nprint('%s -&gt; %s' % (each, links[each]))<br />\n B -&gt; 百度<br />\n A -&gt; 阿里<br />\n T -&gt; 腾讯<br />\n B -&gt; 百度<br />\n A -&gt; 阿里<br />\n T -&gt; 腾讯<br />\n迭代器有两个基本的方法：iter () 和 next ()。<br />\niter (object) 函数用来生成迭代器。<br />\nnext (iterator [, default]) 返回迭代器的下一个项目。<br />\niterator -- 可迭代对象<br />\n default -- 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 StopIteration 异常。<br />\n【例子】</p>\n<p>links = {'B': ' 百度 ', 'A': ' 阿里 ', 'T': ' 腾讯 '}<br />\n​<br />\nit = iter(links)<br />\nwhile True:<br />\ntry:<br />\neach = next(it)<br />\nexcept StopIteration:<br />\nbreak<br />\nprint(each)<br />\n​</p>\n<h1 id=\"b\"><a class=\"anchor\" href=\"#b\">#</a> B</h1>\n<h1 id=\"a\"><a class=\"anchor\" href=\"#a\">#</a> A</h1>\n<h1 id=\"t\"><a class=\"anchor\" href=\"#t\">#</a> T</h1>\n<h2 id=\"it-iterlinksprintnextit-bprintnextit-aprintnextit-tprintnextit-stopiterationbatbat\"><a class=\"anchor\" href=\"#it-iterlinksprintnextit-bprintnextit-aprintnextit-tprintnextit-stopiterationbatbat\">#</a> ​<br />\nit = iter(links)<br />\nprint(next(it))  # B<br />\nprint(next(it))  # A<br />\nprint(next(it))  # T<br />\nprint(next(it))  # StopIteration<br />\nB<br />\nA<br />\nT<br />\nB<br />\nA<br />\nT</h2>\n<p>StopIteration                             Traceback (most recent call last)<br />\n&lt;ipython-input-2-682f811edce7&gt; in &lt;module&gt;()<br />\n17 print(next(it))  # A<br />\n18 print(next(it))  # T<br />\n---&gt; 19 print(next(it))  # StopIteration</p>\n<p>StopIteration:<br />\n 把一个类作为一个迭代器使用需要在类中实现两个魔法方法 <strong>iter</strong> () 与 <strong>next</strong>() 。</p>\n<p><strong>iter</strong> (self) 定义当迭代容器中的元素的行为，返回一个特殊的迭代器对象， 这个迭代器对象实现了 <strong>next</strong> () 方法并通过 StopIteration 异常标识迭代的完成。<br />\n<strong>next</strong> () 返回下一个迭代器对象。<br />\nStopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 <strong>next</strong> () 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。<br />\n【例子】</p>\n<p>class Fibs:<br />\ndef <strong>init</strong>(self, n=10):<br />\nself.a = 0<br />\nself.b = 1<br />\nself.n = n<br />\n​<br />\ndef <strong>iter</strong>(self):<br />\nreturn self<br />\n​<br />\ndef <strong>next</strong>(self):<br />\nself.a, self.b = self.b, self.a + self.b<br />\nif self.a &gt; self.n:<br />\nraise StopIteration<br />\nreturn self.a<br />\n​<br />\n​<br />\nfibs = Fibs(100)<br />\nfor each in fibs:<br />\nprint(each, end=' ')<br />\n​</p>\n<h1 id=\"1-1-2-3-5-8-13-21-34-55-89\"><a class=\"anchor\" href=\"#1-1-2-3-5-8-13-21-34-55-89\">#</a> 1 1 2 3 5 8 13 21 34 55 89</h1>\n<p>1 1 2 3 5 8 13 21 34 55 89<br />\n4.10 生成器</p>\n<p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。<br />\n跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。<br />\n在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值，并在下一次执行 next () 方法时从当前位置继续运行。<br />\n调用一个生成器函数，返回的是一个迭代器对象。<br />\n【例子】</p>\n<p>def myGen():<br />\nprint (' 生成器执行！')<br />\nyield 1<br />\nyield 2</p>\n<p>myG = myGen()<br />\nfor each in myG:<br />\nprint(each)<br />\n​<br />\n'''<br />\n 生成器执行！<br />\n1<br />\n2<br />\n'''<br />\n​<br />\nmyG = myGen()<br />\nprint(next(myG))</p>\n<h1 id=\"生成器执行\"><a class=\"anchor\" href=\"#生成器执行\">#</a> 生成器执行！</h1>\n<h1 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> 1</h1>\n<h2 id=\"printnextmyg-2printnextmyg-stopiteration生成器执行12生成器执行12\"><a class=\"anchor\" href=\"#printnextmyg-2printnextmyg-stopiteration生成器执行12生成器执行12\">#</a> ​<br />\nprint(next(myG))  # 2<br />\nprint(next(myG))  # StopIteration<br />\n 生成器执行！<br />\n1<br />\n2<br />\n 生成器执行！<br />\n1<br />\n2</h2>\n<p>StopIteration                             Traceback (most recent call last)<br />\n&lt;ipython-input-6-56bfa60ce8de&gt; in &lt;module&gt;()<br />\n14<br />\n15 print(next(myG))  # 2<br />\n---&gt; 16 print(next(myG))  # StopIteration</p>\n<p>StopIteration:<br />\n【例子】用生成器实现斐波那契数列。</p>\n<p>def libs(n):<br />\na = 0<br />\nb = 1<br />\nwhile True:<br />\na, b = b, a + b<br />\nif a &gt; n:<br />\nreturn<br />\nyield a<br />\n​<br />\n​<br />\nfor each in libs(100):<br />\nprint(each, end=' ')<br />\n​</p>\n<h1 id=\"1-1-2-3-5-8-13-21-34-55-89-2\"><a class=\"anchor\" href=\"#1-1-2-3-5-8-13-21-34-55-89-2\">#</a> 1 1 2 3 5 8 13 21 34 55 89</h1>\n<p>1 1 2 3 5 8 13 21 34 55 89</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/26/2020-1-26/",
            "url": "https://theprofessor249.github.io/2021/01/26/2020-1-26/",
            "title": "2020-1-26",
            "date_published": "2021-01-26T02:55:39.000Z",
            "content_html": "<p>2020-1-26<br />\n 开发出了 Hexo 站点</p>\n",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/26/%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD/",
            "url": "https://theprofessor249.github.io/2021/01/26/%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD/",
            "title": "特殊功能",
            "date_published": "2021-01-26T01:27:48.000Z",
            "content_html": "<p>links 链接块<br />\n本功能参考 NexT，基于 Hexo Tag 功能，用来建立友链或其他网址链接功能。</p>\n<p>文章中的使用格式：</p>\n<p>使用 links 标签块，包围 yml 语法书写的内容，字段包括<br />\n site\t站点名称\t必填<br />\n owner\t管理员名字\t可选，默认为 site 的值<br />\n url\t\t站点链接\t必填<br />\n desc\t站点描述\t可选，默认为 url 的值<br />\n image\t站点图片\t可选，默认为 images/404.png<br />\ncolor\t方块颜色\t可选，默认为 #666</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼0--<span class=\"token operator\">></span></pre></td></tr></table></figure><p>举个栗子：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼1--<span class=\"token operator\">></span></pre></td></tr></table></figure><p><div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div><div class=\"item\" title=\"霜月琉璃\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div></p>\n<p>以上标签块里的内容，还可以保存到一个 yml 文件中，然后使用 linksfile 标签。<br />\n其中， path 位于 &lt;root&gt;/source 目录下。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼11--<span class=\"token operator\">></span></pre></td></tr></table></figure><p>举个栗子：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼12--<span class=\"token operator\">></span></pre></td></tr></table></figure><p>code 代码块</p>\n<p>使用 markdown-it-prism 进行代码高亮，支持显示行号、行高亮 mark 、命令行提示符 command 、代码块标题。</p>\n<p>基本格式： [language] [title] [url] [link text] [mark] [command]</p>\n<p>选项\t描述\t默认值<br />\n language</p>\n<p>支持的语言戳此<br />\n如果不需要代码高亮，但希望显示代码块样式，则设为 raw<br />\n 留空或设为 info ，将不显示代码高亮和代码块样式<br />\n null</p>\n<p>title\t代码块的标题文字\tnull<br />\nurl\t代码块标题右侧显示的链接\tnull<br />\nlink text\t上述链接显示的标题\tlink<br />\nmark</p>\n<p>行高亮显示，格式为 mark: 行号，行号开始 - 行号结束，其他行号 。<br />\n例如 mark:1,4-7,10 ，将高亮显示第 1、4、5、6、7、10 行</p>\n<p>null</p>\n<p>command</p>\n<p>命令行提示符，格式为 command:(&quot;提示内容&quot;: 行号，行号 ||&quot;提示内容&quot;: 行号开始 - 行号结束)<br />\n 例如 command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</p>\n<p>null</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>```java 行高亮 https://shoka.lostyu.me 参考链接 mark:1,6-7</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">import</span> java.util.Scanner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Scanner <span class=\"token keyword\">in</span> <span class=\"token operator\">=</span> new Scanner <span class=\"token punctuation\">(</span>System.in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println <span class=\"token punctuation\">(</span>in.nextLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> + <span class=\"token string\">\"world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">ls</span> -la</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> java.util.Scanner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Scanner <span class=\"token keyword\">in</span> <span class=\"token operator\">=</span> new Scanner<span class=\"token punctuation\">(</span>System.in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>in.nextLine<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> + <span class=\"token string\">\" world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ls</span> -la</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><p>quiz 练习题与答案<br />\n这个功能是用来显示练习题的。<br />\n需要在 Front Matter 中添加 quiz: true ，以正确显示题型标签。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 练习题与答案</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>quiz: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span>. 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 <span class=\"token punctuation\">&#123;</span>.quiz .true<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span>. 有基类 <span class=\"token variable\"><span class=\"token variable\">`</span>SHAPE<span class=\"token variable\">`</span></span>，派生类 <span class=\"token variable\"><span class=\"token variable\">`</span>CIRCLE<span class=\"token variable\">`</span></span>，声明如下变量：  <span class=\"token punctuation\">&#123;</span>.quiz .multi<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ``<span class=\"token variable\"><span class=\"token variable\">`</span>cpp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    SHAPE shape1,*p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    CIRCLE circle1,*q1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    下列哪些项是 “派生类对象替换基类对象”。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    - <span class=\"token variable\">`</span></span>p1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>circle1<span class=\"token punctuation\">;</span><span class=\"token variable\"><span class=\"token variable\">`</span> <span class=\"token punctuation\">&#123;</span>.correct<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    - <span class=\"token variable\">`</span></span>q1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>shape1<span class=\"token punctuation\">;</span><span class=\"token variable\"><span class=\"token variable\">`</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    - <span class=\"token variable\">`</span></span>shape1<span class=\"token operator\">=</span>circle1<span class=\"token punctuation\">;</span><span class=\"token variable\"><span class=\"token variable\">`</span> <span class=\"token punctuation\">&#123;</span>.correct<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    - <span class=\"token variable\">`</span></span>circle1<span class=\"token operator\">=</span>shape1<span class=\"token punctuation\">;</span><span class=\"token variable\"><span class=\"token variable\">`</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.options<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">></span> - :heavy_check_mark: 令基类对象的指针指向派生类对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token operator\">></span> - :x: 派生类指针指向基类的引用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">></span> - :heavy_check_mark: 派生类对象给基类对象赋值</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">></span> - :x: 基类对象给派生类对象赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>.options<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">3</span>. 下列叙述正确的是 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.gap<span class=\"token punctuation\">&#125;</span> 。 <span class=\"token punctuation\">&#123;</span>.quiz<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    - 虚函数只能定义成无参函数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    - 虚函数不能有返回值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    - 能定义虚构造函数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    - A、B、C 都不对 <span class=\"token punctuation\">&#123;</span>.correct<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.options<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">10</span>. 如果定义 <span class=\"token variable\">`</span></span>int <span class=\"token assign-left variable\">e</span><span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span> double <span class=\"token assign-left variable\">f</span><span class=\"token operator\">=</span><span class=\"token number\">6.4</span>, <span class=\"token assign-left variable\">g</span><span class=\"token operator\">=</span><span class=\"token number\">8.9</span><span class=\"token punctuation\">;</span><span class=\"token variable\"><span class=\"token variable\">`</span>，则表达式 <span class=\"token variable\">`</span></span>f+int <span class=\"token punctuation\">(</span>e/3*int <span class=\"token punctuation\">(</span>f+g<span class=\"token punctuation\">)</span>/2<span class=\"token punctuation\">)</span>%4` 的值为 <span class=\"token punctuation\">[</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.gap<span class=\"token punctuation\">&#125;</span>。 <span class=\"token punctuation\">&#123;</span>.quiz .fill<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token operator\">></span> 注意运算顺序和数据类型</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">8.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.mistake<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"title-练习题与答案quiz-true\"><a class=\"anchor\" href=\"#title-练习题与答案quiz-true\">#</a> title: 练习题与答案<br />\n quiz: true</h2>\n<ol>\n<li class=\"quiz true\">\n<p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p>\n</li>\n<li class=\"quiz multi\">\n<p>有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： </p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>下列叙述正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz fill\">\n<p>如果定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br />\n<span class=\"mistake\"> 8.4</span><br />\n 有基类 SHAPE ，派生类 CIRCLE ，声明如下变量：</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1,*p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1,*q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用说明<br />\n本功能基于 markdown-it-bracketed-spans 和 markdown-it-attrs</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>标签\t含义</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.quiz<span class=\"token punctuation\">&#125;</span>\t选择题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.quiz .multi<span class=\"token punctuation\">&#125;</span>\t多选题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.quiz .true<span class=\"token punctuation\">&#125;</span>\t正确的判断题</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.quiz .false<span class=\"token punctuation\">&#125;</span>\t错误的判断题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.quiz .fill<span class=\"token punctuation\">&#125;</span>\t填空题</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.gap<span class=\"token punctuation\">&#125;</span>\t空白下划线</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>答案内容<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.gap<span class=\"token punctuation\">&#125;</span>\t答案内容带下划线</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.options<span class=\"token punctuation\">&#125;</span>\tABCDE 选项</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.correct<span class=\"token punctuation\">&#125;</span>\t选择题的正确选项</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">></span>\t答案解析</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">8.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.mistake<span class=\"token punctuation\">&#125;</span>\t错题备注</pre></td></tr></table></figure><p>#emoji 绘文字</p>\n<p>本功能基于 markdown-it-emoji ，所有标签参考戳此</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:kissing_heart:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:ring:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:notes:</pre></td></tr></table></figure><p>effects 文字特效<br />\n本功能基于 markdown-it-ins 、 markdown-it-bracketed-spans 和 markdown-it-attrs</p>\n<p>本主题风格颜色通用样式：default、primary、success、info、warning、danger</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>++ 下划线 ++</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++ 波浪线 ++<span class=\"token punctuation\">&#123;</span>.wavy<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>++ 着重点 ++<span class=\"token punctuation\">&#123;</span>.dot<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>++ 紫色下划线 ++<span class=\"token punctuation\">&#123;</span>.primary<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>++ 绿色波浪线 ++<span class=\"token punctuation\">&#123;</span>.wavy .success<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>++ 黄色着重点 ++<span class=\"token punctuation\">&#123;</span>.dot .warning<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>~~ 删除线～～</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>~~ 红色删除线～～<span class=\"token punctuation\">&#123;</span>.danger<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">==</span> 荧光高亮 <span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>赤橙黄绿青蓝紫<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.rainbow<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>红色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.red<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>粉色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.pink<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>橙色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.orange<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>红色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.yellow<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>绿色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.green<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>靛青<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.aqua<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>蓝色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.blue<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>紫色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.purple<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>灰色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.grey<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>快捷键 <span class=\"token punctuation\">[</span>Ctrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.kbd<span class=\"token punctuation\">&#125;</span> + <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.kbd .red<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>H~2~0</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">29</span>^th^</pre></td></tr></table></figure><p>++ 下划线 ++<br />\n++ 波浪线 ++{.wavy}<br />\n++ 着重点 ++{.dot}<br />\n++ 紫色下划线 ++{.primary}<br />\n++ 绿色波浪线 ++{.wavy .success}<br />\n++ 黄色着重点 ++{.dot .warning}<br />\n~~ 删除线～～<br />\n~~ 红色删除线～～{.danger}<br />\n== 荧光高亮 ==<br />\n<span class=\"rainbow\"> 赤橙黄绿青蓝紫</span><br />\n<span class=\"red\">红色</span><br />\n<span class=\"pink\">粉色</span><br />\n<span class=\"orange\">橙色</span><br />\n<span class=\"yellow\">红色</span><br />\n<span class=\"green\">绿色</span><br />\n<span class=\"aqua\">靛青</span><br />\n<span class=\"blue\">蓝色</span><br />\n<span class=\"purple\">紫色</span><br />\n<span class=\"grey\">灰色</span><br />\n快捷键 <span class=\"kbd\">Ctrl</span> + <span class=\"kbd red\">C</span><br />\nH<sub>2</sub>0<br />\n29<sup>th</sup></p>\n<p>spoiler 隐藏文字<br />\n本功能基于 markdown-it-spoiler 和 markdown-it-attrs</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span> 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span> 模糊模糊模糊模糊模糊模糊！！<span class=\"token punctuation\">&#123;</span>.bulr<span class=\"token punctuation\">&#125;</span> ： 选中文字显示内容</pre></td></tr></table></figure><p>!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容<br />\n！！模糊模糊模糊模糊模糊模糊！！{.bulr} ： 选中文字显示内容</p>\n<p>#label 标签块<br />\n本功能基于 markdown-it-bracketed-spans 和 markdown-it-attrs<br />\n 有以下颜色可选</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>default<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>primary<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .primary<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>info<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .info<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>:heavy_check_mark:success<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .success<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>warning<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .warning<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>:broken_heart:danger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .danger<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"label\">default</span><br />\n<span class=\"label primary\">primary</span><br />\n<span class=\"label info\">info</span><br />\n<span class=\"label success\">✔️success</span><br />\n<span class=\"label warning\">warning</span><br />\n<span class=\"label danger\">💔danger</span></p>\n<p>note 提醒块<br />\n本功能基于 markdown-it-container<br />\n 标签为：</p>\n<p>开始行\t:::[风格颜色]<br />\n 结束行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:::default</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>默认默认</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:::primary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>基本基本</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>提示提示</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::success</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>成功成功</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>:::warning</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>警告警告</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>:::danger no-icon</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>:::</pre></td></tr></table></figure><div class=\"note default\">\n<p>默认默认</p>\n</div>\n<div class=\"note primary\">\n<p>基本基本</p>\n</div>\n<div class=\"note info\">\n<p>提示提示</p>\n</div>\n<div class=\"note success\">\n<p>成功成功</p>\n</div>\n<div class=\"note warning\">\n<p>警告警告</p>\n</div>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<div class=\"note danger no-icon\">\n<p>危险危险</p>\n</div>\n<p>tab 标签卡<br />\n本功能基于 markdown-it-container<br />\n 标签为：</p>\n<p>开始行\t;;;[同一 ID] [标签名称]<br />\n 结束行\t;;;</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>id1 卡片 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里是卡片 <span class=\"token number\">1</span> 的内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>** 加粗 **</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>success<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .success<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼3--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>id1 卡片 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>这里是卡片 <span class=\"token number\">2</span> 的内容</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>- 第一行</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>- 第二行</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>id2 ②号标签卡片 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>这里是卡片 <span class=\"token number\">1</span> 的内容</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>id2 ②号标签卡片 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>这里是卡片 <span class=\"token number\">2</span> 的内容</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"tab\" data-id=\"id1\" data-title=\"卡片 1\">\n<p>这里是卡片 1 的内容<br />\n ** 加粗 **<br />\n<span class=\"label success\">success</span></p>\n<p><div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div></p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"卡片 2\">\n<p>这里是卡片 2 的内容</p>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片 1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片 2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n<p>#collapse 折叠块<br />\n本功能基于 markdown-it-container<br />\n 标签为：</p>\n<p>开始行\t+++[风格颜色] [标题文字]<br />\n 结束行\t+++</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+++ 默认默认 这里是一段文字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++ 下划线 ++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+++primary 紫色</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>参考信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- 第一行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>- 第二行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>+++info  蓝色</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>id3 卡片 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>这里是卡片 <span class=\"token number\">1</span> 的内容</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>id3 卡片 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>这里是卡片 <span class=\"token number\">2</span> 的内容</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>+++success 绿色</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼5--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>+++warning 黄色</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span> 警告警告警告警告警告！！<span class=\"token punctuation\">&#123;</span>.bulr<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">[</span>label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .success<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>+++danger 红色</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">[</span>danger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .danger<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+++</pre></td></tr></table></figure><details><summary>默认默认 这里是一段文字</summary><div>\n<p>++ 下划线 ++</p>\n</div></details>\n<details class=\"primary\"><summary>紫色</summary><div>\n<div class=\"note info\">\n<p>参考信息</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div></details>\n<details class=\"info\"><summary>蓝色</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片 1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片 2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n</div></details>\n<details class=\"success\"><summary>绿色</summary><div>\n<p><div class=\"links\"><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div></div></p>\n</div></details>\n<details class=\"warning\"><summary>黄色</summary><div>\n<p>!! 警告警告警告警告警告！！{.bulr}<br />\n<span class=\"label success\">label</span></p>\n</div></details>\n<details class=\"danger\"><summary>红色</summary><div>\n<p><span class=\"label danger\">danger</span></p>\n</div></details>\n<p>taskList 待办事项<br />\n本功能基于 markdown-it-task-checkbox 。<br />\n可以利用 markdown-it-attrs 添加风格颜色，只可以给 ul 标签添加，需要新建两行。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>- <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 这是一个小叉叉</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> 这是一个红色勾勾</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.danger<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 未完成</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>- <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> 完成</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>.primary<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> 未完成</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>- <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> 默认颜色</pre></td></tr></table></figure><ul class=\"task-list danger\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> 这是一个小叉叉</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 这是一个红色勾勾</label></li>\n</ul>\n<ul class=\"task-list primary\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> 未完成</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\"> 完成</label></li>\n</ul>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\" /><label for=\"cbx_4\"> 未完成</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_5\"> 默认颜色</label></li>\n</ul>\n<p>furigana 文字注音<br />\n原本用于日语汉字假名注音，但别的注音也可以。<br />\n为了兼容性，采用 markdown-it-ruby 的基本格式： <ruby>文字<rp> (</rp><rt>注音</rt><rp>)</rp></ruby> ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。<br />\n注音分隔基于 furigana-markdown-it 显示说明看这里</p>\n<p><ruby>取<rp> (</rp><rt>と</rt><rp>)</rp> り<rt></rt>返<rp> (</rp><rt>かえ</rt><rp>)</rp> す<rt></rt></ruby>\t取とり返かえす<br />\n<ruby>可愛<rp> (</rp><rt>かわい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby>\t可愛かわいい犬いぬ<br />\n<ruby>可<rp> (</rp><rt>か</rt><rp>)</rp> 愛<rp> (</rp><rt>わい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby>\t可か愛わいい犬いぬ<br />\n<ruby>アクセラレータ<rp> (</rp><rt>accelerator</rt><rp>)</rp></ruby>\tアクセラレータ accelerator<br />\n<ruby>accelerator<rp>(</rp><rt>アクセラレータ</rt><rp>)</rp></ruby>\taccelerator アクセラレータ<br />\n<ruby>食<rp> (</rp><rt>た</rt><rp>)</rp> べる<rt></rt></ruby>\t食たべる<br />\n<ruby>食べる<rp> (</rp><rt>たべる</rt><rp>)</rp></ruby>\t食べるたべる<br />\n<ruby>あ<rt>●</rt>い<rt>●</rt>う<rt>●</rt>え<rt>●</rt>お<rt>●</rt></ruby>\tあ●い●う●え●お●<br />\n<ruby>あ<rt>❤</rt>い<rt>❤</rt>う<rt>❤</rt>え<rt>❤</rt>お<rt>❤</rt></ruby>\tあ❤い❤う❤え❤お❤<br />\n<ruby>常用账号<rp> (</rp><rt>contact</rt><rp>)</rp></ruby>\t常用账号</p>\n<p>media 多媒体<br />\n本功能基于 Hexo Tag 功能，使用 media 标签，目前可选择两种类型，即 audio 和 video 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼7--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼8--<span class=\"token operator\">></span></pre></td></tr></table></figure><p>标签包绕一段 yml 格式的内容，格式与背景音乐的配置类似。</p>\n<p>亦可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼9--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--swig￼10--<span class=\"token operator\">></span></pre></td></tr></table></figure><p>math 数学公式<br />\n本功能基于 markdown-it-katex<br />\n 在 Front Matter 中添加 math: true 以支持 KaTex</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 数学公式显示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>math: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>行内公式：$<span class=\"token punctuation\">\\</span>sqrt <span class=\"token punctuation\">&#123;</span>3x-1<span class=\"token punctuation\">&#125;</span>+<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>+x<span class=\"token punctuation\">)</span>^2$</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>独立块显示：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token variable\">$$</span><span class=\"token punctuation\">\\</span>begin <span class=\"token punctuation\">&#123;</span>array<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">\\</span>nabla <span class=\"token punctuation\">\\</span>times <span class=\"token punctuation\">\\</span>vec <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>mathbf <span class=\"token punctuation\">&#123;</span>B<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> -<span class=\"token punctuation\">\\</span>, <span class=\"token punctuation\">\\</span>frac1c<span class=\"token punctuation\">\\</span>, <span class=\"token punctuation\">\\</span>frac <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>partial<span class=\"token punctuation\">\\</span>vec <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>mathbf <span class=\"token punctuation\">&#123;</span>E<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>partial t<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">=</span> <span class=\"token punctuation\">\\</span>frac <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">\\</span>pi<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">\\</span>vec <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>mathbf <span class=\"token punctuation\">&#123;</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>    <span class=\"token punctuation\">\\</span>nabla <span class=\"token punctuation\">\\</span>cdot <span class=\"token punctuation\">\\</span>vec <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>mathbf <span class=\"token punctuation\">&#123;</span>E<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">\\</span>pi <span class=\"token punctuation\">\\</span>rho <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">\\</span>nabla <span class=\"token punctuation\">\\</span>times <span class=\"token punctuation\">\\</span>vec <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>mathbf <span class=\"token punctuation\">&#123;</span>E<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">\\</span>, +<span class=\"token punctuation\">\\</span>, <span class=\"token punctuation\">\\</span>frac1c<span class=\"token punctuation\">\\</span>, <span class=\"token punctuation\">\\</span>frac <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>partial<span class=\"token punctuation\">\\</span>vec <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>mathbf <span class=\"token punctuation\">&#123;</span>B<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>partial t<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">\\</span>vec <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>mathbf <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">\\</span>nabla <span class=\"token punctuation\">\\</span>cdot <span class=\"token punctuation\">\\</span>vec <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">\\</span>mathbf <span class=\"token punctuation\">&#123;</span>B<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">\\</span>end <span class=\"token punctuation\">&#123;</span>array<span class=\"token punctuation\">&#125;</span><span class=\"token variable\">$$</span></pre></td></tr></table></figure><p>mermaid 流程图<br />\n本功能基于 markdown-it-mermaid<br />\n 在 Front Matter 中添加 mermaid: true 以支持 Mermaid</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 流程图显示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mermaid: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>```mermaid</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>graph LR</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    A <span class=\"token punctuation\">[</span>Square Rect<span class=\"token punctuation\">]</span> -- Link text --<span class=\"token operator\">></span> B <span class=\"token variable\"><span class=\"token punctuation\">((</span>Circle<span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    A --<span class=\"token operator\">></span> C <span class=\"token punctuation\">(</span>Round Rect<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    B --<span class=\"token operator\">></span> D <span class=\"token punctuation\">&#123;</span>Rhombus<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    C --<span class=\"token operator\">></span> D</pre></td></tr></table></figure><pre>Error: Could not find browser revision 818858. Run \"PUPPETEER_PRODUCT=firefox npm install\" or \"PUPPETEER_PRODUCT=firefox yarn install\" to download a supported Firefox browser binary.</pre><pre><code>---\ntitle: 流程图显示\nmermaid: true\n---\n\n```mermaid\ngraph LR\n    A [Square Rect] -- Link text --&gt; B ((Circle))\n    A --&gt; C (Round Rect)\n    B --&gt; D &#123;Rhombus&#125;\n    C --&gt; D\n</code></pre>\n<pre>Error: Could not find browser revision 818858. Run \"PUPPETEER_PRODUCT=firefox npm install\" or \"PUPPETEER_PRODUCT=firefox yarn install\" to download a supported Firefox browser binary.</pre>",
            "tags": []
        },
        {
            "id": "https://theprofessor249.github.io/2021/01/25/Linux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "url": "https://theprofessor249.github.io/2021/01/25/Linux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "title": "Linux搭建博客",
            "date_published": "2021-01-25T05:58:22.000Z",
            "content_html": "<p>Hexo 简介<br />\n Hexo 是一款基于 Node.js 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 和 Gitee 上，是搭建博客的首选框架。大家可以进入 hexo 官网进行详细查看，因为 Hexo 的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看</p>\n<p>安装 Git<br />\nGit 是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span> -y</pre></td></tr></table></figure><p>安装 nodejs<br />\nHexo 是基于 nodeJS 编写的，所以需要安装一下 nodeJs 和里面的 npm 工具</p>\n<p>wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> nodejs <span class=\"token function\">npm</span> -y</pre></td></tr></table></figure><p>安装完后，输入命令</p>\n<p>wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ node -v</pre></td></tr></table></figure><p>wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> -v</pre></td></tr></table></figure><p>检查是否安装成功</p>\n<p>更换 npm 源为淘宝源</p>\n<p>wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> registry https://registry.npm.taobao.org</pre></td></tr></table></figure><p>安装 hexo<br />\n 前面 git 和 nodejs 安装好后，就可以安装 hexo 了，先创建一个文件夹 filename，然后 cd 到这个文件夹下</p>\n<p>输入命令</p>\n<p>wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</pre></td></tr></table></figure><p>输入命令</p>\n<p>wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo -v</pre></td></tr></table></figure><p>查看版本信息</p>\n<p>初始化 hexo</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wp-block-code</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ hexo init filename<span class=\"token punctuation\">(</span>文件名随意定义<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>wp-block-code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> filename //进入这个文件夹</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>wp-block-code</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span> <span class=\"token comment\">#说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为 hexo,~/root/hexo 以下将使用这个文件夹）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ hexo init <span class=\"token comment\">#说明：自动在文件夹（hexo1）中创建项目所需的文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token comment\">#说明：安装依赖包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ hexo generate <span class=\"token comment\">#说明：构建，会在 hexo1 中创建 public 文件夹</span></pre></td></tr></table></figure><p>执行完以上命令后，会多出以下文件和文件夹<br />\n例如<br />\n新建完成后，指定文件夹目录下有：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_config.yml：站点的配置文件，需要备份</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>themes：主题文件夹，需要备份</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>source：博客文章的 .md 文件，需要备份</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>scaffolds：文章的模板，需要备份</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>package.json：安装包的名称，需要备份</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.gitignore：限定在 push 时哪些文件可以忽略，需要备份</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.git：主题和站点都有，标志这是一个 <span class=\"token function\">git</span> 项目，不需要备份</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>node_modules：是安装包的目录，在执行 <span class=\"token function\">npm</span> <span class=\"token function\">install</span> 的时候会重新生成，不需要备份</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>public：是 hexo g 生成的静态网页，不需要备份</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.deploy_git：同上，hexo g 也会生成，不需要备份</pre></td></tr></table></figure><p>db.json：文件，不需要备份<br />\n输入命令<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo g</pre></td></tr></table></figure><p>输入命令<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo s</pre></td></tr></table></figure><p>打开 hexo 的服务<br />\n在浏览器输入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ http://localhost:4000</pre></td></tr></table></figure><p>就可以看到你生成的博客<br />\n使用 ctrl+c 停止服务<br />\n Hexo+Github<br />\nGitHub 创建个人仓库<br />\n注册登录 github 官网，点击右上角加号，点击 New repository，新建仓库<br />\n创建一个和用户名相同的仓库，即 http://xxxx.github.io，其中 xxx 是 github 的用户名<br />\n点击 create repository<br />\nGit 初始化设置<br />\n输入命令<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"yourname\"</span></pre></td></tr></table></figure><p>wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"youremail\"</span></pre></td></tr></table></figure><p>yourname 是 github 用户名，youremail 是注册 github 的邮箱<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config user.name</pre></td></tr></table></figure><p>wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config user.email</pre></td></tr></table></figure><p>检查是否正确，输入命令<br />\n生成 SSH 添加到 GitHub<br />\n 输入命令，创建 SSH, 一路回车<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span></pre></td></tr></table></figure><p>查看 SSH KEY，输入命令<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</pre></td></tr></table></figure><p>复制 id_rsa.pub 里面的全部内容<br />\n在 github 的 setting 中，找到 SSH keys 的设置选项，点击 New SSH key，粘贴 id_rsa.pub 里面的全部内容<br />\n输入命令<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">ssh</span> -T git@github.com</pre></td></tr></table></figure><p>查看是否连接成功<br />\n打开站点配置文件 _config.yml，修改添加以下内容<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deploy:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  type: <span class=\"token function\">git</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  repo: git@github.com:yourgithubname/yourgithubname.github.io.git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  branch: master</pre></td></tr></table></figure><p>安装 deploy-git ，也就是部署的命令，这样才能用命令部署到 github<br />\nwp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</pre></td></tr></table></figure><p>输入命令<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo clean 第一次安装不用清缓存</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ hexo clean <span class=\"token operator\">&amp;&amp;</span>　hexo g -d 　缩写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ hexo g <span class=\"token operator\">=</span> hexo generate 生成静态文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ hexo generate -deploy 生成静态文件后立即部署网站</pre></td></tr></table></figure><p>打开下面的网址</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ http://yourname.github.io</pre></td></tr></table></figure><p>就可看到和<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAw\"> http://localhost:4000</span><br />\n 一样的了！<br />\n关联 Git 仓库<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> clone https://github.com/你的用户名/你的用户名.github.io.git</pre></td></tr></table></figure><p>执行之后会在当前目录生成'<span class=\"exturl\" data-url=\"aHR0cDovL3huLS02cXF2N2kxNG9mb3N5cmIuZ2l0aHViLmlv\"> 你的用户名.github.io</span>' 的文件夹，这是关联 github 仓库的文件夹，需要上传的文件都会移动到这里<br />\n更多精彩内容请点击 hexo 官网<br />\n (附上我的博客链接)<br />\nHexo+Gitee<br />\nGitee 创建个人仓库<br />\n打开码云官网，注册登陆，创建项目，点击右上角加号，新建仓库<br />\n开启 Gitee Pages<br />\n 点击启动<br />\n启动后，点击蓝色链接打开网址<br />\n初始化 Git 设置<br />\n输入命令<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"这里输入你的Gitee注册名\"</span>// 按回车</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"这里输你的Gitee邮箱\"</span></pre></td></tr></table></figure><p>生成 SSH 密钥文件<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ ssh-keygen -t rsa -C <span class=\"token string\">\"你的Gitee注册邮箱\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ // 可不输入，三个回车</pre></td></tr></table></figure><p>复制粘贴到码云<br />\n配置 _config.yml<br />\n 点击复制克隆 / 下载里面的 https 的内容<br />\n修改添加_config.yml 以下内容<br />\n wp-block-code</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>url: Gitee Pages 服务，网站地址： https://空间名.gitee.io/仓库名<span class=\"token punctuation\">(</span>粘贴<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root: /仓库名/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>wp-block-code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>deploy:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  type: <span class=\"token function\">git</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  repo: https://gitee.com/空间名/仓库名<span class=\"token punctuation\">(</span>粘贴<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  branch: master</pre></td></tr></table></figure><p>基础配置可以参考官方文档的配置说明</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ wp-block-code</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ hexo clean <span class=\"token operator\">&amp;&amp;</span>　hexo g -d 　缩写 清缓存</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ hexo g <span class=\"token operator\">=</span> hexo generate 生成静态文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ hexo generate -deploy 生成静态文件后立即部署网站自动上传到gitee</pre></td></tr></table></figure><p>打开 Gitee Pages 服务 ，每次上传或改动，都要点击 “更新” 打开网址访问</p>\n",
            "tags": []
        }
    ]
}