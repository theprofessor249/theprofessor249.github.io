<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://theprofessor249.github.io</id>
    <title>培新 • Posts by &#34;python&#34; category</title>
    <link href="https://theprofessor249.github.io" />
    <updated>2021-01-29T13:39:15.000Z</updated>
    <entry>
        <id>https://theprofessor249.github.io/2021/01/29/python-1-day/</id>
        <title>python_1_day</title>
        <link rel="alternate" href="https://theprofessor249.github.io/2021/01/29/python-1-day/"/>
        <content type="html">&lt;p&gt;Python 入门 (上)&lt;br /&gt;
 简介&lt;/p&gt;
&lt;p&gt;变量、运算符与数据类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;li&gt;运算符&lt;/li&gt;
&lt;li&gt;变量和赋值&lt;/li&gt;
&lt;li&gt;数据类型与转换&lt;/li&gt;
&lt;li&gt;print () 函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;位运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原码、反码和补码&lt;/li&gt;
&lt;li&gt;按位运算&lt;/li&gt;
&lt;li&gt;利用位运算实现快速计算&lt;/li&gt;
&lt;li&gt;利用位运算实现整数集合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;条件语句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if 语句&lt;/li&gt;
&lt;li&gt;if - else 语句&lt;/li&gt;
&lt;li&gt;if - elif - else 语句&lt;/li&gt;
&lt;li&gt;assert 关键词&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;循环语句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;while 循环&lt;/li&gt;
&lt;li&gt;while - else 循环&lt;/li&gt;
&lt;li&gt;for 循环&lt;/li&gt;
&lt;li&gt;for - else 循环&lt;/li&gt;
&lt;li&gt;range () 函数&lt;/li&gt;
&lt;li&gt;enumerate () 函数&lt;/li&gt;
&lt;li&gt;break 语句&lt;/li&gt;
&lt;li&gt;continue 语句&lt;/li&gt;
&lt;li&gt;pass 语句&lt;/li&gt;
&lt;li&gt;推导式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;异常处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 标准异常总结&lt;/li&gt;
&lt;li&gt;Python 标准警告总结&lt;/li&gt;
&lt;li&gt;try - except 语句&lt;/li&gt;
&lt;li&gt;try - except - finally 语句&lt;/li&gt;
&lt;li&gt;try - except - else 语句&lt;/li&gt;
&lt;li&gt;raise 语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简介&lt;br /&gt;
 Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;本实验包括以下内容：&lt;/p&gt;
&lt;p&gt;变量、运算符与数据类型&lt;br /&gt;
注释&lt;br /&gt;
运算符&lt;br /&gt;
变量和赋值&lt;br /&gt;
数据类型与转换&lt;br /&gt;
 print () 函数&lt;br /&gt;
位运算&lt;br /&gt;
原码、反码和补码&lt;br /&gt;
按位非操作～&lt;br /&gt;
 按位与操作 &amp;amp;&lt;br /&gt;
 按位或操作 |&lt;br /&gt;
 按位异或操作 ^&lt;br /&gt;
 按位左移操作 &amp;lt;&amp;lt;&lt;br /&gt;
按位右移操作&amp;gt;&amp;gt;&lt;br /&gt;
 利用位运算实现快速计算&lt;br /&gt;
利用位运算实现整数集合&lt;br /&gt;
条件语句&lt;br /&gt;
 if 语句&lt;br /&gt;
 if - else 语句&lt;br /&gt;
 if - elif - else 语句&lt;br /&gt;
 assert 关键词&lt;br /&gt;
循环语句&lt;br /&gt;
 while 循环&lt;br /&gt;
 while - else 循环&lt;br /&gt;
 for 循环&lt;br /&gt;
 for - else 循环&lt;br /&gt;
 range () 函数&lt;br /&gt;
 enumerate () 函数&lt;br /&gt;
 break 语句&lt;br /&gt;
 continue 语句&lt;br /&gt;
 pass 语句&lt;br /&gt;
推导式&lt;br /&gt;
异常处理&lt;br /&gt;
 Python 标准异常总结&lt;br /&gt;
 Python 标准警告总结&lt;br /&gt;
 try - except 语句&lt;br /&gt;
 try - except - finally 语句&lt;br /&gt;
 try - except - else 语句&lt;br /&gt;
 raise 语句&lt;br /&gt;
变量、运算符与数据类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注释&lt;br /&gt;
在 Python 中，# 表示注释，作用于整行。&lt;br /&gt;
【例子】单行注释&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-pypthon&#34;&gt;# 这是一个注释
print(&amp;quot;Hello world&amp;quot;)
​
# Hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hello world&lt;br /&gt;
&#39;&#39;&#39; &#39;&#39;&#39; 或者 &amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot; 表示区间注释，在三引号之间的所有内容被注释&lt;br /&gt;
【例子】多行注释&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这是多行注释，用三个单引号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这是多行注释，用三个单引号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这是多行注释，用三个单引号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello china&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Hello china0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这是多行注释，用三个双引号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这是多行注释，用三个双引号 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这是多行注释，用三个双引号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;print(&amp;quot;hello china&amp;quot;)&lt;/p&gt;
&lt;h1 id=&#34;hello-china&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hello-china&#34;&gt;#&lt;/a&gt; hello china&lt;/h1&gt;
&lt;p&gt;Hello china&lt;br /&gt;
hello china&lt;br /&gt;
【我是测试题 1】请在下方代码块中打印 (print) 出 hello + 你的姓名&lt;br /&gt;
如：print (&amp;quot;hello 老表&amp;quot;)&lt;/p&gt;
&lt;h1 id=&#34;写下你的答案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写下你的答案&#34;&gt;#&lt;/a&gt; 写下你的答案&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
2. 运算符&lt;br /&gt;
算术运算符&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;操作符	名称	示例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;	加	&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;	减	&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;	乘	&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;	除	&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;	整除（地板除）	&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;	取余	&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;	幂	&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0.75&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2&lt;br /&gt;
1&lt;br /&gt;
12&lt;br /&gt;
0.75&lt;br /&gt;
0&lt;br /&gt;
3&lt;br /&gt;
8&lt;br /&gt;
 比较运算符&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;操作符	名称	示例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;	大于	&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt;	大于等于	&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;	小于	&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;	小于等于	&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;	等于	&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;	不等于	&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;True&lt;br /&gt;
False&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
False&lt;br /&gt;
True&lt;br /&gt;
 逻辑运算符&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;操作符	名称	示例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt;	与	&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;or&lt;/span&gt;	或	&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt;	非	&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;True&lt;br /&gt;
False&lt;br /&gt;
False&lt;br /&gt;
 位运算符&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;操作符	名称	示例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;	按位取反	&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;	按位与	&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;`	`	按位或&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;	按位异或	&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;	左移	&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;	右移	&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】有关二进制的运算，参见 “位运算” 部分的讲解。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b100&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# -0b101 -5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b100 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b101 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b1 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b10000 16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b1 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;0b100&lt;br /&gt;
0b101&lt;br /&gt;
-0b101 -5&lt;br /&gt;
0b100 4&lt;br /&gt;
0b101 5&lt;br /&gt;
0b1 1&lt;br /&gt;
0b10000 16&lt;br /&gt;
0b1 1&lt;br /&gt;
 三元运算符&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    small &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    small &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;small&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;4&lt;br /&gt;
 有了这个三元操作符的条件表达式，你可以使用一条语句来完成以上的条件判断和赋值操作。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;small &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; y &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;small&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;4&lt;br /&gt;
 其他运算符&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;操作符	名称	示例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;	存在	&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;	不存在	&lt;span class=&#34;token string&#34;&gt;&#39;h&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt;	是	&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt;	不是	&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;letters &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; letters&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; exists&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;h&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; letters&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;h&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; not exists&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# A exists&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# h not exists&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;A exists&lt;br /&gt;
h not exists&lt;br /&gt;
【例子】比较的两个变量均指向不可变类型。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;True True&lt;br /&gt;
False False&lt;br /&gt;
【例子】比较的两个变量均指向可变类型。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;False True&lt;br /&gt;
True False&lt;br /&gt;
 注意：&lt;/p&gt;
&lt;p&gt;is, is not 对比的是两个变量的内存地址&lt;br /&gt;
 ==, != 对比的是两个变量的值&lt;br /&gt;
比较的两个变量，指向的都是地址不可变的类型（str 等），那么 is，is not 和 ==，！= 是完全等价的。&lt;br /&gt;
对比的两个变量，指向的是地址可变的类型（list，dict，tuple 等），则两者是有区别的。&lt;br /&gt;
运算符的优先级&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;运算符	描述&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;	指数（最高优先级）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;	按位翻转，一元加号和减号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt;	乘，除，取模和取整除）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;	加法减法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;	右移，左移运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;	位‘AND’&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;	位运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt;	比较运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;	等于运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;//=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt;	赋值运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt;	身份运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;	成员运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;or&lt;/span&gt;	逻辑运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# -9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0.1111111111111111&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# -12.5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;-9&lt;br /&gt;
0.1111111111111111&lt;br /&gt;
0&lt;br /&gt;
-12.5&lt;br /&gt;
True&lt;br /&gt;
【我是测试题 2】下面这段代码的运行结果是什么？&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 运行一下结果就出来了&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;变量和赋值&lt;br /&gt;
在使用变量之前，需要对其先赋值。&lt;br /&gt;
变量名可以包括字母、数字、下划线、但变量名不能以数字开头。&lt;br /&gt;
Python 变量名是大小写敏感的，foo != Foo。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;teacher &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;老马的程序人生&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;teacher&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 老马的程序人生&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;老马的程序人生&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;first &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;second &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;third &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; first &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; second&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;third&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;5&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;myTeacher &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;老马的程序人生&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yourTeacher &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;小马的程序人生&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ourTeacher &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; myTeacher &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; yourTeacher&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ourTeacher&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 老马的程序人生，小马的程序人生&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;老马的程序人生，小马的程序人生&lt;br /&gt;
【我是测试题 3】运行下面一段代码看看结果是什么？&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 运行一下就好啦&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;set_1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;欢迎&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;学习&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;set_1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; 数据类型与转换&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;类型	名称	示例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;	整型 &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;int&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;	&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;876&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;	浮点型&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;float&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;	&lt;span class=&#34;token number&#34;&gt;3.149&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11.11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;	布尔型&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;bool&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;	&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;整型&lt;/p&gt;
&lt;p&gt;【例子】通过 print () 可看出 a 的值，以及类 (class) 是 int。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1031&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1031 &amp;lt;class &#39;int&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1031 &amp;lt;class &#39;int&#39;&amp;gt;&lt;/p&gt;
&lt;p&gt;Python 里面万物皆对象（object），整型也不例外，只要是对象，就有相应的属性 （attributes） 和方法（methods）。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [&#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__bool__&#39;, &#39;__ceil__&#39;, &#39;__class__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__float__&#39;, &#39;__floor__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__getattribute__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__index__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__int__&#39;, &#39;__invert__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__le__&#39;, &#39;__lshift__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__rfloordiv__&#39;, &#39;__rlshift__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rrshift__&#39;, &#39;__rshift__&#39;, &#39;__rsub__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__trunc__&#39;, &#39;__xor__&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;bit_length&#39;, &#39;conjugate&#39;, &#39;denominator&#39;, &#39;from_bytes&#39;, &#39;imag&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &#39;numerator&#39;, &#39;real&#39;, &#39;to_bytes&#39;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__abs__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__add__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__and__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__bool__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__ceil__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__class__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__delattr__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__dir__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__divmod__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__doc__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__eq__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__float__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__floor__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__floordiv__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__format__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__ge__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__getattribute__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__getnewargs__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__gt__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__hash__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__index__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__init__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__init_subclass__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__int__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__invert__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__le__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__lshift__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__lt__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__mod__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__mul__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__ne__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__neg__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__new__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__or__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__pos__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__pow__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__radd__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rand__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rdivmod__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__reduce__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__reduce_ex__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__repr__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rfloordiv__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rlshift__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rmod__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rmul__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__ror__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__round__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rpow__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rrshift__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rshift__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rsub__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rtruediv__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__rxor__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__setattr__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__sizeof__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__str__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__sub__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__subclasshook__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__truediv__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__trunc__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__xor__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;bit_length&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;conjugate&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;denominator&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;from_bytes&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;imag&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;numerator&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;real&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;to_bytes&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;对它们有个大概印象就可以了，具体怎么用，需要哪些参数 （argument），还需要查文档。看个 bit_length () 的例子。&lt;/p&gt;
&lt;p&gt;【例子】找到一个整数的二进制表示，再返回其长度。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1031&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b10000000111&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bit_length&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;0b10000000111&lt;br /&gt;
11&lt;br /&gt;
 浮点型&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1 &amp;lt;class &#39;int&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1.0 &amp;lt;class &#39;float&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.00000023&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.3e-7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2.3e-07&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2.3e-07&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1 &amp;lt;class &#39;int&#39;&amp;gt;&lt;br /&gt;
1.0 &amp;lt;class &#39;float&#39;&amp;gt;&lt;br /&gt;
2.3e-07&lt;br /&gt;
2.3e-07&lt;br /&gt;
 有时候我们想保留浮点型的小数点后 n 位。可以用 decimal 包里的 Decimal 对象和 getcontext () 方法来实现。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; decimal&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; decimal &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Decimal&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Python 里面有很多用途广泛的包 (package)，用什么你就引进 (import) 什么。包也是对象，也可以用上面提到的 dir (decimal) 来看其属性和方法。&lt;/p&gt;
&lt;p&gt;【例子】getcontext () 显示了 Decimal 对象的默认精度值是 28 位 (prec=28)。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; decimal&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;getcontext&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# capitals=1, clamp=0, flags=[], &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# traps=[InvalidOperation, DivisionByZero, Overflow])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Context&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;prec&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; rounding&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ROUND_HALF_EVEN&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Emin&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;999999&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Emax&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;999999&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; capitals&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; clamp&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; flags&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; traps&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;InvalidOperation&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; DivisionByZero&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Overflow&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Decimal&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; Decimal&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 0.3333333333333333333333333333&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;0.3333333333333333333333333333&lt;br /&gt;
【例子】使 1/3 保留 4 位，用 getcontext ().prec 来调整精度。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;decimal&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;getcontext&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prec &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Decimal&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; Decimal&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 0.3333&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;0.3333&lt;br /&gt;
 布尔型&lt;/p&gt;
&lt;p&gt;布尔 (boolean) 型变量只能取两个值，True 和 False。当把布尔型变量用在数字运算中，用 1 和 0 代表 True 和 False。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2&lt;br /&gt;
1&lt;br /&gt;
0&lt;br /&gt;
 除了直接给变量赋值 True 和 False，还可以用 bool (X) 来创建变量，其中 X 可以是&lt;/p&gt;
&lt;p&gt;基本类型：整型、浮点型、布尔型&lt;br /&gt;
容器类型：字符串、元组、列表、字典和集合&lt;br /&gt;
【例子】bool 作用在基本类型变量：X 只要不是整型 0、浮点型 0.0，bool (X) 就是 True，其余就是 False。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;int&#39;&gt; False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10.31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.00&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10.31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;float&#39;&gt; False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;bool&#39;&gt; False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&amp;lt;class &#39;int&#39;&amp;gt; False True&lt;br /&gt;
&amp;lt;class &#39;float&#39;&amp;gt; False True&lt;br /&gt;
&amp;lt;class &#39;bool&#39;&amp;gt; False True&lt;/p&gt;
&lt;p&gt;【例子】bool 作用在容器类型变量：X 只要不是空的变量，bool (X) 就是 True，其余就是 False。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;str&#39;&gt; False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;tuple&#39;&gt; False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;list&#39;&gt; False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;dict&#39;&gt; False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;set&#39;&gt; False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&amp;lt;class &#39;str&#39;&amp;gt; False True&lt;br /&gt;
&amp;lt;class &#39;tuple&#39;&amp;gt; False True&lt;br /&gt;
&amp;lt;class &#39;list&#39;&amp;gt; False True&lt;br /&gt;
&amp;lt;class &#39;dict&#39;&amp;gt; False True&lt;br /&gt;
&amp;lt;class &#39;set&#39;&amp;gt; False True&lt;/p&gt;
&lt;p&gt;确定 bool (X) 的值是 True 还是 False，就看 X 是不是空，空的话就是 False，不空的话就是 True。&lt;/p&gt;
&lt;p&gt;对于数值变量，0, 0.0 都可认为是空的。&lt;br /&gt;
对于容器变量，里面没元素就是空的。&lt;br /&gt;
获取类型信息&lt;/p&gt;
&lt;p&gt;获取类型信息 type (object)&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;5.2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;True&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
 注：&lt;/p&gt;
&lt;p&gt;type () 不会认为子类是一种父类类型，不考虑继承关系。&lt;br /&gt;
isinstance () 会认为子类是一种父类类型，考虑继承关系。&lt;br /&gt;
如果要判断两个类型是否相同推荐使用 isinstance ()。&lt;/p&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;p&gt;转换为整型 int (x, base=10)&lt;br /&gt;
 转换为字符串 str (object=&#39;&#39;)&lt;br /&gt;
 转换为浮点型 float (x)&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;520&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 520&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;520.52&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 520&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;520.52&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 520.52&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;520&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 520.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 20&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10.1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 15.3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;520&lt;br /&gt;
520&lt;br /&gt;
520.52&lt;br /&gt;
520.0&lt;br /&gt;
20&lt;br /&gt;
15.3&lt;br /&gt;
5. print () 函数&lt;br /&gt;
 print (*objects, sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)&lt;br /&gt;
 将对象以字符串表示的方式格式化输出到流文件对象 file 里。其中所有非关键字参数都按 str () 方式进行转换为字符串输出；&lt;br /&gt;
关键字参数 sep 是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；&lt;br /&gt;
关键字参数 end 是输出结束时的字符，默认是换行符 \n；&lt;br /&gt;
关键字参数 file 是定义流输出的文件，可以是标准的系统输出 sys.stdout，也可以重定义为别的文件；&lt;br /&gt;
关键字参数 flush 是立即把内容输出到流文件，不作缓存。&lt;br /&gt;
【例子】没有参数时，每次输出后都会换行。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shoplist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;apple&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mango&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;carrot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;banana&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;This is printed without &#39;end&#39;and &#39;sep&#39;.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; item &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; shoplist&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# This is printed without &#39;end&#39;and &#39;sep&#39;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# apple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# mango&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# carrot&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# banana&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;This is printed without &#39;end&#39;and &#39;sep&#39;.&lt;br /&gt;
apple&lt;br /&gt;
mango&lt;br /&gt;
carrot&lt;br /&gt;
banana&lt;br /&gt;
【例子】每次输出结束都用 end 设置的参数 &amp;amp; 结尾，并没有默认换行。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shoplist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;apple&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mango&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;carrot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;banana&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;This is printed with &#39;end=&#39;&amp;amp;&#39;&#39;.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; item &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; shoplist&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# This is printed with &#39;end=&#39;&amp;amp;&#39;&#39;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# apple&amp;amp;mango&amp;amp;carrot&amp;amp;banana&amp;amp;hello world&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;This is printed with &#39;end=&#39;&amp;amp;&#39;&#39;.&lt;br /&gt;
apple&amp;amp;mango&amp;amp;carrot&amp;amp;banana&amp;amp;hello world&lt;br /&gt;
【例子】item 值与 &#39;another string&#39; 两个值之间用 sep 设置的参数 &amp;amp; 分割。由于 end 参数没有设置，因此默认是输出解释后换行，即 end 参数的默认值为 \n。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shoplist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;apple&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mango&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;carrot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;banana&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;This is printed with &#39;sep=&#39;&amp;amp;&#39;&#39;.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; item &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; shoplist&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;another string&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sep&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# This is printed with &#39;sep=&#39;&amp;amp;&#39;&#39;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# apple&amp;amp;another string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# mango&amp;amp;another string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# carrot&amp;amp;another string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# banana&amp;amp;another string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;This is printed with &#39;sep=&#39;&amp;amp;&#39;&#39;.&lt;br /&gt;
apple&amp;amp;another string&lt;br /&gt;
mango&amp;amp;another string&lt;br /&gt;
carrot&amp;amp;another string&lt;br /&gt;
banana&amp;amp;another string&lt;br /&gt;
 位运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原码、反码和补码&lt;br /&gt;
二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原码：就是其二进制表示（注意，有一位符号位）。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;反码：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;补码：正数的补码就是原码，负数的补码是反码 + 1。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;符号位：最高位为符号位，0 表示正数，1 表示负数。在位运算中符号位也参与运算。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按位运算&lt;br /&gt;
按位非操作～&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;~ 把 num 的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在～运算中同样会取反。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;按位与操作 &amp;amp;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;只有两个对应位都为 1 时才为 1&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;按位或操作 |&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;只要两个对应位中有一个 1 时就为 1&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;按位异或操作 ^&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;只有两个对应位不同时才为 1&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;异或操作的性质：满足交换律和结合律&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;A&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;B&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;A&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;B&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;B&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;A&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;A&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;A&lt;sup&gt;B&lt;/sup&gt;A: = A&lt;sup&gt;A&lt;/sup&gt;B = B = 00 00 01 11&lt;br /&gt;
 按位左移操作 &amp;lt;&amp;lt;&lt;br /&gt;
num &amp;lt;&amp;lt; i 将 num 的二进制表示向左移动 i 位所得的值。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;按位右移操作 &amp;gt;&amp;gt;&lt;br /&gt;
num &amp;gt;&amp;gt; i 将 num 的二进制表示向右移动 i 位所得的值。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;利用位运算实现快速计算&lt;br /&gt;
通过 &amp;lt;&amp;lt;，&amp;gt;&amp;gt; 快速计算 2 的倍数问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;n &amp;lt;&amp;lt;1 -&amp;gt; 计算 n&lt;em&gt;2&lt;br /&gt;
n &amp;gt;&amp;gt; 1 -&amp;gt; 计算 n/2，负奇数的运算不可用&lt;br /&gt;
 n &amp;lt;&amp;lt;m -&amp;gt; 计算 n&lt;/em&gt; (2^m)，即乘以 2 的 m 次方&lt;br /&gt;
 n &amp;gt;&amp;gt; m -&amp;gt; 计算 n/(2^m)，即除以 2 的 m 次方&lt;br /&gt;
 1 &amp;lt;&amp;lt;n -&amp;gt; 2^n&lt;br /&gt;
 通过 ^ 快速交换两个整数。 通过 ^ 快速交换两个整数。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过 a &amp;amp; (-a) 快速获取 a 的最后为 1 位置的整数。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;利用位运算实现整数集合&lt;br /&gt;
一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如集合 {1, 3, 4, 8}，可以表示成 01 00 01 10 10 而对应的位运算也就可以看作是对集合进行的操作。&lt;/p&gt;
&lt;p&gt;元素与集合的操作：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 把 i 插入到集合中&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 把 i 从集合中删除&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 判断 i 是否属于该集合（零不属于，非零属于）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;集合之间的操作：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a 补   &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a 交 b &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a 并 b &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a 差 b &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。&lt;/p&gt;
&lt;p&gt;【例子】C# 语言输出负数。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Program&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    static void Main&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        string s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Convert&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ToString&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        Console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;WriteLine&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11111111111111111111111111111101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        string s2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Convert&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ToString&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        Console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;WriteLine&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt; fffffffd&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】 Python 的 bin () 输出。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# -0b11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xffffffff&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 0b11111111111111111111111111111101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0xfffffffd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;       &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 0b11111111111111111111111111111101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0xfffffffd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 4294967293&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;0b11&lt;br /&gt;
-0b11&lt;br /&gt;
0b11111111111111111111111111111101&lt;br /&gt;
0b11111111111111111111111111111101&lt;br /&gt;
4294967293&lt;br /&gt;
 是不是很颠覆认知，我们从结果可以看出：&lt;/p&gt;
&lt;p&gt;Python 中 bin 一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。&lt;br /&gt;
Python 中的整型是补码形式存储的。&lt;br /&gt;
Python 中整型是不限制长度的不会超范围溢出。&lt;br /&gt;
所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数 0xffffffff 进行按位与操作，再交给 bin () 进行输出，得到的才是负数的补码表示。&lt;/p&gt;
&lt;p&gt;条件语句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if 语句&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; expression&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 语句的 expr_true_suite 代码块只有当条件表达式 expression 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;单个 &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 语句中的 expression 条件表达式可以通过布尔操作符 &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt;，&lt;span class=&#34;token keyword&#34;&gt;or&lt;/span&gt;和&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; 实现多重条件判断。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Correct Judgement!&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Correct Judgement!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Correct Judgement!&lt;br /&gt;
2. if - else 语句&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; expression&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr_false_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Python 提供与 &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 搭配使用的 &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;，如果 &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 语句的条件表达式结果布尔值为假，那么程序将执行 &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; 语句后的代码。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;猜一猜小姐姐想的是哪个数字？&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;guess &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# input 函数将接收的任何数据类型都默认为 str。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; guess &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你太了解小姐姐的心思了！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;哼，猜对也没有奖励！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;猜错了，小姐姐现在心里想的是666！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;游戏结束，不玩儿啦！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;猜一猜小姐姐想的是哪个数字？666&lt;br /&gt;
 你太了解小姐姐的心思了！&lt;br /&gt;
哼，猜对也没有奖励！&lt;br /&gt;
游戏结束，不玩儿啦！&lt;br /&gt;
if 语句支持嵌套，即在一个 if 语句中嵌入另一个 if 语句，从而构成不同层次的选择结构。&lt;/p&gt;
&lt;p&gt;【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意 else 的悬挂问题。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; hi &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; hi &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;好棒!好棒!&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;切~&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 无输出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;猜一猜小姐姐想的是哪个数字？&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;guess &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; guess &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;大了，大了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; guess &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你太了解小姐姐的心思了！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;哼，猜对也没有奖励！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;小了，小了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;游戏结束，不玩儿啦！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;猜一猜小姐姐想的是哪个数字？8&lt;br /&gt;
 你太了解小姐姐的心思了！&lt;br /&gt;
哼，猜对也没有奖励！&lt;br /&gt;
游戏结束，不玩儿啦！&lt;br /&gt;
3. if - elif - else 语句&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; expression1&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr1_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; expression2&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr2_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; expressionN&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    exprN_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr_false_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; 语句即为 &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;请输入成绩:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;source &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; source &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; source &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; source &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; source &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;输入错误！&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;请输入成绩&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;99&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;A&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;assert&lt;/span&gt; 关键词&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;assert&lt;/span&gt;这个关键词我们称之为“断言”，当这个关键词后边的条件为 &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt; 时，程序自动崩溃并抛出AssertionError的异常。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;my_list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lsgogroup&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;my_list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;my_list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# AssertionError&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# AssertionError&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;循环语句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;while 循环&lt;br /&gt;
 while 语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于 while 代码块的缩进语句。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; 布尔表达式&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;如果布尔表达式不带有&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;、&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;、&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;、！&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;、&lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;、&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;等运算符，仅仅给出数值之类的条件，也是可以的。当&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;后写入一个非零整数时，视为真值，执行循环体；写入&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;时，视为假值，不执行循环体。也可以写入&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;、&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;猜一猜小姐姐想的是哪个数字？&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    guess &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; guess &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;大了，大了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; guess &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你太了解小姐姐的心思了！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;哼，猜对也没有奖励！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;小了，小了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;游戏结束，不玩儿啦！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;猜一猜小姐姐想的是哪个数字？8&lt;br /&gt;
 你太了解小姐姐的心思了！&lt;br /&gt;
哼，猜对也没有奖励！&lt;br /&gt;
游戏结束，不玩儿啦！&lt;br /&gt;
【例子】布尔表达式返回 0，循环终止。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;abcd&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    string &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# abcd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# bcd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# cd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# d&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;abcd&lt;br /&gt;
bcd&lt;br /&gt;
cd&lt;br /&gt;
d&lt;br /&gt;
2. while - else 循环&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; 布尔表达式&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当 while 循环正常执行完的情况下，执行 else 输出，如果 while 循环中执行了跳出循环的语句，比如 break，将不执行 else 代码块的内容。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d is  less than 5&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d is not less than 5&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 0 is  less than 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1 is  less than 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 2 is  less than 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 3 is  less than 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 4 is  less than 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 5 is not less than 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;0 is  less than 5&lt;br /&gt;
1 is  less than 5&lt;br /&gt;
2 is  less than 5&lt;br /&gt;
3 is  less than 5&lt;br /&gt;
4 is  less than 5&lt;br /&gt;
5 is not less than 5&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d is  less than 5&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%d is not less than 5&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 0 is  less than 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;0 is  less than 5&lt;br /&gt;
3. for 循环&lt;br /&gt;
 for 循环是迭代循环，在 Python 中相当于一个通用的序列迭代器，可以遍历任何有序序列，如 str、list、tuple 等，也可以遍历任何可迭代对象，如 dict。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; 迭代变量 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; 可迭代对象&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;ILoveLSGO&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 不换行输出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# I L o v e L S G O&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;I L o v e L S G O&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;member &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;张三&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;李四&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;刘德华&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;刘六&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;周润发&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; each &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; member&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;each&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 张三&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 李四&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 刘德华&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 刘六&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 周润发&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;member&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;member&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 张三&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 李四&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 刘德华&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 刘六&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 周润发&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;张三&lt;br /&gt;
李四&lt;br /&gt;
刘德华&lt;br /&gt;
刘六&lt;br /&gt;
周润发&lt;br /&gt;
张三&lt;br /&gt;
李四&lt;br /&gt;
刘德华&lt;br /&gt;
刘六&lt;br /&gt;
周润发&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dic &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;d&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; dic&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sep&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# a:1 b:2 c:3 d:4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;a:1 b:2 c:3 d:4&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dic &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;d&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; dic&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# a b c d&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;a b c d&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dic &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;d&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; dic&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1 2 3 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1 2 3 4&lt;br /&gt;
4. for - else 循环&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; 迭代变量 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; 可迭代对象&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;当&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;循环正常执行完的情况下，执行&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;输出，如果&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;循环中执行了跳出循环的语句，比如 &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;，将不执行&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;代码块的内容，与&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;语句一样。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; num &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 迭代 10 到 20 之间的数字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 根据因子迭代&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 确定第一个因子&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; i  &lt;span class=&#34;token comment&#34;&gt;# 计算第二个因子&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%d 等于 %d * %d&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 跳出当前循环&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 循环的 else 部分&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;是一个质数&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 10 等于 2 * 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 11 是一个质数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 12 等于 2 * 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 13 是一个质数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 14 等于 2 * 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 15 等于 3 * 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 16 等于 2 * 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 17 是一个质数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 18 等于 2 * 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 19 是一个质数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;10 等于 2 * 5&lt;br /&gt;
11 是一个质数&lt;br /&gt;
 12 等于 2 * 6&lt;br /&gt;
13 是一个质数&lt;br /&gt;
 14 等于 2 * 7&lt;br /&gt;
15 等于 3 * 5&lt;br /&gt;
16 等于 2 * 8&lt;br /&gt;
17 是一个质数&lt;br /&gt;
 18 等于 2 * 9&lt;br /&gt;
19 是一个质数&lt;br /&gt;
 5. range () 函数&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; stop&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; step&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个 BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。&lt;br /&gt;
step=1 表示第三个参数的默认值是 1。&lt;br /&gt;
range 这个 BIF 的作用是生成一个从 start 参数的值开始到 stop 参数的值结束的数字序列，该序列包含 start 的值但不包含 stop 的值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 不包含 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2&lt;br /&gt;
3&lt;br /&gt;
4&lt;br /&gt;
5&lt;br /&gt;
6&lt;br /&gt;
7&lt;br /&gt;
8&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1&lt;br /&gt;
3&lt;br /&gt;
5&lt;br /&gt;
7&lt;br /&gt;
9&lt;br /&gt;
6. enumerate () 函数&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sequence&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;start&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;sequence：一个序列、迭代器或其他支持迭代对象。&lt;br /&gt;
start：下标起始位置。&lt;br /&gt;
返回 enumerate (枚举) 对象&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;seasons &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Spring&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Summer&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Fall&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Winter&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lst &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;seasons&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lst&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lst &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;seasons&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; start&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 下标从 1 开始&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lst&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Spring&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Summer&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Fall&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Winter&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Spring&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Summer&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Fall&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Winter&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;enumerate () 与 for 循环的结合使用。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    do something &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; a  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;用 &lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 不仅返回了 A 中的元素，还顺便给该元素一个索引值 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;默认从 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; 开始&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;。此外，用 &lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 还可以确定索引起始值为 j。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;languages &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;R&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Matlab&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C++&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; language &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; languages&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;I love&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; language&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Done!&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# I love Python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# I love R&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# I love Matlab&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# I love C++&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Done!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; language &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;languages&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;I love&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; language&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Done!&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 2 I love Python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 3 I love R&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 4 I love Matlab&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 5 I love C++&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Done!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;I love Python&lt;br /&gt;
I love R&lt;br /&gt;
I love Matlab&lt;br /&gt;
I love C++&lt;br /&gt;
Done!&lt;br /&gt;
2 I love Python&lt;br /&gt;
3 I love R&lt;br /&gt;
4 I love Matlab&lt;br /&gt;
5 I love C++&lt;br /&gt;
Done!&lt;br /&gt;
7. break 语句&lt;br /&gt;
 break 语句可以跳出当前所在层的循环。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; random&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;secret &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randint&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#[1,10] 之间的随机数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;猜一猜小姐姐想的是哪个数字？&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    guess &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; guess &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; secret&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;大了，大了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; guess &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; secret&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;你太了解小姐姐的心思了！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;哼，猜对也没有奖励！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;小了，小了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;游戏结束，不玩儿啦！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;猜一猜小姐姐想的是哪个数字？8&lt;br /&gt;
 你太了解小姐姐的心思了！&lt;br /&gt;
哼，猜对也没有奖励！&lt;br /&gt;
游戏结束，不玩儿啦！&lt;br /&gt;
8. continue 语句&lt;br /&gt;
 continue 终止本轮循环并开始下一轮循环。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    i &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2&lt;br /&gt;
1&lt;br /&gt;
4&lt;br /&gt;
3&lt;br /&gt;
6&lt;br /&gt;
5&lt;br /&gt;
8&lt;br /&gt;
7&lt;br /&gt;
10&lt;br /&gt;
9&lt;br /&gt;
9. pass 语句&lt;br /&gt;
 pass 语句的意思是 “不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 pass 语句就是用来解决这些问题的。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# SyntaxError: unexpected EOF while parsing&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;pass&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;pass&lt;/span&gt;是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管&lt;span class=&#34;token keyword&#34;&gt;pass&lt;/span&gt;语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个&lt;span class=&#34;token keyword&#34;&gt;pass&lt;/span&gt;语句，让代码可以正常运行。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; 推导式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;列表推导式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; expr &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; collection &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;a &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; a &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [-8, -4, 0, 4, 8]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[-8, -4, 0, 4, 8]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]&lt;br /&gt;
[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [(0, 2)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[(0, 2)]&lt;br /&gt;
 元组推导式&lt;br /&gt;
 ` python&lt;br /&gt;
( expr for value in collection [if condition] )&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; x &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;generator object &amp;lt;genexpr&gt; at 0x0000025BE511CC48&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;generator &lt;span class=&#34;token builtin&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;genexpr&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; at &lt;span class=&#34;token number&#34;&gt;0x0000014CEC2E28B8&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)&lt;br /&gt;
 字典推导式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; key_expr&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; value_expr &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; collection &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;#123;0: True, 3: False, 6: True, 9: False&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;{0: True, 3: False, 6: True, 9: False}&lt;br /&gt;
 集合推导式&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; expr &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; collection &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;i &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;#123;1, 2, 3, 4, 5, 6&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;{1, 2, 3, 4, 5, 6}&lt;br /&gt;
 其它&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;next(iterator[, default]) Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;e &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;generator object &amp;lt;genexpr&gt; at 0x0000007A0B8D01B0&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; each &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;each&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 2 3 4 5 6 7 8 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;generator &lt;span class=&#34;token builtin&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;genexpr&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; at &lt;span class=&#34;token number&#34;&gt;0x0000014CEC389C78&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;0&lt;br /&gt;
1&lt;br /&gt;
2 3 4 5 6 7 8 9&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 5050&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 5050&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;5050&lt;br /&gt;
5050&lt;br /&gt;
 异常处理&lt;br /&gt;
异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 标准异常总结&lt;br /&gt;
 BaseException：所有异常的 基类&lt;br /&gt;
 Exception：常规异常的 基类&lt;br /&gt;
 StandardError：所有的内建标准异常的基类&lt;br /&gt;
 ArithmeticError：所有数值计算异常的基类&lt;br /&gt;
 FloatingPointError：浮点计算异常&lt;br /&gt;
 OverflowError：数值运算超出最大限制&lt;br /&gt;
 ZeroDivisionError：除数为零&lt;br /&gt;
 AssertionError：断言语句（assert）失败&lt;br /&gt;
 AttributeError：尝试访问未知的对象属性&lt;br /&gt;
 EOFError：没有内建输入，到达 EOF 标记&lt;br /&gt;
 EnvironmentError：操作系统异常的基类&lt;br /&gt;
 IOError：输入 / 输出操作失败&lt;br /&gt;
 OSError：操作系统产生的异常（例如打开一个不存在的文件）&lt;br /&gt;
WindowsError：系统调用失败&lt;br /&gt;
 ImportError：导入模块失败的时候&lt;br /&gt;
 KeyboardInterrupt：用户中断执行&lt;br /&gt;
 LookupError：无效数据查询的基类&lt;br /&gt;
 IndexError：索引超出序列的范围&lt;br /&gt;
 KeyError：字典中查找一个不存在的关键字&lt;br /&gt;
 MemoryError：内存溢出（可通过删除对象释放内存）&lt;br /&gt;
NameError：尝试访问一个不存在的变量&lt;br /&gt;
 UnboundLocalError：访问未初始化的本地变量&lt;br /&gt;
 ReferenceError：弱引用试图访问已经垃圾回收了的对象&lt;br /&gt;
 RuntimeError：一般的运行时异常&lt;br /&gt;
 NotImplementedError：尚未实现的方法&lt;br /&gt;
 SyntaxError：语法错误导致的异常&lt;br /&gt;
 IndentationError：缩进错误导致的异常&lt;br /&gt;
 TabError：Tab 和空格混用&lt;br /&gt;
 SystemError：一般的解释器系统异常&lt;br /&gt;
 TypeError：不同类型间的无效操作&lt;br /&gt;
 ValueError：传入无效的参数&lt;br /&gt;
 UnicodeError：Unicode 相关的异常&lt;br /&gt;
 UnicodeDecodeError：Unicode 解码时的异常&lt;br /&gt;
 UnicodeEncodeError：Unicode 编码错误导致的异常&lt;br /&gt;
 UnicodeTranslateError：Unicode 转换错误导致的异常&lt;br /&gt;
异常体系内部有层次关系，Python 异常体系中的部分关系如下所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Python 标准警告总结&lt;br /&gt;
 Warning：警告的基类&lt;br /&gt;
 DeprecationWarning：关于被弃用的特征的警告&lt;br /&gt;
 FutureWarning：关于构造将来语义会有改变的警告&lt;br /&gt;
 UserWarning：用户代码生成的警告&lt;br /&gt;
 PendingDeprecationWarning：关于特性将会被废弃的警告&lt;br /&gt;
 RuntimeWarning：可疑的运行时行为 (runtime behavior) 的警告&lt;br /&gt;
 SyntaxWarning：可疑语法的警告&lt;br /&gt;
 ImportWarning：用于在导入模块过程中触发的警告&lt;br /&gt;
 UnicodeWarning：与 Unicode 相关的警告&lt;br /&gt;
 BytesWarning：与字节或字节码相关的警告&lt;br /&gt;
 ResourceWarning：与资源使用相关的警告&lt;/li&gt;
&lt;li&gt;try - except 语句&lt;br /&gt;
 try:&lt;br /&gt;
 检测范围&lt;br /&gt;
 except Exception [as reason]:&lt;br /&gt;
 出现异常后的处理代码&lt;br /&gt;
 try 语句按照如下方式工作：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，执行 try 子句（在关键字 try 和关键字 except 之间的语句）&lt;br /&gt;
如果没有异常发生，忽略 except 子句，try 子句执行后结束。&lt;br /&gt;
如果在执行 try 子句的过程中发生了异常，那么 try 子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的 except 子句将被执行。最后执行 try - except 语句之后的代码。&lt;br /&gt;
如果一个异常没有与任何的 except 匹配，那么这个异常将会传递给上层的 try 中。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test.txt&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; OSError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;打开文件出错&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 打开文件出错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打开文件出错&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test.txt&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; OSError &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; error&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;打开文件出错\n原因是：&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 打开文件出错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打开文件出错&lt;br /&gt;
原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;&lt;br /&gt;
 一个 try 语句可能包含多个 except 子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test.txt&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; OSError &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; error&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;打开文件出错\n原因是：&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; TypeError &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; error&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;类型出错\n原因是：&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; ValueError &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; error&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数值出错\n原因是：&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 数值出错&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 原因是：invalid literal for int () with base 10: &#39;abc&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;数值出错&lt;br /&gt;
原因是：invalid literal for int () with base 10: &#39;abc&#39;&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dict1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;v&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dict1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;y&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; LookupError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;查询错误&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; KeyError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;键错误&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 查询错误&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查询错误&lt;br /&gt;
 try-except-else 语句尝试查询不在 dict 中的键值对，从而引发了异常。这一异常准确地说应属于 KeyError，但由于 KeyError 是 LookupError 的子类，且将 LookupError 置于 KeyError 之前，因此程序优先执行该 except 代码块。所以，使用多个 except 代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dict1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;v&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dict1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;y&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; KeyError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;键错误&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; LookupError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;查询错误&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 键错误&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;键错误&lt;br /&gt;
【例子】一个 except 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test.txt&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;OSError&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; TypeError&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ValueError&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; error&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;出错了！\n原因是：&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 出错了！&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 原因是：unsupported operand type (s) for +: &#39;int&#39; and&#39;str&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;出错了！&lt;br /&gt;
原因是：unsupported operand type (s) for +: &#39;int&#39; and&#39;str&#39;&lt;br /&gt;
4. try - except - finally 语句&lt;br /&gt;
 try: 检测范围 except Exception [as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码&lt;/p&gt;
&lt;p&gt;不管 try 子句里面有没有发生异常，finally 子句都会执行。&lt;/p&gt;
&lt;p&gt;【例子】如果一个异常在 try 子句里被抛出，而又没有任何的 except 把它截住，那么这个异常会在 finally 子句执行后被抛出。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;divide&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;result is&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; ZeroDivisionError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;division by zero!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;executing finally clause&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;divide&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# result is 2.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# executing finally clause&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;divide&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# division by zero!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# executing finally clause&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;divide&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# executing finally clause&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# TypeError: unsupported operand type(s) for /: &#39;str&#39; and &#39;str&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;result is 2.0&lt;br /&gt;
executing finally clause&lt;br /&gt;
division by zero!&lt;br /&gt;
executing finally clause&lt;br /&gt;
5. try - except - else 语句&lt;br /&gt;
如果在 try 子句执行时没有发生异常，Python 将执行 else 语句后的语句。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    检测范围&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    出现异常后的处理代码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    如果没有异常执行这块代码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;使用&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 检测范围 &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Exception1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Exception2&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ExceptionN&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 发生以上多个异常中的一个，执行这块代码 &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 如果没有异常执行这块代码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;``` python&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    fh &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;testfile.txt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;w&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    fh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;这是一个测试文件，用于测试异常!!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; IOError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error: 没有找到文件或读取文件失败&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;内容写入文件成功&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    fh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 内容写入文件成功&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;内容写入文件成功&lt;br /&gt;
注意：else 语句的存在必须以 except 语句的存在为前提，在没有 except 语句的 try 语句中使用 else 语句，会引发语法错误。&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;raise 语句&lt;br /&gt;
 Python 使用 raise 语句抛出一个指定的异常。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;raise&lt;/span&gt; NameError&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;HiThere&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; NameError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;An exception flew by!&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# An exception flew by!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;raise&lt;/span&gt; NameError&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;HiThere&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; NameError&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;An exception flew by!&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# An exception flew by!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2021-01-29T13:39:15.000Z</updated>
    </entry>
    <entry>
        <id>https://theprofessor249.github.io/2021/01/29/python-2-day/</id>
        <title>python_2_day</title>
        <link rel="alternate" href="https://theprofessor249.github.io/2021/01/29/python-2-day/"/>
        <content type="html">&lt;p&gt;Python 入门 (中)&lt;br /&gt;
 简介&lt;/p&gt;
&lt;p&gt;列表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;列表的定义&lt;/li&gt;
&lt;li&gt;列表的创建&lt;/li&gt;
&lt;li&gt;向列表中添加元素&lt;/li&gt;
&lt;li&gt;删除列表中的元素&lt;/li&gt;
&lt;li&gt;获取列表中的元素&lt;/li&gt;
&lt;li&gt;列表的常用操作符&lt;/li&gt;
&lt;li&gt;列表的其它方法&lt;br /&gt;
元组&lt;/li&gt;
&lt;li&gt;创建和访问一个元组&lt;/li&gt;
&lt;li&gt;更新和删除一个元组&lt;/li&gt;
&lt;li&gt;元组相关的操作符&lt;/li&gt;
&lt;li&gt;内置方法&lt;/li&gt;
&lt;li&gt;解压元组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字符串&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串的定义&lt;/li&gt;
&lt;li&gt;字符串的切片与拼接&lt;/li&gt;
&lt;li&gt;字符串的常用内置方法&lt;/li&gt;
&lt;li&gt;字符串格式化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字典&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可变类型与不可变类型&lt;/li&gt;
&lt;li&gt;字典的定义&lt;/li&gt;
&lt;li&gt;创建和访问字典&lt;/li&gt;
&lt;li&gt;字典的内置方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;集合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集合的创建&lt;/li&gt;
&lt;li&gt;访问集合中的值&lt;/li&gt;
&lt;li&gt;集合的内置方法&lt;/li&gt;
&lt;li&gt;集合的转换&lt;/li&gt;
&lt;li&gt;不可变集合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;序列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对序列的内置函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简介&lt;br /&gt;
 Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;本实验包括以下内容：&lt;/p&gt;
&lt;p&gt;列表&lt;br /&gt;
列表的定义&lt;br /&gt;
列表的创建&lt;br /&gt;
向列表中添加元素&lt;br /&gt;
删除列表中的元素&lt;br /&gt;
获取列表中的元素&lt;br /&gt;
列表的常用操作符&lt;br /&gt;
列表的其他方法&lt;br /&gt;
元组&lt;br /&gt;
创建和访问一个元组&lt;br /&gt;
更新和删除一个元组&lt;br /&gt;
元组相关的操作符&lt;br /&gt;
内置方法&lt;br /&gt;
解压元组&lt;br /&gt;
字符串&lt;br /&gt;
字符串的定义&lt;br /&gt;
字符串的切片与拼接&lt;br /&gt;
字符串的常用内置方法&lt;br /&gt;
字符串格式化&lt;br /&gt;
字典&lt;br /&gt;
可变类型与不可变类型&lt;br /&gt;
字典的定义&lt;br /&gt;
创建和访问字典&lt;br /&gt;
字典的内置方法&lt;br /&gt;
集合&lt;br /&gt;
集合的创建&lt;br /&gt;
访问集合中的值&lt;br /&gt;
集合的内置方法&lt;br /&gt;
集合的转换&lt;br /&gt;
不可变集合&lt;br /&gt;
序列&lt;br /&gt;
针对序列的内置函数&lt;br /&gt;
列表&lt;br /&gt;
简单数据类型&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;整型&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;int&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;浮点型&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;float&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;布尔型&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;bool&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;容器数据类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;列表&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;list&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;元组&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;tuple&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字典&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;dict&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;集合&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;set&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字符串&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;str&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol&gt;
&lt;li&gt;列表的定义&lt;br /&gt;
列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为 [元素 1, 元素 2, ..., 元素 n]。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键点是「中括号 []」和「逗号，」&lt;br /&gt;
中括号 把所有元素绑在一起&lt;br /&gt;
逗号 将每个元素一一分开&lt;br /&gt;
 2. 列表的创建&lt;br /&gt;
创建一个普通列表&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
print(x, type(x))
# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &amp;lt;class &#39;list&#39;&amp;gt;
​
x = [2, 3, 4, 5, 6, 7]
print(x, type(x))
# [2, 3, 4, 5, 6, 7] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[2, 3, 4, 5, 6, 7] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
 利用 range () 创建列表&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = list(range(10))
print(x, type(x))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &#39;list&#39;&amp;gt;
​
x = list(range(1, 11, 2))
print(x, type(x))
# [1, 3, 5, 7, 9] &amp;lt;class &#39;list&#39;&amp;gt;
​
x = list(range(10, 1, -2))
print(x, type(x))
# [10, 8, 6, 4, 2] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[1, 3, 5, 7, 9] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[10, 8, 6, 4, 2] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
 利用推导式创建列表&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [0] * 5
print(x, type(x))
# [0, 0, 0, 0, 0] &amp;lt;class &#39;list&#39;&amp;gt;
​
x = [0 for i in range(5)]
print(x, type(x))
# [0, 0, 0, 0, 0] &amp;lt;class &#39;list&#39;&amp;gt;
​
x = [i for i in range(10)]
print(x, type(x))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br /&gt;
x = [i for i in range(1, 10, 2)]&lt;br /&gt;
print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;1-3-5-7-9-class-list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-3-5-7-9-class-list&#34;&gt;#&lt;/a&gt; [1, 3, 5, 7, 9] &amp;lt;class &#39;list&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
x = [i for i in range(10, 1, -2)]&lt;br /&gt;
print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;10-8-6-4-2-class-list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10-8-6-4-2-class-list&#34;&gt;#&lt;/a&gt; [10, 8, 6, 4, 2] &amp;lt;class &#39;list&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
x = [i ** 2 for i in range(1, 10)]&lt;br /&gt;
print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;1-4-9-16-25-36-49-64-81-class-list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-4-9-16-25-36-49-64-81-class-list&#34;&gt;#&lt;/a&gt; [1, 4, 9, 16, 25, 36, 49, 64, 81] &amp;lt;class &#39;list&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
x = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]&lt;br /&gt;
print(x, type(x))&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;3-9-15-21-27-33-39&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-9-15-21-27-33-39&#34;&gt;#&lt;/a&gt; [3, 9, 15, 21, 27, 33, 39,&lt;/h1&gt;
&lt;p&gt;[0, 0, 0, 0, 0] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[0, 0, 0, 0, 0] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[1, 3, 5, 7, 9] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[10, 8, 6, 4, 2] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[1, 4, 9, 16, 25, 36, 49, 64, 81] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
 注意：&lt;/p&gt;
&lt;p&gt;由于 list 的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的 [1,2,3]，也有 3 个指针和 3 个整数对象。&lt;/p&gt;
&lt;p&gt;x = [a] * 4 操作中，只是创建 4 个指向 list 的引用，所以一旦 a 改变，x 中 4 个 a 也会随之改变。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [[0] * 3] * 4&lt;br /&gt;
print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;0-0-0-0-0-0-0-0-0-0-0-0-class-list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-0-0-0-0-0-0-0-0-0-0-0-class-list&#34;&gt;#&lt;/a&gt; [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
x[0][0] = 1&lt;br /&gt;
print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;1-0-0-1-0-0-1-0-0-1-0-0-class-list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-0-0-1-0-0-1-0-0-1-0-0-class-list&#34;&gt;#&lt;/a&gt; [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
a = [0] * 3&lt;br /&gt;
x = [a] * 4&lt;br /&gt;
print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;0-0-0-0-0-0-0-0-0-0-0-0-class-list-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-0-0-0-0-0-0-0-0-0-0-0-class-list-2&#34;&gt;#&lt;/a&gt; [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
x[0][0] = 1&lt;br /&gt;
print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;1-0-0-1-0-0-1-0-0-1-0-0-class-list-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-0-0-1-0-0-1-0-0-1-0-0-class-list-2&#34;&gt;#&lt;/a&gt; [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
 创建一个混合列表&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;mix = [1, &#39;lsgo&#39;, 3.14, [1, 2, 3]]&lt;br /&gt;
print(mix, type(mix))&lt;/p&gt;
&lt;h1 id=&#34;1-lsgo-314-1-2-3-class-list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-lsgo-314-1-2-3-class-list&#34;&gt;#&lt;/a&gt; [1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;[1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
 创建一个空列表&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;empty = []&lt;br /&gt;
print(empty, type(empty))  # [] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
[] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
 列表不像元组，列表内容可更改 (mutable)，因此附加 (append, extend)、插入 (insert)、删除 (remove, pop) 这些操作都可以用在它身上。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;向列表中添加元素&lt;br /&gt;
 list.append (obj) 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
x.append(&#39;Thursday&#39;)&lt;br /&gt;
print(x)&lt;/p&gt;
&lt;h1 id=&#34;monday-tuesday-wednesday-thursday-friday-thursday&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monday-tuesday-wednesday-thursday-friday-thursday&#34;&gt;#&lt;/a&gt; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(len(x))  # 6&lt;br /&gt;
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
6&lt;br /&gt;
 此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意 append () 和 extend () 的区别。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
x.append([&#39;Thursday&#39;, &#39;Sunday&#39;])&lt;br /&gt;
print(x)&lt;/p&gt;
&lt;h1 id=&#34;monday-tuesday-wednesday-thursday-friday-thursday-sunday&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monday-tuesday-wednesday-thursday-friday-thursday-sunday&#34;&gt;#&lt;/a&gt; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(len(x))  # 6&lt;br /&gt;
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]&lt;br /&gt;
6&lt;br /&gt;
list.extend (seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
x.extend([&#39;Thursday&#39;, &#39;Sunday&#39;])&lt;br /&gt;
print(x)&lt;/p&gt;
&lt;h1 id=&#34;monday-tuesday-wednesday-thursday-friday-thursday-sunday-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monday-tuesday-wednesday-thursday-friday-thursday-sunday-2&#34;&gt;#&lt;/a&gt; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(len(x))  # 7&lt;br /&gt;
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]&lt;br /&gt;
7&lt;br /&gt;
 严格来说 append 是追加，把一个东西整体添加在列表后，而 extend 是扩展，把一个东西里的所有元素添加在列表后。&lt;/p&gt;
&lt;p&gt;list.insert (index, obj) 在编号 index 位置插入 obj。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
x.insert(2, &#39;Sunday&#39;)&lt;br /&gt;
print(x)&lt;/p&gt;
&lt;h1 id=&#34;monday-tuesday-sunday-wednesday-thursday-friday&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monday-tuesday-sunday-wednesday-thursday-friday&#34;&gt;#&lt;/a&gt; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(len(x))  # 6&lt;br /&gt;
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
6&lt;br /&gt;
4. 删除列表中的元素&lt;br /&gt;
 list.remove (obj) 移除列表中某个值的第一个匹配项&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
x.remove(&#39;Monday&#39;)&lt;br /&gt;
print(x)  # [&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
[&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
 list.pop ([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
y = x.pop()&lt;br /&gt;
print(y)  # Friday&lt;br /&gt;
​&lt;br /&gt;
y = x.pop(0)&lt;br /&gt;
print(y)  # Monday&lt;br /&gt;
​&lt;br /&gt;
y = x.pop(-2)&lt;br /&gt;
print(y)  # Wednesday&lt;br /&gt;
print(x)  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
Friday&lt;br /&gt;
Monday&lt;br /&gt;
Wednesday&lt;br /&gt;
[&#39;Tuesday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
 remove 和 pop 都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。&lt;/p&gt;
&lt;p&gt;del var1 [, var2 ……] 删除单个或多个对象。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;如果知道要删除的元素在列表中的位置，可使用 del 语句。&lt;/p&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
del x[0:2]&lt;br /&gt;
print(x)  # [&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
 如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用 del 语句；如果你要在删除元素后还能继续使用它，就使用方法 pop ()。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;获取列表中的元素&lt;br /&gt;
通过元素的索引值，从列表获取单个元素，注意，列表索引值是从 0 开始的。&lt;br /&gt;
通过将索引指定为 - 1，可让 Python 返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, [&#39;Thursday&#39;, &#39;Friday&#39;]]&lt;br /&gt;
print(x[0], type(x[0]))  # Monday &amp;lt;class &#39;str&#39;&amp;gt;&lt;br /&gt;
print(x[-1], type(x[-1]))  # [&#39;Thursday&#39;, &#39;Friday&#39;] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
print(x[-2], type(x[-2]))  # Wednesday &amp;lt;class &#39;str&#39;&amp;gt;&lt;br /&gt;
Monday &amp;lt;class &#39;str&#39;&amp;gt;&lt;br /&gt;
[&#39;Thursday&#39;, &#39;Friday&#39;] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
Wednesday &amp;lt;class &#39;str&#39;&amp;gt;&lt;br /&gt;
 切片的通用写法是 start : stop : step&lt;/p&gt;
&lt;p&gt;情况 1 - &amp;quot;start :&amp;quot;&lt;br /&gt;
 以 step 为 1 (默认) 从编号 start 往列表尾部切片。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
print(x[3:])  # [&#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
print(x[-3:])  # [&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
[&#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
 情况 2 - &amp;quot;: stop&amp;quot;&lt;br /&gt;
 以 step 为 1 (默认) 从列表头部往编号 stop 切片。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
print(week[:3])  # [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]&lt;br /&gt;
print(week[:-3])  # [&#39;Monday&#39;, &#39;Tuesday&#39;]&lt;br /&gt;
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]&lt;br /&gt;
[&#39;Monday&#39;, &#39;Tuesday&#39;]&lt;br /&gt;
 情况 3 - &amp;quot;start : stop&amp;quot;&lt;br /&gt;
 以 step 为 1 (默认) 从编号 start 往编号 stop 切片。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
print(week[1:3])  # [&#39;Tuesday&#39;, &#39;Wednesday&#39;]&lt;br /&gt;
print(week[-3:-1])  # [&#39;Wednesday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
[&#39;Tuesday&#39;, &#39;Wednesday&#39;]&lt;br /&gt;
[&#39;Wednesday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
 情况 4 - &amp;quot;start : stop : step&amp;quot;&lt;br /&gt;
 以具体的 step 从编号 start 往编号 stop 切片。注意最后把 step 设为 -1，相当于将列表反向排列。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
print(week[1:4:2])  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
print(week[:4:2])  # [&#39;Monday&#39;, &#39;Wednesday&#39;]&lt;br /&gt;
print(week[1::2])  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
print(week[::-1])&lt;/p&gt;
&lt;h1 id=&#34;friday-thursday-wednesday-tuesday-monday&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#friday-thursday-wednesday-tuesday-monday&#34;&gt;#&lt;/a&gt; [&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]&lt;/h1&gt;
&lt;p&gt;[&#39;Tuesday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
[&#39;Monday&#39;, &#39;Wednesday&#39;]&lt;br /&gt;
[&#39;Tuesday&#39;, &#39;Thursday&#39;]&lt;br /&gt;
[&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]&lt;br /&gt;
 情况 5 - &amp;quot;:&amp;quot;&lt;br /&gt;
 复制列表中的所有元素（浅拷贝）。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;eek = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
print(week[:])&lt;/p&gt;
&lt;h1 id=&#34;monday-tuesday-wednesday-thursday-friday&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monday-tuesday-wednesday-thursday-friday&#34;&gt;#&lt;/a&gt; [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;/h1&gt;
&lt;p&gt;[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]&lt;br /&gt;
【例子】浅拷贝与深拷贝&lt;/p&gt;
&lt;p&gt;list1 = [123, 456, 789, 213]&lt;br /&gt;
list2 = list1&lt;br /&gt;
list3 = list1[:]&lt;br /&gt;
​&lt;br /&gt;
print(list2)  # [123, 456, 789, 213]&lt;br /&gt;
print(list3)  # [123, 456, 789, 213]&lt;br /&gt;
list1.sort()&lt;br /&gt;
print(list2)  # [123, 213, 456, 789]&lt;br /&gt;
print(list3)  # [123, 456, 789, 213]&lt;br /&gt;
​&lt;br /&gt;
list1 = [[123, 456], [789, 213]]&lt;br /&gt;
list2 = list1&lt;br /&gt;
list3 = list1[:]&lt;br /&gt;
print(list2)  # [[123, 456], [789, 213]]&lt;br /&gt;
print(list3)  # [[123, 456], [789, 213]]&lt;br /&gt;
list1[0][0] = 111&lt;br /&gt;
print(list2)  # [[111, 456], [789, 213]]&lt;br /&gt;
print(list3)  # [[111, 456], [789, 213]]&lt;br /&gt;
[123, 456, 789, 213]&lt;br /&gt;
[123, 456, 789, 213]&lt;br /&gt;
[123, 213, 456, 789]&lt;br /&gt;
[123, 456, 789, 213]&lt;br /&gt;
[[123, 456], [789, 213]]&lt;br /&gt;
[[123, 456], [789, 213]]&lt;br /&gt;
[[111, 456], [789, 213]]&lt;br /&gt;
[[111, 456], [789, 213]]&lt;br /&gt;
 6. 列表的常用操作符&lt;br /&gt;
等号操作符：==&lt;br /&gt;
 连接操作符 +&lt;br /&gt;
 重复操作符 *&lt;br /&gt;
 成员关系操作符 in、not in&lt;br /&gt;
「等号 ==」，只有成员、成员位置都相同时才返回 True。&lt;/p&gt;
&lt;p&gt;列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;list1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;list2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;list3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list1 &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; list2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list1 &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; list3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;list4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; list1 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; list2  &lt;span class=&#34;token comment&#34;&gt;# extend()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list4&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [123, 456, 456, 123]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;list5 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; list3 &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [123, 456, 123, 456, 123, 456]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;list3 &lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [123, 456, 123, 456, 123, 456]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; list3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; list3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;False&lt;br /&gt;
True&lt;br /&gt;
[123, 456, 456, 123]&lt;br /&gt;
[123, 456, 123, 456, 123, 456]&lt;br /&gt;
[123, 456, 123, 456, 123, 456]&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
 前面三种方法（append, extend, insert）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。 而将两个 list 相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加 list。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;列表的其它方法&lt;br /&gt;
 list.count (obj) 统计某个元素在列表中出现的次数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;list1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [123, 456, 123, 456, 123, 456]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; list1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; start&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 从列表中找出某个值第一个匹配项的索引位置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;list1 = [123, 456] * 5&lt;br /&gt;
print(list1.index(123))  # 0&lt;br /&gt;
print(list1.index(123, 1))  # 2&lt;br /&gt;
print(list1.index(123, 3, 7))  # 4&lt;br /&gt;
0&lt;br /&gt;
2&lt;br /&gt;
4&lt;br /&gt;
list.reverse () 反向列表中元素&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;789&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reverse&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [789, 456, 123]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;789&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reverse&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 对原列表进行排序。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。&lt;br /&gt;
reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。&lt;br /&gt;
该方法没有返回值，但是会对列表的对象进行排序。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;789&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;213&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [123, 213, 456, 789]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reverse&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [789, 456, 213, 123]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 获取列表的第二个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;takeSecond&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;elem&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; elem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;takeSecond&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [(4, 1), (2, 2), (1, 3), (3, 4)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [(1, 3), (2, 2), (3, 4), (4, 1)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[123, 213, 456, 789]&lt;br /&gt;
[789, 456, 213, 123]&lt;br /&gt;
[(4, 1), (2, 2), (1, 3), (3, 4)]&lt;br /&gt;
[(1, 3), (2, 2), (3, 4), (4, 1)]&lt;br /&gt;
 元组&lt;br /&gt;
「元组」定义语法为：(元素 1, 元素 2, ..., 元素 n)&lt;/p&gt;
&lt;p&gt;小括号把所有元素绑在一起&lt;br /&gt;
逗号将每个元素一一分开&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建和访问一个元组&lt;br /&gt;
 Python 的元组与列表类似，不同之处在于 tuple 被创建后就不能对其进行修改，类似字符串。&lt;br /&gt;
元组使用小括号，列表使用方括号。&lt;br /&gt;
元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10.31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10.31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;python&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (1, 10.31, &#39;python&#39;) &amp;lt;class &#39;tuple&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (1, 10.31, &#39;python&#39;) &amp;lt;class &#39;tuple&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tuple1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tuple1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tuple1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (6, 7, 8)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tuple1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (1, 2, 3, 4, 5)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tuple2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tuple1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tuple2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (1, 2, 3, 4, 5, 6, 7, 8)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;(1, 10.31, &#39;python&#39;) &amp;lt;class &#39;tuple&#39;&amp;gt;&lt;br /&gt;
(1, 10.31, &#39;python&#39;) &amp;lt;class &#39;tuple&#39;&amp;gt;&lt;br /&gt;
2&lt;br /&gt;
(6, 7, 8)&lt;br /&gt;
(1, 2, 3, 4, 5)&lt;br /&gt;
(1, 2, 3, 4, 5, 6, 7, 8)&lt;br /&gt;
 创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。&lt;br /&gt;
元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;int&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;tuple&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;list&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;tuple&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &amp;lt;class &#39;tuple&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&amp;lt;class &#39;int&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;tuple&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;tuple&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;tuple&#39;&amp;gt;&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 64&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (8, 8, 8, 8, 8, 8, 8, 8)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】创建二维元组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10.31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# ((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (1, 10.31, &#39;python&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1 10.31 python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (1, 10.31)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))&lt;br /&gt;
(1, 10.31, &#39;python&#39;)&lt;br /&gt;
1 10.31 python&lt;br /&gt;
(1, 10.31)&lt;br /&gt;
 2. 更新和删除一个元组&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;week &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Monday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Tuesday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Thursday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Friday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;week &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; week&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Wednesday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; week&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;week&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Monday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Tuesday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Wednesday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Thursday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Friday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【例子】元组有不可更改 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;immutable&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mutable&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;，那么我们可以直接更改其元素，注意这跟赋值其元素不同。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (1, 2, 3, [4, 5, 6])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (1, 2, 3, [9, 5, 6])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;(1, 2, 3, [4, 5, 6])&lt;br /&gt;
(1, 2, 3, [9, 5, 6])&lt;br /&gt;
 3. 元组相关的操作符&lt;br /&gt;
等号操作符：==&lt;br /&gt;
 连接操作符 +&lt;br /&gt;
 重复操作符 *&lt;br /&gt;
 成员关系操作符 in、not in&lt;br /&gt;
「等号 ==」，只有成员、成员位置都相同时才返回 True。&lt;/p&gt;
&lt;p&gt;元组拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1 &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; t2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1 &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; t3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t1 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; t2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t4&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (123, 456, 456, 123)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t5 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t3 &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (123, 456, 123, 456, 123, 456)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t3 &lt;span class=&#34;token operator&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# (123, 456, 123, 456, 123, 456)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; t3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; t3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;False&lt;br /&gt;
True&lt;br /&gt;
(123, 456, 456, 123)&lt;br /&gt;
(123, 456, 123, 456, 123, 456)&lt;br /&gt;
(123, 456, 123, 456, 123, 456)&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
4. 内置方法&lt;br /&gt;
元组大小和内容都不可更改，因此只有 count 和 index 两种方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10.31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10.31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# \1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1&lt;br /&gt;
1&lt;br /&gt;
count (&#39;python&#39;) 是记录在元组 t 中该元素出现几次，显然是 1 次&lt;br /&gt;
 index (10.31) 是找到该元素在元组 t 的索引，显然是 1&lt;br /&gt;
5. 解压元组&lt;br /&gt;
【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）&lt;/p&gt;
&lt;p&gt;t = (1, 10.31, &#39;python&#39;)&lt;br /&gt;
(a, b, c) = t&lt;br /&gt;
print(a, b, c)&lt;/p&gt;
&lt;h1 id=&#34;1-1031-python&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-1031-python&#34;&gt;#&lt;/a&gt; 1 10.31 python&lt;/h1&gt;
&lt;p&gt;1 10.31 python&lt;br /&gt;
【例子】解压二维元组（按照元组里的元组结构来定义变量）&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10.31&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;OK&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1 10.31 OK python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1 10.31 OK python&lt;br /&gt;
【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 rest 变量。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;rest&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1 2 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rest&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [3, 4]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1 2 5&lt;br /&gt;
[3, 4]&lt;br /&gt;
【例子】如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;_ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1 2&lt;br /&gt;
 字符串&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串的定义&lt;br /&gt;
 Python 中字符串被定义为引号之间的字符集合。&lt;br /&gt;
Python 支持使用成对的 单引号 或 双引号。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;i love Python!&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# i love Python! &amp;lt;class &#39;str&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;I love Python!&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# I love Python! &amp;lt;class &#39;str&#39;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;5&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 58&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;i love Python! &amp;lt;class &#39;str&#39;&amp;gt;&lt;br /&gt;
I love Python! &amp;lt;class &#39;str&#39;&amp;gt;&lt;br /&gt;
13&lt;br /&gt;
58&lt;br /&gt;
Python 的常用转义字符&lt;br /&gt;
转义字符	描述&lt;br /&gt;
 \	反斜杠符号&lt;br /&gt;
 &#39;	单引号&lt;br /&gt;
 &amp;quot;	双引号&lt;br /&gt;
 \n	换行&lt;br /&gt;
 \t	横向制表符 (TAB)&lt;br /&gt;
\r	回车&lt;br /&gt;
【例子】如果字符串中需要出现单引号或双引号，可以使用转义符号 \ 对字符串中的符号进行转义。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;let\&#39;s go&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# let&#39;s go&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;let&#39;s go&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# let&#39;s go&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;C:\\now&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# C:\now&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;C:\\Program Files\\Intel\\Wifi\\Help&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# C:\Program Files\Intel\Wifi\Help&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;let&#39;s go&lt;br /&gt;
let&#39;s go&lt;br /&gt;
C:\now&lt;br /&gt;
C:\Program Files\Intel\Wifi\Help&lt;br /&gt;
【例子】原始字符串只需要在字符串前边加一个英文字母 r 即可。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;r&#39;C:\Program Files\Intel\Wifi\Help&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# C:\Program Files\Intel\Wifi\Help&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;C:\Program Files\Intel\Wifi\Help&lt;br /&gt;
【例子】三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;para_str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;这是一个多行字符串的实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;多行字符串可以使用制表符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;TAB ( \t )。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;也可以使用换行符 [ \n ]。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;para_str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 这是一个多行字符串的实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 多行字符串可以使用制表符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# TAB (    )。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 也可以使用换行符 [&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#  ]。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;para_str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;这是一个多行字符串的实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;多行字符串可以使用制表符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;TAB ( \t )。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;也可以使用换行符 [ \n ]。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;para_str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 这是一个多行字符串的实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 多行字符串可以使用制表符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# TAB (      )。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 也可以使用换行符 [ &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#  ]。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个多行字符串的实例&lt;br /&gt;
多行字符串可以使用制表符&lt;br /&gt;
 TAB (	)。&lt;br /&gt;
也可以使用换行符 [&lt;br /&gt;
]。&lt;/p&gt;
&lt;p&gt;这是一个多行字符串的实例&lt;br /&gt;
多行字符串可以使用制表符&lt;br /&gt;
 TAB (	)。&lt;br /&gt;
也可以使用换行符 [&lt;br /&gt;
]。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;字符串的切片与拼接&lt;br /&gt;
类似于元组具有不可修改性&lt;br /&gt;
从 0 开始 (和 Java 一样)&lt;br /&gt;
 切片通常写成 start:end 这种形式，包括「start 索引」对应的元素，不包括「end 索引」对应的元素。&lt;br /&gt;
索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;I Love LsgoGroup&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# I Love&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# e&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; 插入的字符串 &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; str1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# I Love 插入的字符串  LsgoGroup&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Python&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# Python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# th&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# yth&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# t&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# n&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;I Love&lt;br /&gt;
e&lt;br /&gt;
I Love 插入的字符串  LsgoGroup&lt;br /&gt;
Python&lt;br /&gt;
th&lt;br /&gt;
yth&lt;br /&gt;
t&lt;br /&gt;
n&lt;br /&gt;
3. 字符串的常用内置方法&lt;br /&gt;
 capitalize () 将字符串的第一个字符转换为大写。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xiaoxie&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;capitalize&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# Xiaoxie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Xiaoxie&lt;br /&gt;
lower () 转换字符串中所有大写字符为小写。&lt;br /&gt;
upper () 转换字符串中的小写字母为大写。&lt;br /&gt;
swapcase () 将字符串中大写转换为小写，小写转换为大写。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;DAXIExiaoxie&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lower&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# daxiexiaoxie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;upper&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# DAXIEXIAOXIE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;swapcase&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# daxieXIAOXIE&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;daxiexiaoxie&lt;br /&gt;
DAXIEXIAOXIE&lt;br /&gt;
daxieXIAOXIE&lt;br /&gt;
count (str, beg= 0,end=len (string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;DAXIExiaoxie&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xi&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2&lt;br /&gt;
endswith (suffix, beg=0, end=len (string)) 检查字符串是否以指定子字符串 suffix 结束，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。&lt;br /&gt;
startswith (substr, beg=0,end=len (string)) 检查字符串是否以指定子字符串 substr 开头，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;DAXIExiaoxie&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;endswith&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;endswith&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xi&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;startswith&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Da&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;startswith&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;DA&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;True&lt;br /&gt;
False&lt;br /&gt;
False&lt;br /&gt;
True&lt;br /&gt;
find (str, beg=0, end=len (string)) 检测 str 是否包含在字符串中，如果指定范围 beg 和 end，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。&lt;br /&gt;
rfind (str, beg=0,end=len (string)) 类似于 find () 函数，不过是从右边开始查找。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;DAXIExiaoxie&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xi&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ix&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# -1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rfind&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;xi&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;5&lt;br /&gt;
-1&lt;br /&gt;
9&lt;br /&gt;
isnumeric () 如果字符串中只包含数字字符，则返回 True，否则返回 False。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;12345&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;isnumeric&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str3 &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;isnumeric&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;True&lt;br /&gt;
False&lt;br /&gt;
ljust (width [, fillchar]) 返回一个原字符串左对齐，并使用 fillchar（默认空格）填充至长度 width 的新字符串。&lt;br /&gt;
rjust (width [, fillchar]) 返回一个原字符串右对齐，并使用 fillchar（默认空格）填充至长度 width 的新字符串。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1101&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str4&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ljust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 11010000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str4&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rjust&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 00001101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;11010000&lt;br /&gt;
00001101&lt;br /&gt;
lstrip ([chars]) 截掉字符串左边的空格或指定字符。&lt;br /&gt;
rstrip ([chars]) 删除字符串末尾的空格或指定字符。&lt;br /&gt;
strip ([chars]) 在字符串上执行 lstrip () 和 rstrip ()。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str5 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; I Love LsgoGroup &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str5&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lstrip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &#39;I Love LsgoGroup &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str5&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lstrip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;I&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &#39; Love LsgoGroup &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str5&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rstrip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &#39; I Love LsgoGroup&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str5&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &#39;I Love LsgoGroup&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str5&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &#39;I Love LsgoGrou&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;I Love LsgoGroup&lt;br /&gt;
Love LsgoGroup&lt;br /&gt;
I Love LsgoGroup&lt;br /&gt;
I Love LsgoGroup&lt;br /&gt;
I Love LsgoGrou&lt;br /&gt;
partition (sub) 找到子字符串 sub，把字符串分为一个三元组 (pre_sub,sub,fol_sub)，如果字符串中不包含 sub 则返回 (&#39; 原字符串 &#39;,&#39;&#39;,&#39;&#39;)。&lt;br /&gt;
rpartition (sub) 类似于 partition () 方法，不过是从右边开始查找。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;str5 = &#39; I Love LsgoGroup &#39;&lt;br /&gt;
print(str5.strip().partition(&#39;o&#39;))  # (&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)&lt;br /&gt;
print(str5.strip().partition(&#39;m&#39;))  # (&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)&lt;br /&gt;
print(str5.strip().rpartition(&#39;o&#39;))  # (&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)&lt;br /&gt;
(&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)&lt;br /&gt;
(&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)&lt;br /&gt;
(&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)&lt;br /&gt;
 replace (old, new [, max]) 把 将字符串中的 old 替换成 new，如果 max 指定，则替换不超过 max 次。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str5 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; I Love LsgoGroup &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str5&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;replace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;I&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;We&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# We Love LsgoGroup&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;We Love LsgoGroup&lt;br /&gt;
split (str=&amp;quot;&amp;quot;, num) 不带参数默认是以空格为分隔符切片字符串，如果 num 参数有设置，则仅分隔 num 个子字符串，返回切片后的子字符串拼接的列表。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;str5 = &#39; I Love LsgoGroup &#39;&lt;br /&gt;
print(str5.strip().split())  # [&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]&lt;br /&gt;
print(str5.strip().split(&#39;o&#39;))  # [&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]&lt;br /&gt;
[&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]&lt;br /&gt;
[&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;u = &amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24=&#34;&gt;www.baidu.com.cn&lt;/span&gt;&amp;quot;&lt;/p&gt;
&lt;h1 id=&#34;使用默认分隔符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用默认分隔符&#34;&gt;#&lt;/a&gt; 使用默认分隔符&lt;/h1&gt;
&lt;p&gt;print(u.split())  # [&#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24=&#34;&gt;www.baidu.com.cn&lt;/span&gt;&#39;]&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;以为分隔符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以为分隔符&#34;&gt;#&lt;/a&gt; 以 &amp;quot;.&amp;quot; 为分隔符&lt;/h1&gt;
&lt;p&gt;print((u.split(&#39;.&#39;)))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;分割0次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分割0次&#34;&gt;#&lt;/a&gt; 分割 0 次&lt;/h1&gt;
&lt;p&gt;print((u.split(&amp;quot;.&amp;quot;, 0)))  # [&#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24=&#34;&gt;www.baidu.com.cn&lt;/span&gt;&#39;]&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;分割一次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分割一次&#34;&gt;#&lt;/a&gt; 分割一次&lt;/h1&gt;
&lt;p&gt;print((u.split(&amp;quot;.&amp;quot;, 1)))  # [&#39;www&#39;, &#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JhaWR1LmNvbS5jbg==&#34;&gt;baidu.com.cn&lt;/span&gt;&#39;]&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;分割两次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分割两次&#34;&gt;#&lt;/a&gt; 分割两次&lt;/h1&gt;
&lt;p&gt;print(u.split(&amp;quot;.&amp;quot;, 2))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbS5jbg==&#34;&gt;com.cn&lt;/span&gt;&#39;]&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;分割两次并取序列为1的项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分割两次并取序列为1的项&#34;&gt;#&lt;/a&gt; 分割两次，并取序列为 1 的项&lt;/h1&gt;
&lt;p&gt;print((u.split(&amp;quot;.&amp;quot;, 2)[1]))  # baidu&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;分割两次并把分割后的三个部分保存到三个变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分割两次并把分割后的三个部分保存到三个变量&#34;&gt;#&lt;/a&gt; 分割两次，并把分割后的三个部分保存到三个变量&lt;/h1&gt;
&lt;p&gt;u1, u2, u3 = u.split(&amp;quot;.&amp;quot;, 2)&lt;br /&gt;
print(u1)  # www&lt;br /&gt;
print(u2)  # baidu&lt;br /&gt;
print(u3)  # &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbS5jbg==&#34;&gt;com.cn&lt;/span&gt;&lt;br /&gt;
[&#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24=&#34;&gt;www.baidu.com.cn&lt;/span&gt;&#39;]&lt;br /&gt;
[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]&lt;br /&gt;
[&#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24=&#34;&gt;www.baidu.com.cn&lt;/span&gt;&#39;]&lt;br /&gt;
[&#39;www&#39;, &#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JhaWR1LmNvbS5jbg==&#34;&gt;baidu.com.cn&lt;/span&gt;&#39;]&lt;br /&gt;
[&#39;www&#39;, &#39;baidu&#39;, &#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbS5jbg==&#34;&gt;com.cn&lt;/span&gt;&#39;]&lt;br /&gt;
baidu&lt;br /&gt;
www&lt;br /&gt;
baidu&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbS5jbg==&#34;&gt;com.cn&lt;/span&gt;&lt;br /&gt;
【例子】去掉换行符&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;say&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hello&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;baby&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# say&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# hello&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# baby&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;say&lt;br /&gt;
hello&lt;br /&gt;
baby&lt;br /&gt;
[&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;string &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello boy&amp;lt;[www.baidu.com]&gt;byebye&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;[&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# www.baidu.com&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;[&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20=&#34;&gt;www.baidu.com&lt;/span&gt;&lt;br /&gt;
[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]&lt;br /&gt;
 splitlines ([keepends]) 按照行 (&#39;\r&#39;, &#39;\r\n&#39;, \n&#39;) 分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str6 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;I \n Love \n LsgoGroup&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str6&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;splitlines&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str6&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;splitlines&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# [&#39;I \n&#39;, &#39; Love \n&#39;, &#39; LsgoGroup&#39;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;[&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]&lt;br /&gt;
[&#39;I \n&#39;, &#39; Love \n&#39;, &#39; LsgoGroup&#39;]&lt;br /&gt;
 maketrans (intab, outtab) 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。&lt;br /&gt;
translate (table, deletechars=&amp;quot;&amp;quot;) 根据参数 table 给出的表，转换字符串的字符，要过滤掉的字符放到 deletechars 参数中。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str7 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;this is string example....wow!!!&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;intab &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;aeiou&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;outtab &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;12345&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;trantab &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; str7&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;maketrans&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;intab&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; outtab&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;trantab&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &amp;#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str7&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;translate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;trantab&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# th3s 3s str3ng 2x1mpl2....w4w!!!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;{97: 49, 101: 50, 105: 51, 111: 52, 117: 53}&lt;br /&gt;
th3s 3s str3ng 2x1mpl2....w4w!!!&lt;br /&gt;
4. 字符串格式化&lt;br /&gt;
 format 格式化函数&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str8 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;#123;0&amp;#125; Love &amp;#123;1&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;I&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Lsgogroup&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 位置参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str8&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# I Love Lsgogroup&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str8 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;#123;a&amp;#125; Love &amp;#123;b&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;I&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Lsgogroup&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 关键字参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str8&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# I Love Lsgogroup&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str8 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;#123;0&amp;#125; Love &amp;#123;b&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;I&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Lsgogroup&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 位置参数要在关键字参数之前&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str8&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# I Love Lsgogroup&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str8 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;#123;0:.2f&amp;#125;&amp;#123;1&amp;#125;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;27.658&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;GB&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 保留小数点后两位&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str8&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 27.66GB&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;I Love Lsgogroup&lt;br /&gt;
I Love Lsgogroup&lt;br /&gt;
I Love Lsgogroup&lt;br /&gt;
27.66GB&lt;br /&gt;
Python 字符串格式化符号&lt;br /&gt;
符 号	描述&lt;br /&gt;
 % c	格式化字符及其 ASCII 码&lt;br /&gt;
 % s	格式化字符串，用 str () 方法处理对象&lt;br /&gt;
 % r	格式化字符串，用 rper () 方法处理对象&lt;br /&gt;
 % d	格式化整数&lt;br /&gt;
 % o	格式化无符号八进制数&lt;br /&gt;
 % x	格式化无符号十六进制数&lt;br /&gt;
 % X	格式化无符号十六进制数（大写）&lt;br /&gt;
% f	格式化浮点数字，可指定小数点后的精度&lt;br /&gt;
 % e	用科学计数法格式化浮点数&lt;br /&gt;
 % E	作用同 % e，用科学计数法格式化浮点数&lt;br /&gt;
 % g	根据值的大小决定使用 % f 或 % e&lt;br /&gt;
% G	作用同 % g，根据值的大小决定使用 % f 或 % E&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%c&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%c %c %c&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# a b c&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%d + %d = %d&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 4 + 5 = 9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我叫 %s 今年 %d 岁!&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 我叫 小明 今年 10 岁！&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%o&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%x&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%X&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%f&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27.658&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 27.658000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%e&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27.658&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2.765800e+01&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%E&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27.658&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2.765800E+01&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%g&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27.658&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 27.658&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;text &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;I am %d years old.&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;I said: %s.&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# I said: I am 22 years old..&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;I said: %r.&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# I said: &#39;I am 22 years old.&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;a&lt;br /&gt;
a b c&lt;br /&gt;
4 + 5 = 9&lt;br /&gt;
 我叫 小明 今年 10 岁！&lt;br /&gt;
12&lt;br /&gt;
a&lt;br /&gt;
A&lt;br /&gt;
27.658000&lt;br /&gt;
2.765800e+01&lt;br /&gt;
2.765800E+01&lt;br /&gt;
27.658&lt;br /&gt;
I said: I am 22 years old..&lt;br /&gt;
I said: &#39;I am 22 years old.&#39;.&lt;br /&gt;
 格式化操作符辅助指令&lt;br /&gt;
符号	功能&lt;br /&gt;
 m.n	m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用作左对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;在正数前面显示加号 (+)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;在八进制数前面显示零0在十六进制前面显示0x或者0x取决于用的是x还是x&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在八进制数前面显示零0在十六进制前面显示0x或者0x取决于用的是x还是x&#34;&gt;#&lt;/a&gt; 在八进制数前面显示零 (&#39;0&#39;)，在十六进制前面显示 &#39;0x&#39; 或者 &#39;0X&#39;(取决于用的是 &#39;x&#39; 还是 &#39;X&#39;)&lt;/h1&gt;
&lt;p&gt;0	显示的数字前面填充 &#39;0&#39; 而不是默认的空格&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%5.1f&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27.658&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &#39; 27.7&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%.2e&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;27.658&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2.77e+01&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%10d&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &#39;        10&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%-10d&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# &#39;10        &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%+d&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# +10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%#o&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0o12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%#x&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;108&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0x6c&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%010d&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0000000005&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;27.7&lt;br /&gt;
2.77e+01&lt;br /&gt;
10&lt;br /&gt;
10&lt;br /&gt;
+10&lt;br /&gt;
0o12&lt;br /&gt;
0x6c&lt;br /&gt;
0000000005&lt;br /&gt;
 字典&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可变类型与不可变类型&lt;br /&gt;
序列是以连续的整数为索引，与此不同的是，字典以 &amp;quot;关键字&amp;quot; 为索引，关键字可以是任意不可变类型，通常用字符串或数值。&lt;br /&gt;
字典是 Python 唯一的一个 映射类型，字符串、元组、列表属于序列类型。&lt;br /&gt;
那么如何快速判断一个数据类型 X 是不是可变类型的呢？两种方法：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;麻烦方法：用 id (X) 函数，对 X 进行某种操作，比较操作前后的 id，如果不一样，则 X 不可变，如果一样，则 X 可变。&lt;br /&gt;
便捷方法：用 hash (X)，只要不报错，证明 X 可被哈希，即不可变，反过来不可被哈希，即可变。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 140732167000896&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 140732167000960&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;l &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;l&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 4300825160&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;l&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 4300825160&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;140731832701760&lt;br /&gt;
140731832701824&lt;br /&gt;
2131670369800&lt;br /&gt;
2131670369800&lt;br /&gt;
 整数 i 在加 1 之后的 id 和之前不一样，因此加完之后的这个 i (虽然名字没变)，但不是加之前的那个 i 了，因此整数是不可变类型。&lt;br /&gt;
列表 l 在附加 &#39;Python&#39; 之后的 id 和之前一样，因此列表是可变类型。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 7047218704141848153&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1704535747474881831&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# TypeError: unhashable type: &#39;list&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;-6668157630988609386-1857436431894091236&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-6668157630988609386-1857436431894091236&#34;&gt;#&lt;/a&gt; ​&lt;br /&gt;
​&lt;br /&gt;
-6668157630988609386&lt;br /&gt;
-1857436431894091236&lt;/h2&gt;
&lt;p&gt;TypeError                                 Traceback (most recent call last)&lt;br /&gt;
&amp;lt;ipython-input-1-6416367464f8&amp;gt; in &amp;lt;module&amp;gt;()&lt;br /&gt;
3 print(hash((1, 2, &#39;Python&#39;)))  # 1704535747474881831&lt;br /&gt;
4&lt;br /&gt;
----&amp;gt; 5 print(hash([1, 2, &#39;Python&#39;]))&lt;br /&gt;
6 # TypeError: unhashable type: &#39;list&#39;&lt;/p&gt;
&lt;p&gt;TypeError: unhashable type: &#39;list&#39;&lt;br /&gt;
print(hash({1, 2, 3}))&lt;/p&gt;
&lt;h1 id=&#34;typeerror-unhashable-type-set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typeerror-unhashable-type-set&#34;&gt;#&lt;/a&gt; TypeError: unhashable type: &#39;set&#39;&lt;/h1&gt;
&lt;p&gt;数值、字符和元组 都能被哈希，因此它们是不可变类型。&lt;br /&gt;
列表、集合、字典不能被哈希，因此它是可变类型。&lt;br /&gt;
2. 字典的定义&lt;br /&gt;
字典 是无序的 键：值（key:value）对集合，键必须是互不相同的（在同一个字典之内）。&lt;/p&gt;
&lt;p 元素1,=&#34;&#34; 元素2,=&#34;&#34; css-module=&#34;.,&#34; 元素n=&#34;&#34;&gt;dict 内部存放的顺序和 key 放入的顺序是没有关系的。&lt;br /&gt;
dict 查找和插入的速度极快，不会随着 key 的增加而增加，但是需要占用大量的内存。&lt;br /&gt;
字典 定义语法为&lt;/p&gt;
&lt;p&gt;其中每一个元素是一个「键值对」-- 键：值 (key:value)&lt;br /&gt;
 关键点是「大括号 {}」,「逗号，」和「冒号 :」&lt;br /&gt;
大括号 -- 把所有元素绑在一起&lt;br /&gt;
逗号 -- 将每个键值对分开&lt;br /&gt;
冒号 -- 将键和值分开&lt;br /&gt;
 3. 创建和访问字典&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;brand = [&#39; 李宁 &#39;, &#39; 耐克 &#39;, &#39; 阿迪达斯 &#39;]&lt;br /&gt;
 slogan = [&#39; 一切皆有可能 &#39;, &#39;Just do it&#39;, &#39;Impossible is nothing&#39;]&lt;br /&gt;
 print (&#39; 耐克的口号是:&#39;, slogan [brand.index (&#39; 耐克 &#39;)])&lt;/p&gt;
&lt;h1 id=&#34;耐克的口号是-just-do-it&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#耐克的口号是-just-do-it&#34;&gt;#&lt;/a&gt; 耐克的口号是: Just do it&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
dic = {&#39; 李宁 &#39;: &#39; 一切皆有可能 &#39;, &#39; 耐克 &#39;: &#39;Just do it&#39;, &#39; 阿迪达斯 &#39;: &#39;Impossible is nothing&#39;}&lt;br /&gt;
 print (&#39; 耐克的口号是:&#39;, dic [&#39; 耐克 &#39;])&lt;/p&gt;
&lt;h1 id=&#34;耐克的口号是-just-do-it-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#耐克的口号是-just-do-it-2&#34;&gt;#&lt;/a&gt; 耐克的口号是: Just do it&lt;/h1&gt;
&lt;p&gt;耐克的口号是: Just do it&lt;br /&gt;
 耐克的口号是: Just do it&lt;br /&gt;
【例子】通过字符串或数值作为 key 来创建字典。&lt;/p&gt;
&lt;h2 id=&#34;dic1-1-one-2-two-3-threeprintdic1-1-one-2-two-3-threeprintdic11-oneprintdic14-keyerror-41-one-2-two-3-threeone&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dic1-1-one-2-two-3-threeprintdic1-1-one-2-two-3-threeprintdic11-oneprintdic14-keyerror-41-one-2-two-3-threeone&#34;&gt;#&lt;/a&gt; dic1 = {1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;}&lt;br /&gt;
print(dic1)  # {1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;}&lt;br /&gt;
print(dic1[1])  # one&lt;br /&gt;
print(dic1[4])  # KeyError: 4&lt;br /&gt;
​&lt;br /&gt;
{1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;}&lt;br /&gt;
one&lt;/h2&gt;
&lt;p&gt;KeyError                                  Traceback (most recent call last)&lt;br /&gt;
&amp;lt;ipython-input-2-bb8d02bd63a3&amp;gt; in &amp;lt;module&amp;gt;()&lt;br /&gt;
2 print(dic1)  # {1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;}&lt;br /&gt;
3 print(dic1[1])  # one&lt;br /&gt;
----&amp;gt; 4 print(dic1[4])  # KeyError: 4&lt;/p&gt;
&lt;p&gt;KeyError: 4&lt;br /&gt;
dic2 = {&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67}&lt;br /&gt;
print(dic2)  # {&#39;wheat&#39;: 101, &#39;corn&#39;: 67, &#39;rice&#39;: 35}&lt;br /&gt;
print(dic2[&#39;rice&#39;])  # 35&lt;br /&gt;
{&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67}&lt;br /&gt;
35&lt;br /&gt;
 注意：如果我们取的键在字典中不存在，会直接报错 KeyError。&lt;/p&gt;
&lt;p&gt;【例子】通过元组作为 key 来创建字典，但一般不这样使用。&lt;/p&gt;
&lt;p&gt;dic = {(1, 2, 3): &amp;quot;Tom&amp;quot;, &amp;quot;Age&amp;quot;: 12, 3: [3, 5, 7]}&lt;br /&gt;
print(dic)  # {(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]}&lt;br /&gt;
print(type(dic))  # &amp;lt;class &#39;dict&#39;&amp;gt;&lt;br /&gt;
{(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]}&lt;br /&gt;
&amp;lt;class &#39;dict&#39;&amp;gt;&lt;br /&gt;
 通过构造函数 dict 来创建字典。&lt;/p&gt;
&lt;p&gt;dict () 创建一个空的字典。&lt;br /&gt;
【例子】通过 key 直接把数据放入字典中，但一个 key 只能对应一个 value，多次对一个 key 放入 value，后面的值会把前面的值冲掉。&lt;/p&gt;
&lt;p&gt;dic = dict()&lt;br /&gt;
dic[&#39;a&#39;] = 1&lt;br /&gt;
dic[&#39;b&#39;] = 2&lt;br /&gt;
dic[&#39;c&#39;] = 3&lt;br /&gt;
​&lt;br /&gt;
print(dic)&lt;/p&gt;
&lt;h1 a:=&#34;&#34; 1,=&#34;&#34; b:=&#34;&#34; 2,=&#34;&#34; c:=&#34;&#34; 3=&#34;&#34; id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
dic[&#39;a&#39;] = 11&lt;br /&gt;
print(dic)&lt;/p&gt;
&lt;h1 a:=&#34;&#34; 11,=&#34;&#34; b:=&#34;&#34; 2,=&#34;&#34; c:=&#34;&#34; 3=&#34;&#34; id=&#34;-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-2&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
dic[&#39;d&#39;] = 4&lt;br /&gt;
print(dic)&lt;/p&gt;
&lt;h1 a:=&#34;&#34; 11,=&#34;&#34; b:=&#34;&#34; 2,=&#34;&#34; c:=&#34;&#34; 3,=&#34;&#34; d:=&#34;&#34; 4=&#34;&#34; id=&#34;-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-3&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}&lt;br /&gt;
{&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3}&lt;br /&gt;
{&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}&lt;br /&gt;
dict(mapping) new dictionary initialized from a mapping object&#39;s (key, value) pairs&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic1 = dict([(&#39;apple&#39;, 4139), (&#39;peach&#39;, 4127), (&#39;cherry&#39;, 4098)])&lt;br /&gt;
print(dic1)  # {&#39;cherry&#39;: 4098, &#39;apple&#39;: 4139, &#39;peach&#39;: 4127}&lt;br /&gt;
​&lt;br /&gt;
dic2 = dict(((&#39;apple&#39;, 4139), (&#39;peach&#39;, 4127), (&#39;cherry&#39;, 4098)))&lt;br /&gt;
print(dic2)  # {&#39;peach&#39;: 4127, &#39;cherry&#39;: 4098, &#39;apple&#39;: 4139}&lt;br /&gt;
{&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098}&lt;br /&gt;
{&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098}&lt;br /&gt;
dict(**kwargs) -&amp;gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)&lt;br /&gt;
【例子】这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误。&lt;/p&gt;
&lt;p&gt;dic = dict(name=&#39;Tom&#39;, age=10)&lt;br /&gt;
print(dic)  # {&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10}&lt;br /&gt;
print(type(dic))  # &amp;lt;class &#39;dict&#39;&amp;gt;&lt;br /&gt;
{&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10}&lt;br /&gt;
&amp;lt;class &#39;dict&#39;&amp;gt;&lt;br /&gt;
4. 字典的内置方法&lt;br /&gt;
 dict.fromkeys (seq [, value]) 用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;seq = (&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;)&lt;br /&gt;
dic1 = dict.fromkeys(seq)&lt;br /&gt;
print(dic1)&lt;/p&gt;
&lt;h1 name:=&#34;&#34; None,=&#34;&#34; age:=&#34;&#34; None,=&#34;&#34; sex:=&#34;&#34; None=&#34;&#34; id=&#34;-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-4&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
dic2 = dict.fromkeys(seq, 10)&lt;br /&gt;
print(dic2)&lt;/p&gt;
&lt;h1 name:=&#34;&#34; 10,=&#34;&#34; age:=&#34;&#34; 10,=&#34;&#34; sex:=&#34;&#34; 10=&#34;&#34; id=&#34;-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-5&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
dic3 = dict.fromkeys (seq, (&#39; 小马 &#39;, &#39;8&#39;, &#39; 男 &#39;))&lt;br /&gt;
print(dic3)&lt;/p&gt;
&lt;h1 name:=&#34;&#34; (小马,=&#34;&#34; 8,=&#34;&#34; 男),=&#34;&#34; age:=&#34;&#34; (小马,=&#34;&#34; 8,=&#34;&#34; 男),=&#34;&#34; sex:=&#34;&#34; (小马,=&#34;&#34; 8,=&#34;&#34; 男)=&#34;&#34; id=&#34;-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-6&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;{&#39;name&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None}&lt;br /&gt;
{&#39;name&#39;: 10, &#39;age&#39;: 10, &#39;sex&#39;: 10}&lt;br /&gt;
{&#39;name&#39;: (&#39; 小马 &#39;, &#39;8&#39;, &#39; 男 &#39;), &#39;age&#39;: (&#39; 小马 &#39;, &#39;8&#39;, &#39; 男 &#39;), &#39;sex&#39;: (&#39; 小马 &#39;, &#39;8&#39;, &#39; 男 &#39;)}&lt;br /&gt;
 dict.keys () 返回一个可迭代对象，可以使用 list () 来转换为列表，列表为字典中的所有键。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic = {&#39;Name&#39;: &#39;lsgogroup&#39;, &#39;Age&#39;: 7}&lt;br /&gt;
print(dic.keys())  # dict_keys([&#39;Name&#39;, &#39;Age&#39;])&lt;br /&gt;
 lst = list (dic.keys ())  # 转换为列表&lt;br /&gt;
 print (lst)  # [&#39;Name&#39;, &#39;Age&#39;]&lt;br /&gt;
dict_keys([&#39;Name&#39;, &#39;Age&#39;])&lt;br /&gt;
[&#39;Name&#39;, &#39;Age&#39;]&lt;br /&gt;
 dict.values () 返回一个迭代器，可以使用 list () 来转换为列表，列表为字典中的所有值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic = {&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Zara&#39;}&lt;br /&gt;
print(dic.values())&lt;/p&gt;
&lt;h1 id=&#34;dict_valuesfemale-7-zara&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dict_valuesfemale-7-zara&#34;&gt;#&lt;/a&gt; dict_values([&#39;female&#39;, 7, &#39;Zara&#39;])&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(list(dic.values()))&lt;/p&gt;
&lt;h1 id=&#34;7-female-zara&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-female-zara&#34;&gt;#&lt;/a&gt; [7, &#39;female&#39;, &#39;Zara&#39;]&lt;/h1&gt;
&lt;p&gt;dict_values([&#39;female&#39;, 7, &#39;Zara&#39;])&lt;br /&gt;
[&#39;female&#39;, 7, &#39;Zara&#39;]&lt;br /&gt;
 dict.items () 以列表返回可遍历的 (键，值) 元组数组。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic = {&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7}&lt;br /&gt;
print(dic.items())&lt;/p&gt;
&lt;h1 id=&#34;dict_itemsname-lsgogroup-age-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dict_itemsname-lsgogroup-age-7&#34;&gt;#&lt;/a&gt; dict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(tuple(dic.items()))&lt;/p&gt;
&lt;h1 id=&#34;name-lsgogroup-age-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#name-lsgogroup-age-7&#34;&gt;#&lt;/a&gt; ((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(list(dic.items()))&lt;/p&gt;
&lt;h1 id=&#34;name-lsgogroup-age-7-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#name-lsgogroup-age-7-2&#34;&gt;#&lt;/a&gt; [(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]&lt;/h1&gt;
&lt;p&gt;dict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])&lt;br /&gt;
((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))&lt;br /&gt;
[(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]&lt;br /&gt;
 dict.get (key, default=None) 返回指定键的值，如果值不在字典中返回默认值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic = {&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27}&lt;br /&gt;
 print (&amp;quot;Age 值为 : % s&amp;quot; % dic.get (&#39;Age&#39;))  # Age 值为 : 27&lt;br /&gt;
print (&amp;quot;Sex 值为 : % s&amp;quot; % dic.get (&#39;Sex&#39;, &amp;quot;NA&amp;quot;))  # Sex 值为 : NA&lt;br /&gt;
print(dic)  # {&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27}&lt;br /&gt;
 Age 值为 : 27&lt;br /&gt;
Sex 值为 : NA&lt;br /&gt;
{&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27}&lt;br /&gt;
 dict.setdefault (key, default=None) 和 get () 方法 类似，如果键不存在于字典中，将会添加键并将值设为默认值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic = {&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7}&lt;br /&gt;
 print (&amp;quot;Age 键的值为 : % s&amp;quot; % dic.setdefault (&#39;Age&#39;, None))  # Age 键的值为 : 7&lt;br /&gt;
print (&amp;quot;Sex 键的值为 : % s&amp;quot; % dic.setdefault (&#39;Sex&#39;, None))  # Sex 键的值为 : None&lt;br /&gt;
print(dic)&lt;/p&gt;
&lt;h1 Age:=&#34;&#34; 7,=&#34;&#34; Name:=&#34;&#34; Lsgogroup,=&#34;&#34; Sex:=&#34;&#34; None=&#34;&#34; id=&#34;-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-7&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;Age 键的值为 : 7&lt;br /&gt;
Sex 键的值为 : None&lt;br /&gt;
{&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Sex&#39;: None}&lt;br /&gt;
 key in dict in 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回 true，否则返回 false。而 not in 操作符刚好相反，如果键在字典 dict 里返回 false，否则返回 true。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic = {&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7}&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;in-检测键-age-是否存在&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#in-检测键-age-是否存在&#34;&gt;#&lt;/a&gt; in 检测键 Age 是否存在&lt;/h1&gt;
&lt;p&gt;if &#39;Age&#39; in dic:&lt;br /&gt;
print (&amp;quot;键 Age 存在&amp;quot;)&lt;br /&gt;
else:&lt;br /&gt;
print (&amp;quot;键 Age 不存在&amp;quot;)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;检测键-sex-是否存在&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检测键-sex-是否存在&#34;&gt;#&lt;/a&gt; 检测键 Sex 是否存在&lt;/h1&gt;
&lt;p&gt;if &#39;Sex&#39; in dic:&lt;br /&gt;
print (&amp;quot;键 Sex 存在&amp;quot;)&lt;br /&gt;
else:&lt;br /&gt;
print (&amp;quot;键 Sex 不存在&amp;quot;)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;not-in-检测键-age-是否存在&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#not-in-检测键-age-是否存在&#34;&gt;#&lt;/a&gt; not in 检测键 Age 是否存在&lt;/h1&gt;
&lt;p&gt;if &#39;Age&#39; not in dic:&lt;br /&gt;
print (&amp;quot;键 Age 不存在&amp;quot;)&lt;br /&gt;
else:&lt;br /&gt;
print (&amp;quot;键 Age 存在&amp;quot;)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;键-age-存在&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#键-age-存在&#34;&gt;#&lt;/a&gt; 键 Age 存在&lt;/h1&gt;
&lt;h1 id=&#34;键-sex-不存在&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#键-sex-不存在&#34;&gt;#&lt;/a&gt; 键 Sex 不存在&lt;/h1&gt;
&lt;h1 id=&#34;键-age-存在-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#键-age-存在-2&#34;&gt;#&lt;/a&gt; 键 Age 存在&lt;/h1&gt;
&lt;p&gt;键 Age 存在&lt;br /&gt;
键 Sex 不存在&lt;br /&gt;
键 Age 存在&lt;br /&gt;
 dict.pop (key [,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。key 值必须给出。若 key 不存在，则返回 default 值。&lt;br /&gt;
del dict [key] 删除字典给定键 key 所对应的值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic1 = {1: &amp;quot;a&amp;quot;, 2: [1, 2]}&lt;br /&gt;
print(dic1.pop(1), dic1)  # a {2: [1, 2]}&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;设置默认值必须添加否则报错&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置默认值必须添加否则报错&#34;&gt;#&lt;/a&gt; 设置默认值，必须添加，否则报错&lt;/h1&gt;
&lt;p&gt;print(dic1.pop(3, &amp;quot;nokey&amp;quot;), dic1)  # nokey {2: [1, 2]}&lt;br /&gt;
​&lt;br /&gt;
del dic1[2]&lt;br /&gt;
print(dic1)  # {}&lt;br /&gt;
a {2: [1, 2]}&lt;br /&gt;
nokey {2: [1, 2]}&lt;br /&gt;
{}&lt;br /&gt;
 dict.popitem () 随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出 KeyError 异常。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic1 = {1: &amp;quot;a&amp;quot;, 2: [1, 2]}&lt;br /&gt;
print(dic1.popitem())  # {2: [1, 2]}&lt;br /&gt;
print(dic1)  # (1, &#39;a&#39;)&lt;br /&gt;
(2, [1, 2])&lt;br /&gt;
{1: &#39;a&#39;}&lt;br /&gt;
 dict.clear () 用于删除字典内所有元素。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic = {&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7}&lt;br /&gt;
 print (&amp;quot;字典长度 : % d&amp;quot; % len (dic))  # 字典长度 : 2&lt;br /&gt;
dic.clear()&lt;br /&gt;
 print (&amp;quot;字典删除后长度 : % d&amp;quot; % len (dic))&lt;/p&gt;
&lt;h1 id=&#34;字典删除后长度-0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典删除后长度-0&#34;&gt;#&lt;/a&gt; 字典删除后长度 : 0&lt;/h1&gt;
&lt;p&gt;字典长度 : 2&lt;br /&gt;
 字典删除后长度 : 0&lt;br /&gt;
dict.copy () 返回一个字典的浅复制。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic1 = {&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;}&lt;br /&gt;
dic2 = dic1.copy()&lt;br /&gt;
print(&amp;quot;dic2&amp;quot;)&lt;/p&gt;
&lt;h1 Age:=&#34;&#34; 7,=&#34;&#34; Name:=&#34;&#34; Lsgogroup,=&#34;&#34; Class:=&#34;&#34; First=&#34;&#34; id=&#34;-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-8&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;dic2&lt;br /&gt;
【例子】直接赋值和 copy 的区别&lt;/p&gt;
&lt;p&gt;dic1 = {&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [1, 2, 3]}&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;引用对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用对象&#34;&gt;#&lt;/a&gt; 引用对象&lt;/h1&gt;
&lt;p&gt;dic2 = dic1&lt;/p&gt;
&lt;h1 id=&#34;浅拷贝父对象一级目录子对象二级目录不拷贝还是引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浅拷贝父对象一级目录子对象二级目录不拷贝还是引用&#34;&gt;#&lt;/a&gt; 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用&lt;/h1&gt;
&lt;p&gt;dic3 = dic1.copy()&lt;br /&gt;
​&lt;br /&gt;
print(id(dic1))  # 148635574728&lt;br /&gt;
print(id(dic2))  # 148635574728&lt;br /&gt;
print(id(dic3))  # 148635574344&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;修改-data-数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改-data-数据&#34;&gt;#&lt;/a&gt; 修改 data 数据&lt;/h1&gt;
&lt;p&gt;dic1[&#39;user&#39;] = &#39;root&#39;&lt;br /&gt;
dic1[&#39;num&#39;].remove(1)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;输出结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出结果&#34;&gt;#&lt;/a&gt; 输出结果&lt;/h1&gt;
&lt;p&gt;print(dic1)  # {&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]}&lt;br /&gt;
print(dic2)  # {&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]}&lt;br /&gt;
print(dic3)  # {&#39;user&#39;: &#39;runoob&#39;, &#39;num&#39;: [2, 3]}&lt;br /&gt;
2131669221448&lt;br /&gt;
2131669221448&lt;br /&gt;
2131669225120&lt;br /&gt;
{&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]}&lt;br /&gt;
{&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]}&lt;br /&gt;
{&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [2, 3]}&lt;br /&gt;
 dict.update (dict2) 把字典参数 dict2 的 key:value 对 更新到字典 dict 里。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;dic = {&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7}&lt;br /&gt;
dic2 = {&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 8}&lt;br /&gt;
dic.update(dic2)&lt;br /&gt;
print(dic)&lt;/p&gt;
&lt;h1 Sex:=&#34;&#34; female,=&#34;&#34; Age:=&#34;&#34; 8,=&#34;&#34; Name:=&#34;&#34; Lsgogroup=&#34;&#34; id=&#34;-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-9&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;{&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 8, &#39;Sex&#39;: &#39;female&#39;}&lt;br /&gt;
 集合&lt;br /&gt;
 Python 中 set 与 dict 类似，也是一组 key 的集合，但不存储 value。由于 key 不能重复，所以，在 set 中，没有重复的 key。&lt;/p&gt;
&lt;p&gt;注意，key 为不可变类型，即可哈希的值。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;num = {}&lt;br /&gt;
print(type(num))  # &amp;lt;class &#39;dict&#39;&amp;gt;&lt;br /&gt;
num = {1, 2, 3, 4}&lt;br /&gt;
print(type(num))  # &amp;lt;class &#39;set&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;dict&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;set&#39;&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集合的创建&lt;br /&gt;
先创建对象再加入元素。&lt;br /&gt;
在创建空集合的时候只能使用 s = set ()，因为 s = {} 创建的是空字典。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;basket = set()&lt;br /&gt;
basket.add(&#39;apple&#39;)&lt;br /&gt;
basket.add(&#39;banana&#39;)&lt;br /&gt;
print(basket)  # {&#39;banana&#39;, &#39;apple&#39;}&lt;br /&gt;
{&#39;banana&#39;, &#39;apple&#39;}&lt;br /&gt;
 直接把一堆元素用花括号括起来 {元素 1, 元素 2, ..., 元素 n}。&lt;br /&gt;
重复元素在 set 中会被自动被过滤。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;basket = {&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;}&lt;br /&gt;
print(basket)  # {&#39;banana&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;}&lt;br /&gt;
{&#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;}&lt;br /&gt;
 使用 set (value) 工厂函数，把列表或元组转换成集合。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = set(&#39;abracadabra&#39;)&lt;br /&gt;
print(a)&lt;/p&gt;
&lt;h1 r,=&#34;&#34; b,=&#34;&#34; d,=&#34;&#34; c,=&#34;&#34; a=&#34;&#34; id=&#34;-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-10&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
b = set((&amp;quot;Google&amp;quot;, &amp;quot;Lsgogroup&amp;quot;, &amp;quot;Taobao&amp;quot;, &amp;quot;Taobao&amp;quot;))&lt;br /&gt;
print(b)&lt;/p&gt;
&lt;h1 Taobao,=&#34;&#34; Lsgogroup,=&#34;&#34; Google=&#34;&#34; id=&#34;-11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-11&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
c = set([&amp;quot;Google&amp;quot;, &amp;quot;Lsgogroup&amp;quot;, &amp;quot;Taobao&amp;quot;, &amp;quot;Google&amp;quot;])&lt;br /&gt;
print(c)&lt;/p&gt;
&lt;h1 Taobao,=&#34;&#34; Lsgogroup,=&#34;&#34; Google=&#34;&#34; id=&#34;-12&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-12&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;{&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;}&lt;br /&gt;
{&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;}&lt;br /&gt;
【例子】去掉列表中重复的元素&lt;/p&gt;
&lt;p&gt;lst = [0, 1, 2, 3, 4, 5, 5, 3, 1]&lt;br /&gt;
​&lt;br /&gt;
temp = []&lt;br /&gt;
for item in lst:&lt;br /&gt;
if item not in temp:&lt;br /&gt;
temp.append(item)&lt;br /&gt;
​&lt;br /&gt;
print(temp)  # [0, 1, 2, 3, 4, 5]&lt;br /&gt;
​&lt;br /&gt;
a = set(lst)&lt;br /&gt;
print(list(a))  # [0, 1, 2, 3, 4, 5]&lt;br /&gt;
[0, 1, 2, 3, 4, 5]&lt;br /&gt;
[0, 1, 2, 3, 4, 5]&lt;br /&gt;
 从结果发现集合的两个特点：无序 (unordered) 和唯一 (unique)。&lt;/p&gt;
&lt;p&gt;由于 set 存储的是无序集合，所以我们不可以为集合创建索引或执行切片 (slice) 操作，也没有键 (keys) 可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;访问集合中的值&lt;br /&gt;
可以使用 len () 內建函数得到集合的大小。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])&lt;br /&gt;
print(len(s))  # 3&lt;br /&gt;
3&lt;br /&gt;
 可以使用 for 把集合中的数据一个个读取出来。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])&lt;br /&gt;
for item in s:&lt;br /&gt;
print(item)&lt;/p&gt;
&lt;h1 id=&#34;baidu&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#baidu&#34;&gt;#&lt;/a&gt; Baidu&lt;/h1&gt;
&lt;h1 id=&#34;google&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#google&#34;&gt;#&lt;/a&gt; Google&lt;/h1&gt;
&lt;h1 id=&#34;taobao&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#taobao&#34;&gt;#&lt;/a&gt; Taobao&lt;/h1&gt;
&lt;p&gt;Baidu&lt;br /&gt;
Taobao&lt;br /&gt;
Google&lt;br /&gt;
 可以通过 in 或 not in 判断一个元素是否在集合中已经存在&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])&lt;br /&gt;
print(&#39;Taobao&#39; in s)  # True&lt;br /&gt;
print(&#39;Facebook&#39; not in s)  # True&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
3. 集合的内置方法&lt;br /&gt;
 set.add (elmnt) 用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;fruits = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;}&lt;br /&gt;
fruits.add(&amp;quot;orange&amp;quot;)&lt;br /&gt;
print(fruits)&lt;/p&gt;
&lt;h1 orange,=&#34;&#34; cherry,=&#34;&#34; banana,=&#34;&#34; apple=&#34;&#34; id=&#34;-13&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-13&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
fruits.add(&amp;quot;apple&amp;quot;)&lt;br /&gt;
print(fruits)&lt;/p&gt;
&lt;h1 orange,=&#34;&#34; cherry,=&#34;&#34; banana,=&#34;&#34; apple=&#34;&#34; id=&#34;-14&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-14&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;{&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;}&lt;br /&gt;
{&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;}&lt;br /&gt;
 set.update (set) 用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;}&lt;br /&gt;
y = {&amp;quot;google&amp;quot;, &amp;quot;baidu&amp;quot;, &amp;quot;apple&amp;quot;}&lt;br /&gt;
x.update(y)&lt;br /&gt;
print(x)&lt;/p&gt;
&lt;h1 cherry,=&#34;&#34; banana,=&#34;&#34; apple,=&#34;&#34; google,=&#34;&#34; baidu=&#34;&#34; id=&#34;-15&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-15&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
y.update([&amp;quot;lsgo&amp;quot;, &amp;quot;dreamtech&amp;quot;])&lt;br /&gt;
print(y)&lt;/p&gt;
&lt;h1 lsgo,=&#34;&#34; baidu,=&#34;&#34; dreamtech,=&#34;&#34; apple,=&#34;&#34; google=&#34;&#34; id=&#34;-16&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-16&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;{&#39;google&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;apple&#39;, &#39;baidu&#39;}&lt;br /&gt;
{&#39;apple&#39;, &#39;dreamtech&#39;, &#39;lsgo&#39;, &#39;google&#39;, &#39;baidu&#39;}&lt;br /&gt;
 set.remove (item) 用于移除集合中的指定元素。如果元素不存在，则会发生错误。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;fruits = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;}&lt;br /&gt;
fruits.remove(&amp;quot;banana&amp;quot;)&lt;br /&gt;
print(fruits)  # {&#39;apple&#39;, &#39;cherry&#39;}&lt;br /&gt;
{&#39;cherry&#39;, &#39;apple&#39;}&lt;br /&gt;
 set.discard (value) 用于移除指定的集合元素。remove () 方法在移除一个不存在的元素时会发生错误，而 discard () 方法不会。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;fruits = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;}&lt;br /&gt;
fruits.discard(&amp;quot;banana&amp;quot;)&lt;br /&gt;
print(fruits)  # {&#39;apple&#39;, &#39;cherry&#39;}&lt;br /&gt;
{&#39;cherry&#39;, &#39;apple&#39;}&lt;br /&gt;
 set.pop () 用于随机移除一个元素。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;fruits = {&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;}&lt;br /&gt;
x = fruits.pop()&lt;br /&gt;
print(fruits)  # {&#39;cherry&#39;, &#39;apple&#39;}&lt;br /&gt;
print(x)  # banana&lt;br /&gt;
{&#39;banana&#39;, &#39;apple&#39;}&lt;br /&gt;
cherry&lt;br /&gt;
 由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。&lt;/p&gt;
&lt;p&gt;set.intersection (set1, set2) 返回两个集合的交集。&lt;br /&gt;
set1 &amp;amp; set2 返回两个集合的交集。&lt;br /&gt;
set.intersection_update (set1, set2) 交集，在原始的集合上移除不重叠的元素。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = set(&#39;abracadabra&#39;)&lt;br /&gt;
b = set(&#39;alacazam&#39;)&lt;br /&gt;
print(a)  # {&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;}&lt;br /&gt;
print(b)  # {&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;}&lt;br /&gt;
​&lt;br /&gt;
c = a.intersection(b)&lt;br /&gt;
print(c)  # {&#39;a&#39;, &#39;c&#39;}&lt;br /&gt;
print(a &amp;amp; b)  # {&#39;c&#39;, &#39;a&#39;}&lt;br /&gt;
print(a)  # {&#39;a&#39;, &#39;r&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;}&lt;br /&gt;
​&lt;br /&gt;
a.intersection_update(b)&lt;br /&gt;
print(a)  # {&#39;a&#39;, &#39;c&#39;}&lt;br /&gt;
{&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;}&lt;br /&gt;
{&#39;a&#39;, &#39;c&#39;}&lt;br /&gt;
{&#39;a&#39;, &#39;c&#39;}&lt;br /&gt;
{&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;a&#39;, &#39;c&#39;}&lt;br /&gt;
 set.union (set1, set2) 返回两个集合的并集。&lt;br /&gt;
set1 | set2 返回两个集合的并集。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = set(&#39;abracadabra&#39;)&lt;br /&gt;
b = set(&#39;alacazam&#39;)&lt;br /&gt;
print(a)  # {&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;}&lt;br /&gt;
print(b)  # {&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;}&lt;br /&gt;
​&lt;br /&gt;
print(a | b)&lt;/p&gt;
&lt;h1 l,=&#34;&#34; d,=&#34;&#34; m,=&#34;&#34; b,=&#34;&#34; a,=&#34;&#34; r,=&#34;&#34; z,=&#34;&#34; c=&#34;&#34; id=&#34;-17&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-17&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
c = a.union(b)&lt;br /&gt;
print(c)&lt;/p&gt;
&lt;h1 c,=&#34;&#34; a,=&#34;&#34; d,=&#34;&#34; m,=&#34;&#34; r,=&#34;&#34; b,=&#34;&#34; z,=&#34;&#34; l=&#34;&#34; id=&#34;-18&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-18&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;{&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;}&lt;br /&gt;
 set.difference (set) 返回集合的差集。&lt;br /&gt;
set1 - set2 返回集合的差集。&lt;br /&gt;
set.difference_update (set) 集合的差集，直接在原来的集合中移除元素，没有返回值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = set(&#39;abracadabra&#39;)&lt;br /&gt;
b = set(&#39;alacazam&#39;)&lt;br /&gt;
print(a)  # {&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;}&lt;br /&gt;
print(b)  # {&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;}&lt;br /&gt;
​&lt;br /&gt;
c = a.difference(b)&lt;br /&gt;
print(c)  # {&#39;b&#39;, &#39;d&#39;, &#39;r&#39;}&lt;br /&gt;
print(a - b)  # {&#39;d&#39;, &#39;b&#39;, &#39;r&#39;}&lt;br /&gt;
​&lt;br /&gt;
print(a)  # {&#39;r&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;}&lt;br /&gt;
a.difference_update(b)&lt;br /&gt;
print(a)  # {&#39;d&#39;, &#39;r&#39;, &#39;b&#39;}&lt;br /&gt;
{&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;}&lt;br /&gt;
{&#39;d&#39;, &#39;b&#39;, &#39;r&#39;}&lt;br /&gt;
{&#39;d&#39;, &#39;b&#39;, &#39;r&#39;}&lt;br /&gt;
{&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;b&#39;, &#39;r&#39;, &#39;d&#39;}&lt;br /&gt;
 set.symmetric_difference (set) 返回集合的异或。&lt;br /&gt;
set1 ^ set2 返回集合的异或。&lt;br /&gt;
set.symmetric_difference_update (set) 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = set(&#39;abracadabra&#39;)&lt;br /&gt;
b = set(&#39;alacazam&#39;)&lt;br /&gt;
print(a)  # &lt;ruby&gt;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;}
print(b)  # {&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;}
​
c = a.symmetric_difference(b)
print(c)  # {&#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;d&#39;}
print(a &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt; b)  # {&#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;d&#39;&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;br /&gt;
​&lt;br /&gt;
print(a)  # {&#39;r&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;}&lt;br /&gt;
a.symmetric_difference_update(b)&lt;br /&gt;
print(a)  # {&#39;r&#39;, &#39;b&#39;, &#39;m&#39;, &#39;l&#39;, &#39;z&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;}&lt;br /&gt;
{&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}&lt;br /&gt;
{&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;}&lt;br /&gt;
 set.issubset (set) 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。&lt;br /&gt;
set1 &amp;lt;= set2 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = {&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;}&lt;br /&gt;
y = {&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;}&lt;br /&gt;
z = x.issubset(y)&lt;br /&gt;
print(z)  # True&lt;br /&gt;
print(x &amp;lt;= y)  # True&lt;br /&gt;
​&lt;br /&gt;
x = {&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;}&lt;br /&gt;
y = {&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;}&lt;br /&gt;
z = x.issubset(y)&lt;br /&gt;
print(z)  # False&lt;br /&gt;
print(x &amp;lt;= y)  # False&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
False&lt;br /&gt;
set.issuperset (set) 用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。&lt;br /&gt;
set1 &amp;gt;= set2 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = {&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;}&lt;br /&gt;
y = {&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;}&lt;br /&gt;
z = x.issuperset(y)&lt;br /&gt;
print(z)  # True&lt;br /&gt;
print(x &amp;gt;= y)  # True&lt;br /&gt;
​&lt;br /&gt;
x = {&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;}&lt;br /&gt;
y = {&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;}&lt;br /&gt;
z = x.issuperset(y)&lt;br /&gt;
print(z)  # False&lt;br /&gt;
print(x &amp;gt;= y)  # False&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
False&lt;br /&gt;
set.isdisjoint (set) 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = {&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;}&lt;br /&gt;
y = {&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;}&lt;br /&gt;
z = x.isdisjoint(y)&lt;br /&gt;
print(z)  # False&lt;br /&gt;
​&lt;br /&gt;
x = {&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;g&amp;quot;}&lt;br /&gt;
y = {&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;}&lt;br /&gt;
z = x.isdisjoint(y)&lt;br /&gt;
print(z)  # True&lt;br /&gt;
False&lt;br /&gt;
True&lt;br /&gt;
4. 集合的转换&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;se = set(range(4))&lt;br /&gt;
li = list(se)&lt;br /&gt;
tu = tuple(se)&lt;br /&gt;
​&lt;br /&gt;
print(se, type(se))  # {0, 1, 2, 3} &amp;lt;class &#39;set&#39;&amp;gt;&lt;br /&gt;
print(li, type(li))  # [0, 1, 2, 3] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
print(tu, type(tu))  # (0, 1, 2, 3) &amp;lt;class &#39;tuple&#39;&amp;gt;&lt;br /&gt;
{0, 1, 2, 3} &amp;lt;class &#39;set&#39;&amp;gt;&lt;br /&gt;
[0, 1, 2, 3] &amp;lt;class &#39;list&#39;&amp;gt;&lt;br /&gt;
(0, 1, 2, 3) &amp;lt;class &#39;tuple&#39;&amp;gt;&lt;br /&gt;
5. 不可变集合&lt;br /&gt;
 Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫 frozenset。需要注意的是 frozenset 仍然可以进行集合操作，只是不能用带有 update 的方法。&lt;/p&gt;
&lt;p&gt;frozenset ([iterable]) 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = frozenset (range (10))  # 生成一个新的不可变集合&lt;br /&gt;
 print (a)&lt;/p&gt;
&lt;h1 id=&#34;frozenset0-1-2-3-4-5-6-7-8-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#frozenset0-1-2-3-4-5-6-7-8-9&#34;&gt;#&lt;/a&gt; frozenset({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
b = frozenset(&#39;lsgogroup&#39;)&lt;br /&gt;
print(b)&lt;/p&gt;
&lt;h1 id=&#34;frozensetg-s-p-r-u-o-l&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#frozensetg-s-p-r-u-o-l&#34;&gt;#&lt;/a&gt; frozenset({&#39;g&#39;, &#39;s&#39;, &#39;p&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;l&#39;})&lt;/h1&gt;
&lt;p&gt;frozenset({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})&lt;br /&gt;
frozenset({&#39;l&#39;, &#39;g&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;s&#39;, &#39;p&#39;})&lt;br /&gt;
 序列&lt;br /&gt;
在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持一些通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对序列的内置函数&lt;br /&gt;
 list (sub) 把一个可迭代对象转换为列表。&lt;br /&gt;
【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a = list()&lt;br /&gt;
print(a)  # []&lt;br /&gt;
​&lt;br /&gt;
b = &#39;I Love LsgoGroup&#39;&lt;br /&gt;
b = list(b)&lt;br /&gt;
print(b)&lt;/p&gt;
&lt;h1 id=&#34;i-l-o-v-e-l-s-g-o-g-r-o-u-p&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#i-l-o-v-e-l-s-g-o-g-r-o-u-p&#34;&gt;#&lt;/a&gt; [&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
c = (1, 1, 2, 3, 5, 8)&lt;br /&gt;
c = list(c)&lt;br /&gt;
print(c)  # [1, 1, 2, 3, 5, 8]&lt;br /&gt;
[]&lt;br /&gt;
[&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]&lt;br /&gt;
[1, 1, 2, 3, 5, 8]&lt;br /&gt;
 tuple (sub) 把一个可迭代对象转换为元组。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = tuple()&lt;br /&gt;
print(a)  # ()&lt;br /&gt;
​&lt;br /&gt;
b = &#39;I Love LsgoGroup&#39;&lt;br /&gt;
b = tuple(b)&lt;br /&gt;
print(b)&lt;/p&gt;
&lt;h1 id=&#34;i-l-o-v-e-l-s-g-o-g-r-o-u-p-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#i-l-o-v-e-l-s-g-o-g-r-o-u-p-2&#34;&gt;#&lt;/a&gt; (&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
c = [1, 1, 2, 3, 5, 8]&lt;br /&gt;
c = tuple(c)&lt;br /&gt;
print(c)  # (1, 1, 2, 3, 5, 8)&lt;br /&gt;
()&lt;br /&gt;
(&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)&lt;br /&gt;
(1, 1, 2, 3, 5, 8)&lt;br /&gt;
 str (obj) 把 obj 对象转换为字符串&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = 123&lt;br /&gt;
a = str(a)&lt;br /&gt;
print(a)  # 123&lt;br /&gt;
123&lt;br /&gt;
len (s) 返回对象（字符、列表、元组等）长度或元素个数。&lt;br /&gt;
s -- 对象。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = list()&lt;br /&gt;
print(len(a))  # 0&lt;br /&gt;
​&lt;br /&gt;
b = (&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)&lt;br /&gt;
print(len(b))  # 16&lt;br /&gt;
​&lt;br /&gt;
c = &#39;I Love LsgoGroup&#39;&lt;br /&gt;
print(len(c))  # 16&lt;br /&gt;
0&lt;br /&gt;
16&lt;br /&gt;
16&lt;br /&gt;
max (sub) 返回序列或者参数集合中的最大值&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;print(max(1, 2, 3, 4, 5))  # 5&lt;br /&gt;
print(max([-8, 99, 3, 7, 83]))  # 99&lt;br /&gt;
print(max(&#39;IloveLsgoGroup&#39;))  # v&lt;br /&gt;
5&lt;br /&gt;
99&lt;br /&gt;
v&lt;br /&gt;
min (sub) 返回序列或参数集合中的最小值&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;print(min(1, 2, 3, 4, 5))  # 1&lt;br /&gt;
print(min([-8, 99, 3, 7, 83]))  # -8&lt;br /&gt;
print(min(&#39;IloveLsgoGroup&#39;))  # G&lt;br /&gt;
1&lt;br /&gt;
-8&lt;br /&gt;
G&lt;br /&gt;
sum (iterable [, start=0]) 返回序列 iterable 与可选参数 start 的总和。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;print(sum([1, 3, 5, 7, 9]))  # 25&lt;br /&gt;
print(sum([1, 3, 5, 7, 9], 10))  # 35&lt;br /&gt;
print(sum((1, 3, 5, 7, 9)))  # 25&lt;br /&gt;
print(sum((1, 3, 5, 7, 9), 20))  # 45&lt;br /&gt;
25&lt;br /&gt;
35&lt;br /&gt;
25&lt;br /&gt;
45&lt;br /&gt;
sorted (iterable, key=None, reverse=False) 对所有可迭代的对象进行排序操作。&lt;br /&gt;
iterable -- 可迭代对象。&lt;br /&gt;
key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。&lt;br /&gt;
reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。&lt;br /&gt;
返回重新排序的列表。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;x = [-8, 99, 3, 7, 83]&lt;br /&gt;
print(sorted(x))  # [-8, 3, 7, 83, 99]&lt;br /&gt;
print(sorted(x, reverse=True))  # [99, 83, 7, 3, -8]&lt;br /&gt;
​&lt;br /&gt;
t = ({&amp;quot;age&amp;quot;: 20, &amp;quot;name&amp;quot;: &amp;quot;a&amp;quot;}, {&amp;quot;age&amp;quot;: 25, &amp;quot;name&amp;quot;: &amp;quot;b&amp;quot;}, {&amp;quot;age&amp;quot;: 10, &amp;quot;name&amp;quot;: &amp;quot;c&amp;quot;})&lt;br /&gt;
x = sorted(t, key=lambda a: a[&amp;quot;age&amp;quot;])&lt;br /&gt;
print(x)&lt;/p&gt;
&lt;h1 id=&#34;age-10-name-c-age-20-name-a-age-25-name-b&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#age-10-name-c-age-20-name-a-age-25-name-b&#34;&gt;#&lt;/a&gt; [{&#39;age&#39;: 10, &#39;name&#39;: &#39;c&#39;}, {&#39;age&#39;: 20, &#39;name&#39;: &#39;a&#39;}, {&#39;age&#39;: 25, &#39;name&#39;: &#39;b&#39;}]&lt;/h1&gt;
&lt;p&gt;[-8, 3, 7, 83, 99]&lt;br /&gt;
[99, 83, 7, 3, -8]&lt;br /&gt;
[{&#39;age&#39;: 10, &#39;name&#39;: &#39;c&#39;}, {&#39;age&#39;: 20, &#39;name&#39;: &#39;a&#39;}, {&#39;age&#39;: 25, &#39;name&#39;: &#39;b&#39;}]&lt;br /&gt;
 reversed (seq) 函数返回一个反转的迭代器。&lt;br /&gt;
seq -- 要转换的序列，可以是 tuple, string, list 或 range。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;s = &#39;lsgogroup&#39;&lt;br /&gt;
x = reversed(s)&lt;br /&gt;
print(type(x))  # &amp;lt;class &#39;reversed&#39;&amp;gt;&lt;br /&gt;
print(x)  # &amp;lt;reversed object at 0x000002507E8EC2C8&amp;gt;&lt;br /&gt;
print(list(x))&lt;/p&gt;
&lt;h1 id=&#34;p-u-o-r-g-o-g-s-l&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p-u-o-r-g-o-g-s-l&#34;&gt;#&lt;/a&gt; [&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
t = (&#39;l&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)&lt;br /&gt;
print(list(reversed(t)))&lt;/p&gt;
&lt;h1 id=&#34;p-u-o-r-g-o-g-s-l-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p-u-o-r-g-o-g-s-l-2&#34;&gt;#&lt;/a&gt; [&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
r = range(5, 9)&lt;br /&gt;
print(list(reversed(r)))&lt;/p&gt;
&lt;h1 id=&#34;8-7-6-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-7-6-5&#34;&gt;#&lt;/a&gt; [8, 7, 6, 5]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
x = [-8, 99, 3, 7, 83]&lt;br /&gt;
print(list(reversed(x)))&lt;/p&gt;
&lt;h1 id=&#34;83-7-3-99-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#83-7-3-99-8&#34;&gt;#&lt;/a&gt; [83, 7, 3, 99, -8]&lt;/h1&gt;
&lt;p&gt;&amp;lt;class &#39;reversed&#39;&amp;gt;&lt;br /&gt;
&amp;lt;reversed object at 0x000001F0517DFD68&amp;gt;&lt;br /&gt;
[&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]&lt;br /&gt;
[&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]&lt;br /&gt;
[8, 7, 6, 5]&lt;br /&gt;
[83, 7, 3, 99, -8]&lt;br /&gt;
enumerate(sequence, [start=0])&lt;br /&gt;
【例子】用于将一个可遍历的数据对象 (如列表、元组或字符串) 组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。&lt;/p&gt;
&lt;p&gt;seasons = [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;]&lt;br /&gt;
a = list(enumerate(seasons))&lt;br /&gt;
print(a)&lt;/p&gt;
&lt;h1 id=&#34;0-spring-1-summer-2-fall-3-winter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-spring-1-summer-2-fall-3-winter&#34;&gt;#&lt;/a&gt; [(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
b = list(enumerate(seasons, 1))&lt;br /&gt;
print(b)&lt;/p&gt;
&lt;h1 id=&#34;1-spring-2-summer-3-fall-4-winter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-spring-2-summer-3-fall-4-winter&#34;&gt;#&lt;/a&gt; [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
for i, element in a:&lt;br /&gt;
print(&#39;{0},{1}&#39;.format(i, element))&lt;/p&gt;
&lt;h1 id=&#34;0spring&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0spring&#34;&gt;#&lt;/a&gt; 0,Spring&lt;/h1&gt;
&lt;h1 id=&#34;1summer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1summer&#34;&gt;#&lt;/a&gt; 1,Summer&lt;/h1&gt;
&lt;h1 id=&#34;2fall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2fall&#34;&gt;#&lt;/a&gt; 2,Fall&lt;/h1&gt;
&lt;h1 id=&#34;3winter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3winter&#34;&gt;#&lt;/a&gt; 3,Winter&lt;/h1&gt;
&lt;p&gt;[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]&lt;br /&gt;
[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]&lt;br /&gt;
0,Spring&lt;br /&gt;
1,Summer&lt;br /&gt;
2,Fall&lt;br /&gt;
3,Winter&lt;br /&gt;
zip(iter1 [,iter2 [...]])&lt;br /&gt;
 用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。&lt;br /&gt;
我们可以使用 list () 转换来输出列表。&lt;br /&gt;
如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = [1, 2, 3]&lt;br /&gt;
b = [4, 5, 6]&lt;br /&gt;
c = [4, 5, 6, 7, 8]&lt;br /&gt;
​&lt;br /&gt;
zipped = zip(a, b)&lt;br /&gt;
print(zipped)  # &amp;lt;zip object at 0x000000C5D89EDD88&amp;gt;&lt;br /&gt;
print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]&lt;br /&gt;
zipped = zip(a, c)&lt;br /&gt;
print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]&lt;br /&gt;
​&lt;br /&gt;
a1, a2 = zip(*zip(a, b))&lt;br /&gt;
print(list(a1))  # [1, 2, 3]&lt;br /&gt;
print(list(a2))  # [4, 5, 6]&lt;br /&gt;
&amp;lt;zip object at 0x000001F0517E38C8&amp;gt;&lt;br /&gt;
[(1, 4), (2, 5), (3, 6)]&lt;br /&gt;
[(1, 4), (2, 5), (3, 6)]&lt;br /&gt;
[1, 2, 3]&lt;br /&gt;
[4, 5, 6]&lt;/p&gt;
</content>
        <updated>2021-01-29T13:39:01.000Z</updated>
    </entry>
    <entry>
        <id>https://theprofessor249.github.io/2021/01/29/python-6-day/</id>
        <title>python_6_day</title>
        <link rel="alternate" href="https://theprofessor249.github.io/2021/01/29/python-6-day/"/>
        <content type="html">&lt;p&gt;基于人脸的常见表情识别 —— 模型搭建、训练与测试&lt;br /&gt;
模型搭建与训练&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据接口准备&lt;/li&gt;
&lt;li&gt;模型定义&lt;/li&gt;
&lt;li&gt;模型训练&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;模型测试&lt;/p&gt;
&lt;p&gt;本 Task 是『基于人脸的常见表情识别』训练营的第 3 课，如果你未学习前面的课程，请从 Task1 开始学习，本 Task 需要使用到数据集，在 Task2 中提供下载的渠道。&lt;/p&gt;
&lt;p&gt;在完成了数据准备后，接下来就是卷积神经网络一展身手的时候了，通过本次任务，您将学到如何使用 PyTorch 深度学习框架，实现卷积神经网络的定义、训练和预测。&lt;/p&gt;
&lt;p&gt;模型搭建与训练&lt;br /&gt;
得到了数据之后，接下来咱们使用 PyTorch 这个框架来进行模型的训练。整个训练流程包括数据接口准备、模型定义、结果保存与分析。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据接口准备&lt;br /&gt;
 PyTorch 图像分类直接利用文件夹作为输入，只需要把不同类的数据放到不同的文件夹中。数据读取的完整代码如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;data_transforms = {&lt;br /&gt;
&#39;train&#39;: transforms.Compose([&lt;br /&gt;
transforms.RandomSizedCrop(48),&lt;br /&gt;
transforms.RandomHorizontalFlip(),&lt;br /&gt;
transforms.ToTensor(),&lt;br /&gt;
transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])&lt;br /&gt;
]),&lt;br /&gt;
&#39;val&#39;: transforms.Compose([&lt;br /&gt;
transforms.Scale(64),&lt;br /&gt;
transforms.CenterCrop(48),&lt;br /&gt;
transforms.ToTensor(),&lt;br /&gt;
transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])&lt;br /&gt;
]),&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;data_dir = &#39;./train_val_data/&#39;&lt;br /&gt;
image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),&lt;br /&gt;
data_transforms[x]) for x in [&#39;train&#39;, &#39;val&#39;]}&lt;br /&gt;
dataloders = {x: torch.utils.data.DataLoader(image_datasets[x],&lt;br /&gt;
batch_size=16,&lt;br /&gt;
shuffle=True,&lt;br /&gt;
num_workers=4) for x in [&#39;train&#39;, &#39;val&#39;]}&lt;br /&gt;
 上面脚本中的函数，输入一个文件夹，输出图片路径以及标签，在开始训练之前需要将数据集进行拆分，拆分成训练集 (train) 和验证集 (val)，训练集和测试集的比例为 9:1，train_val_data 文件结构如下所示，其中 0 代表 none、 1 代表 pouting、2 代表 smile、3 代表 openmouth：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;train_val_data
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;train&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;val&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;br /&gt;
 到此，数据接口就定义完毕了，接下来在训练代码中看如何使用迭代器进行数据读取就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;模型定义&lt;br /&gt;
创建数据接⼝后，我们开始定义⼀个⽹络 simpleconv3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;import torch.nn as nn&lt;br /&gt;
import torch.nn.functional as F&lt;br /&gt;
​&lt;br /&gt;
class simpleconv3(nn.Module):&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;
super(simpleconv3,self).&lt;strong&gt;init&lt;/strong&gt;()&lt;br /&gt;
self.conv1 = nn.Conv2d(3, 12, 3, 2)&lt;br /&gt;
self.bn1 = nn.BatchNorm2d(12)&lt;br /&gt;
self.conv2 = nn.Conv2d(12, 24, 3, 2)&lt;br /&gt;
self.bn2 = nn.BatchNorm2d(24)&lt;br /&gt;
self.conv3 = nn.Conv2d(24, 48, 3, 2)&lt;br /&gt;
self.bn3 = nn.BatchNorm2d(48)&lt;br /&gt;
self.fc1 = nn.Linear(48 * 5 * 5 , 1200)&lt;br /&gt;
self.fc2 = nn.Linear(1200 , 128)&lt;br /&gt;
self.fc3 = nn.Linear(128 , 4)&lt;br /&gt;
​&lt;br /&gt;
def forward(self , x):&lt;br /&gt;
x = F.relu(self.bn1(self.conv1(x)))&lt;br /&gt;
#print &amp;quot;bn1 shape&amp;quot;,x.shape&lt;br /&gt;
x = F.relu(self.bn2(self.conv2(x)))&lt;br /&gt;
x = F.relu(self.bn3(self.conv3(x)))&lt;br /&gt;
x = x.view(-1 , 48 * 5 * 5)&lt;br /&gt;
x = F.relu(self.fc1(x))&lt;br /&gt;
x = F.relu(self.fc2(x))&lt;br /&gt;
x = self.fc3(x)&lt;br /&gt;
return x&lt;br /&gt;
 上面就是我们定义的网络，是一个简单的 3 层卷积。在 torch.nn 下，有各种网络层，这里就用到了 nn.Conv2d，nn.BatchNorm2d 和 nn.Linear，分别是卷积层，BN 层和全连接层。我们以一个卷积层为例：&lt;/p&gt;
&lt;p&gt;conv1 = nn.Conv2d(in_channels=3, out_channels=12, kernel_size=3, stride=2)&lt;br /&gt;
bn1 = nn.BatchNorm2d(num_features=12)&lt;br /&gt;
 in_channels：输入通道数&lt;br /&gt;
 out_channels：输出通道数&lt;br /&gt;
 kernel_size：卷积核的大小&lt;br /&gt;
 stride：卷积核的移动步长&lt;br /&gt;
更全面的参数，请自查 API：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9weXRvcmNoLm9yZy8=&#34;&gt;https://pytorch.org/&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;模型训练&lt;br /&gt;
这里准备好了数据集，可以直接使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;深度学习一般使用 GPU 进行训练，大家可以根据下图的操作，将设备切换至 GPU 状态，再运行下面的程序，切换过程需要一定时间，请耐心等待&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;#coding:utf8&lt;br /&gt;
from &lt;strong&gt;future&lt;/strong&gt; import print_function, division&lt;br /&gt;
​&lt;br /&gt;
import torch&lt;br /&gt;
import torch.nn as nn&lt;br /&gt;
import torch.optim as optim&lt;br /&gt;
from torch.optim import lr_scheduler&lt;br /&gt;
from torch.autograd import Variable&lt;br /&gt;
import torchvision&lt;br /&gt;
from torchvision import datasets, models, transforms&lt;br /&gt;
import time&lt;br /&gt;
import os&lt;br /&gt;
from tensorboardX import SummaryWriter&lt;br /&gt;
import torch.nn.functional as F&lt;br /&gt;
import numpy as np&lt;br /&gt;
​&lt;br /&gt;
import warnings&lt;br /&gt;
​&lt;br /&gt;
warnings.filterwarnings(&#39;ignore&#39;)&lt;br /&gt;
​&lt;br /&gt;
writer = SummaryWriter()&lt;br /&gt;
​&lt;br /&gt;
def train_model(model, criterion, optimizer, scheduler, num_epochs=25):&lt;br /&gt;
for epoch in range(num_epochs):&lt;br /&gt;
print(&#39;Epoch {}/{}&#39;.format(epoch, num_epochs - 1))&lt;br /&gt;
for phase in [&#39;train&#39;, &#39;val&#39;]:&lt;br /&gt;
if phase == &#39;train&#39;:&lt;br /&gt;
scheduler.step()&lt;br /&gt;
model.train(True)  # Set model to training mode&lt;br /&gt;
else:&lt;br /&gt;
model.train(False)  # Set model to evaluate mode&lt;br /&gt;
​&lt;br /&gt;
running_loss = 0.0&lt;br /&gt;
running_corrects = 0.0&lt;br /&gt;
​&lt;br /&gt;
for data in dataloders[phase]:&lt;br /&gt;
inputs, labels = data&lt;br /&gt;
if use_gpu:&lt;br /&gt;
inputs = Variable(inputs.cuda())&lt;br /&gt;
labels = Variable(labels.cuda())&lt;br /&gt;
else:&lt;br /&gt;
inputs, labels = Variable(inputs), Variable(labels)&lt;br /&gt;
​&lt;br /&gt;
optimizer.zero_grad()&lt;br /&gt;
outputs = model(inputs)&lt;br /&gt;
_, preds = torch.max(outputs.data, 1)&lt;br /&gt;
loss = criterion(outputs, labels)&lt;br /&gt;
if phase == &#39;train&#39;:&lt;br /&gt;
loss.backward()&lt;br /&gt;
optimizer.step()&lt;br /&gt;
​&lt;br /&gt;
running_loss += loss.data.item()&lt;br /&gt;
running_corrects += torch.sum(preds == labels).item()&lt;br /&gt;
​&lt;br /&gt;
epoch_loss = running_loss / dataset_sizes[phase]&lt;br /&gt;
epoch_acc = running_corrects / dataset_sizes[phase]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        if phase == &#39;train&#39;:
            writer.add_scalar(&#39;data/trainloss&#39;, epoch_loss, epoch)
            writer.add_scalar(&#39;data/trainacc&#39;, epoch_acc, epoch)
        else:
            writer.add_scalar(&#39;data/valloss&#39;, epoch_loss, epoch)
            writer.add_scalar(&#39;data/valacc&#39;, epoch_acc, epoch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br /&gt;
print(&#39;{} Loss: {:.4f} Acc: {:.4f}&#39;.format(&lt;br /&gt;
phase, epoch_loss, epoch_acc))&lt;br /&gt;
​&lt;br /&gt;
writer.export_scalars_to_json(&amp;quot;./all_scalars.json&amp;quot;)&lt;br /&gt;
writer.close()&lt;br /&gt;
return model&lt;br /&gt;
​&lt;br /&gt;
if &lt;strong&gt;name&lt;/strong&gt; == &#39;&lt;strong&gt;main&lt;/strong&gt;&#39;:&lt;br /&gt;
​&lt;br /&gt;
data_transforms = {&lt;br /&gt;
&#39;train&#39;: transforms.Compose([&lt;br /&gt;
transforms.RandomSizedCrop(48),&lt;br /&gt;
transforms.RandomHorizontalFlip(),&lt;br /&gt;
transforms.ToTensor(),&lt;br /&gt;
transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])&lt;br /&gt;
]),&lt;br /&gt;
&#39;val&#39;: transforms.Compose([&lt;br /&gt;
transforms.Scale(64),&lt;br /&gt;
transforms.CenterCrop(48),&lt;br /&gt;
transforms.ToTensor(),&lt;br /&gt;
transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])&lt;br /&gt;
]),&lt;br /&gt;
}&lt;br /&gt;
​&lt;br /&gt;
data_dir = &#39;./Emotion_Recognition_File/train_val_data/&#39; # 数据集所在的位置&lt;br /&gt;
 image_datasets = {x: datasets.ImageFolder (os.path.join (data_dir, x),&lt;br /&gt;
data_transforms[x]) for x in [&#39;train&#39;, &#39;val&#39;]}&lt;br /&gt;
dataloders = {x: torch.utils.data.DataLoader(image_datasets[x],&lt;br /&gt;
batch_size=64,&lt;br /&gt;
shuffle=True if x==&amp;quot;train&amp;quot; else False,&lt;br /&gt;
num_workers=8) for x in [&#39;train&#39;, &#39;val&#39;]}&lt;br /&gt;
​&lt;br /&gt;
dataset_sizes = {x: len(image_datasets[x]) for x in [&#39;train&#39;, &#39;val&#39;]}&lt;br /&gt;
​&lt;br /&gt;
use_gpu = torch.cuda.is_available()&lt;br /&gt;
 print (&amp;quot;是否使用 GPU&amp;quot;, use_gpu)&lt;br /&gt;
modelclc = simpleconv3()&lt;br /&gt;
print(modelclc)&lt;br /&gt;
if use_gpu:&lt;br /&gt;
modelclc = modelclc.cuda()&lt;br /&gt;
​&lt;br /&gt;
criterion = nn.CrossEntropyLoss()&lt;br /&gt;
optimizer_ft = optim.SGD(modelclc.parameters(), lr=0.1, momentum=0.9)&lt;br /&gt;
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=100, gamma=0.1)&lt;br /&gt;
​&lt;br /&gt;
modelclc = train_model(model=modelclc,&lt;br /&gt;
criterion=criterion,&lt;br /&gt;
optimizer=optimizer_ft,&lt;br /&gt;
scheduler=exp_lr_scheduler,&lt;br /&gt;
num_epochs=10)  # 这里可以调节训练的轮次&lt;br /&gt;
 if not os.path.exists (&amp;quot;models&amp;quot;):&lt;br /&gt;
os.mkdir(&#39;models&#39;)&lt;br /&gt;
torch.save(modelclc.state_dict(),&#39;models/model.ckpt&#39;)&lt;br /&gt;
 训练的过程需要注意几个参数，第一个是数据加载器 (dataloders) 中的 batch_size，这个代表的含义是每次送入模型训练的图片数量，这个需要根据 GPU 的显存来设置，显存越大，可以设置越大，这个数一般设置为 2 的整数次幂（如 4、8、16、32 等）&lt;/p&gt;
&lt;p&gt;dataloders = {x: torch.utils.data.DataLoader(image_datasets[x],&lt;br /&gt;
batch_size=64,&lt;br /&gt;
shuffle=True if x==&amp;quot;train&amp;quot; else False,&lt;br /&gt;
num_workers=8) for x in [&#39;train&#39;, &#39;val&#39;]}&lt;br /&gt;
 第二个需要注意的参数是训练函数的 num_epochs，这个参数代表的意义是，模型训练的轮次。&lt;/p&gt;
&lt;p&gt;modelclc = train_model(model=modelclc,&lt;br /&gt;
criterion=criterion,&lt;br /&gt;
optimizer=optimizer_ft,&lt;br /&gt;
scheduler=exp_lr_scheduler,&lt;br /&gt;
num_epochs=10)  # 这里可以调节训练的轮次&lt;br /&gt;
模型测试&lt;br /&gt;
上⾯已经训练好了模型，我们接下来的⽬标，就是要⽤它来做推理，真正把模型⽤起来，下⾯我们载⼊⼀个图⽚，⽤模型进⾏测试。 结果在 results 文件夹中&lt;/p&gt;
&lt;h1 id=&#34;codingutf8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#codingutf8&#34;&gt;#&lt;/a&gt; coding:utf8&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
import sys&lt;br /&gt;
import numpy as np&lt;br /&gt;
import cv2&lt;br /&gt;
import os&lt;br /&gt;
import dlib&lt;br /&gt;
​&lt;br /&gt;
import torch&lt;br /&gt;
import torch.nn as nn&lt;br /&gt;
import torch.optim as optim&lt;br /&gt;
from torch.optim import lr_scheduler&lt;br /&gt;
from torch.autograd import Variable&lt;br /&gt;
import torchvision&lt;br /&gt;
from torchvision import datasets, models, transforms&lt;br /&gt;
import time&lt;br /&gt;
from PIL import Image&lt;br /&gt;
import torch.nn.functional as F&lt;br /&gt;
​&lt;br /&gt;
import matplotlib.pyplot as plt&lt;br /&gt;
import warnings&lt;br /&gt;
​&lt;br /&gt;
warnings.filterwarnings(&#39;ignore&#39;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
PREDICTOR_PATH = &amp;quot;./Emotion_Recognition_File/face_detect_model/shape_predictor_68_face_landmarks.dat&amp;quot;&lt;br /&gt;
predictor = dlib.shape_predictor(PREDICTOR_PATH)&lt;br /&gt;
cascade_path = &#39;./Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml&#39;&lt;br /&gt;
cascade = cv2.CascadeClassifier(cascade_path)&lt;br /&gt;
​&lt;br /&gt;
if not os.path.exists(&amp;quot;results&amp;quot;):&lt;br /&gt;
os.mkdir(&amp;quot;results&amp;quot;)&lt;/p&gt;
&lt;p&gt;​&lt;br /&gt;
def standardization(data):&lt;br /&gt;
mu = np.mean(data, axis=0)&lt;br /&gt;
sigma = np.std(data, axis=0)&lt;br /&gt;
return (data - mu) / sigma&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
def get_landmarks(im):&lt;br /&gt;
rects = cascade.detectMultiScale(im, 1.3, 5)&lt;br /&gt;
x, y, w, h = rects[0]&lt;br /&gt;
rect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h))&lt;br /&gt;
return np.matrix([[p.x, p.y] for p in predictor(im, rect).parts()])&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
def annotate_landmarks(im, landmarks):&lt;br /&gt;
im = im.copy()&lt;br /&gt;
for idx, point in enumerate(landmarks):&lt;br /&gt;
pos = (point[0, 0], point[0, 1])&lt;br /&gt;
cv2.putText(im,&lt;br /&gt;
str(idx),&lt;br /&gt;
pos,&lt;br /&gt;
fontFace=cv2.FONT_HERSHEY_SCRIPT_SIMPLEX,&lt;br /&gt;
fontScale=0.4,&lt;br /&gt;
color=(0, 0, 255))&lt;br /&gt;
cv2.circle(im, pos, 3, color=(0, 255, 255))&lt;br /&gt;
return im&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
testsize = 48  # 测试图大小&lt;br /&gt;
​&lt;br /&gt;
data_transforms = transforms.Compose([&lt;br /&gt;
transforms.ToTensor(),&lt;br /&gt;
transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])&lt;br /&gt;
])&lt;br /&gt;
net = simpleconv3()&lt;br /&gt;
net.eval()&lt;br /&gt;
 modelpath = &amp;quot;./models/model.ckpt&amp;quot;  # 模型路径&lt;br /&gt;
 net.load_state_dict (&lt;br /&gt;
torch.load(modelpath, map_location=lambda storage, loc: storage))&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;一次测试一个文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一次测试一个文件&#34;&gt;#&lt;/a&gt; 一次测试一个文件&lt;/h1&gt;
&lt;p&gt;img_path = &amp;quot;./Emotion_Recognition_File/find_face_img/&amp;quot;&lt;br /&gt;
imagepaths = os.listdir (img_path)  # 图像文件夹&lt;br /&gt;
 for imagepath in imagepaths:&lt;br /&gt;
im = cv2.imread(os.path.join(img_path, imagepath), 1)&lt;br /&gt;
try:&lt;br /&gt;
rects = cascade.detectMultiScale(im, 1.3, 5)&lt;br /&gt;
x, y, w, h = rects[0]&lt;br /&gt;
rect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h))&lt;br /&gt;
landmarks = np.matrix([[p.x, p.y]&lt;br /&gt;
for p in predictor(im, rect).parts()])&lt;br /&gt;
except:&lt;/p&gt;
&lt;h1 id=&#34;print没有检测到人脸&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#print没有检测到人脸&#34;&gt;#&lt;/a&gt; print (&amp;quot;没有检测到人脸&amp;quot;)&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;    continue  # 没有检测到人脸
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br /&gt;
xmin = 10000&lt;br /&gt;
xmax = 0&lt;br /&gt;
ymin = 10000&lt;br /&gt;
ymax = 0&lt;br /&gt;
​&lt;br /&gt;
for i in range(48, 67):&lt;br /&gt;
x = landmarks[i, 0]&lt;br /&gt;
y = landmarks[i, 1]&lt;br /&gt;
if x &amp;lt; xmin:&lt;br /&gt;
xmin = x&lt;br /&gt;
if x &amp;gt; xmax:&lt;br /&gt;
xmax = x&lt;br /&gt;
if y &amp;lt; ymin:&lt;br /&gt;
ymin = y&lt;br /&gt;
if y &amp;gt; ymax:&lt;br /&gt;
ymax = y&lt;br /&gt;
​&lt;br /&gt;
roiwidth = xmax - xmin&lt;br /&gt;
roiheight = ymax - ymin&lt;br /&gt;
​&lt;br /&gt;
roi = im[ymin:ymax, xmin:xmax, 0:3]&lt;br /&gt;
​&lt;br /&gt;
if roiwidth &amp;gt; roiheight:&lt;br /&gt;
dstlen = 1.5 * roiwidth&lt;br /&gt;
else:&lt;br /&gt;
dstlen = 1.5 * roiheight&lt;br /&gt;
​&lt;br /&gt;
diff_xlen = dstlen - roiwidth&lt;br /&gt;
diff_ylen = dstlen - roiheight&lt;br /&gt;
​&lt;br /&gt;
newx = xmin&lt;br /&gt;
newy = ymin&lt;br /&gt;
​&lt;br /&gt;
imagerows, imagecols, channel = im.shape&lt;br /&gt;
if newx &amp;gt;= diff_xlen / 2 and newx + roiwidth + diff_xlen / 2 &amp;lt; imagecols:&lt;br /&gt;
newx = newx - diff_xlen / 2&lt;br /&gt;
elif newx &amp;lt; diff_xlen / 2:&lt;br /&gt;
newx = 0&lt;br /&gt;
else:&lt;br /&gt;
newx = imagecols - dstlen&lt;br /&gt;
​&lt;br /&gt;
if newy &amp;gt;= diff_ylen / 2 and newy + roiheight + diff_ylen / 2 &amp;lt; imagerows:&lt;br /&gt;
newy = newy - diff_ylen / 2&lt;br /&gt;
elif newy &amp;lt; diff_ylen / 2:&lt;br /&gt;
newy = 0&lt;br /&gt;
else:&lt;br /&gt;
newy = imagecols - dstlen&lt;br /&gt;
​&lt;br /&gt;
roi = im[int(newy):int(newy + dstlen), int(newx):int(newx + dstlen), 0:3]&lt;br /&gt;
roi = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)&lt;br /&gt;
roiresized = cv2.resize(roi,&lt;br /&gt;
(testsize, testsize)).astype(np.float32) / 255.0&lt;br /&gt;
imgblob = data_transforms(roiresized).unsqueeze(0)&lt;br /&gt;
imgblob.requires_grad = False&lt;br /&gt;
imgblob = Variable(imgblob)&lt;br /&gt;
torch.no_grad()&lt;br /&gt;
predict = F.softmax(net(imgblob))&lt;br /&gt;
print(predict)&lt;br /&gt;
index = np.argmax(predict.detach().numpy())&lt;br /&gt;
​&lt;br /&gt;
im_show = cv2.imread(os.path.join(img_path, imagepath), 1)&lt;br /&gt;
im_h, im_w, im_c = im_show.shape&lt;br /&gt;
pos_x = int(newx + dstlen)&lt;br /&gt;
pos_y = int(newy + dstlen)&lt;br /&gt;
font = cv2.FONT_HERSHEY_SIMPLEX&lt;br /&gt;
cv2.rectangle(im_show, (int(newx), int(newy)),&lt;br /&gt;
(int(newx + dstlen), int(newy + dstlen)), (0, 255, 255), 2)&lt;br /&gt;
if index == 0:&lt;br /&gt;
cv2.putText(im_show, &#39;none&#39;, (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)&lt;br /&gt;
if index == 1:&lt;br /&gt;
cv2.putText(im_show, &#39;pout&#39;, (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)&lt;br /&gt;
if index == 2:&lt;br /&gt;
cv2.putText(im_show, &#39;smile&#39;, (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)&lt;br /&gt;
if index == 3:&lt;br /&gt;
cv2.putText(im_show, &#39;open&#39;, (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)&lt;/p&gt;
&lt;h1 id=&#34;cv2namedwindowresult-0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cv2namedwindowresult-0&#34;&gt;#&lt;/a&gt; cv2.namedWindow(&#39;result&#39;, 0)&lt;/h1&gt;
&lt;h1 id=&#34;cv2imshowresult-im_show&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cv2imshowresult-im_show&#34;&gt;#&lt;/a&gt; cv2.imshow(&#39;result&#39;, im_show)&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;cv2.imwrite(os.path.join(&#39;results&#39;, imagepath), im_show)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;printospathjoinresults-imagepath&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#printospathjoinresults-imagepath&#34;&gt;#&lt;/a&gt; print(os.path.join(&#39;results&#39;, imagepath))&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;plt.imshow(im_show[:, :, ::-1])  # 这里需要交换通道，因为 matplotlib 保存图片的通道顺序是 RGB，而在 OpenCV 中是 BGR
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;cv2waitkey0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cv2waitkey0&#34;&gt;#&lt;/a&gt; cv2.waitKey(0)&lt;/h1&gt;
&lt;h1 id=&#34;cv2destroyallwindows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cv2destroyallwindows&#34;&gt;#&lt;/a&gt; cv2.destroyAllWindows()&lt;/h1&gt;
&lt;p&gt;tensor([[8.1330e-03, 6.7033e-04, 9.8497e-01, 6.2311e-03]],&lt;br /&gt;
grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)&lt;/p&gt;
&lt;p&gt;tensor([[1.0822e-06, 1.9005e-09, 1.0000e+00, 2.3623e-07]],&lt;br /&gt;
grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)&lt;/p&gt;
&lt;p&gt;tensor([[9.9190e-01, 3.7207e-03, 4.3589e-03, 1.5936e-05]],&lt;br /&gt;
grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)&lt;/p&gt;
&lt;p&gt;tensor([[4.3434e-07, 1.2525e-06, 1.1251e-05, 9.9999e-01]],&lt;br /&gt;
grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)&lt;/p&gt;
&lt;p&gt;tensor([[0.0899, 0.8970, 0.0115, 0.0016]], grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)&lt;/p&gt;
&lt;p&gt;再次说明：0 代表 none、 1 代表 pouting、2 代表 smile、3 代表 openmouth&lt;/p&gt;
&lt;p&gt;上面展示的图片上方会有一个输出，如：tensor ([[8.1330e-03, 6.7033e-04, 9.8497e-01, 6.2311e-03]])&lt;/p&gt;
&lt;p&gt;这个代表的含义是，该图片在这个模型预测下，是该类别的可能性，比如上面这个例子 9.8497e-01 是四个值最大的，它的索引是 2（从 0 开始算），所以预测该图片为 smile&lt;/p&gt;
&lt;p&gt;以上就是本训练营的全部内容了，希望通过本次训练营，可以帮助大家搭建起一个深度学习项目的框架，然后将所学的知识应用到自己的项目、工作中。谢谢！&lt;/p&gt;
&lt;p&gt;-- By：有三 AI 团队&lt;/p&gt;
&lt;p&gt;聚焦于让大家能够系统性地完成 AI 各个领域所需的专业知识的学习，实现三人行必有 AI，三人行必有我师的愿景。&lt;/p&gt;
</content>
        <updated>2021-01-29T13:38:29.000Z</updated>
    </entry>
    <entry>
        <id>https://theprofessor249.github.io/2021/01/29/python_4_day/</id>
        <title>python_4_day</title>
        <link rel="alternate" href="https://theprofessor249.github.io/2021/01/29/python_4_day/"/>
        <content type="html">&lt;p&gt;基于人脸的常见表情识别 (1)—— 深度学习基础知识&lt;br /&gt;
神经网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;感知机&lt;/li&gt;
&lt;li&gt;多层感知机与反向传播&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;卷积神经网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全连接神经网络的 2 大缺陷&lt;/li&gt;
&lt;li&gt;卷积神经网络的崛起&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;卷积神经网络的基本网络层&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是卷积？&lt;/li&gt;
&lt;li&gt;填充（Padding）&lt;/li&gt;
&lt;li&gt;步长（Stride）&lt;/li&gt;
&lt;li&gt;池化&lt;/li&gt;
&lt;li&gt;卷积和池化输出尺寸计算&lt;/li&gt;
&lt;li&gt;为什么要用卷积来学习呢？&lt;/li&gt;
&lt;li&gt;卷积神经网络的优势在哪？&lt;br /&gt;
本训练营以理论结合实战的方式，帮助大家从 0 完成一个人脸常见表情的识别，接下来是本训练营的理论部分。不要觉得理论枯燥哦，万丈高楼平地起，基础打牢了，后面学什么都容易，让我们开始吧～&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;神经网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;感知机&lt;br /&gt;
感知机（Perceptron）是 Frank Rosenblatt 在 1957 年提出的概念，其结构与 MP 模型类似，一般被视为最简单的人工神经网络，也作为二元线性分类器被广泛使用。通常情况下指单层的人工神经网络，以区别于多层感知机（Multilayer Perceptron）。尽管感知机结构简单，但能够学习并解决较复杂问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;假设我们有一个 n 维输入的单层感知机，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 至 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x_n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为 n 维输入向量的各个分量，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_{1j}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.716668em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 至 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_{nj}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.716668em;vertical-align:-0.286108em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.311664em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为各个输入分量连接到感知机的权量（或称权值），theta 为阈值，f 为激活函数（又称为激励函数或传递函数），o 为标量输出。理想的激活函数通常为阶跃函数或者 sigmoid 函数。感知机的输出是输入向量 x 与权重向量 w 求得内积后，经激活函数 f 所得到的标量。&lt;/p&gt;
&lt;p&gt;单层感知器类似一个逻辑回归模型，可以做线性分类任务，但是不能做更复杂的任务。第二次 AI 浪潮中马文・明斯基在其著作中证明了感知机本质上是一种线性模型，只能处理线性分类问题，就连最简单的 XOR（异或）问题都无法正确解决。作为人工智能领域的开创者之一，这一声明也直接或间接促使神经网络的研究陷入了近 20 年的停滞。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;多层感知机与反向传播&lt;br /&gt;
不过就算在低谷期，1974 年哈佛大学的 Paul Werbos 仍然证明增加一个网络层，利用反向传播算法可以搞定 XOR 问题。到了后来 Rummelhart，McClelland 以及 Hinton 在 1986 年正式在多层感知器 (MLP) 中使用 BP 算法，采用 Sigmoid 进行非线性映射，有效解决了非线性分类和学习的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;多层感知机（Multi-Layer Perceptron）是由单层感知机推广而来，最主要的特点是有多个神经元层。一般将 MLP 的第一层称为输入层，中间的层为隐藏层，最后一层为输出层。MLP 并没有规定隐藏层的数量，因此可以根据实际处理需求选择合适的隐藏层层数，且对于隐藏层和输出层中每层神经元的个数也没有限制。&lt;/p&gt;
&lt;p&gt;多层感知机的关键问题在于如何训练其中各层间的连接权值，方法有一些不过大家最熟知的就是反向传播 BP 算法了。&lt;/p&gt;
&lt;p&gt;反向传播算法的具体推导涉及大量的公式，因此我们就不写了，大家随便找一本书都能找到资料，勤快的可以自己推导一遍。&lt;/p&gt;
&lt;p&gt;这里给大家一个实际的案例来体会：&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;输出为 y，损失函数为 E。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnalign=&#34;left&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;21&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;22&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\begin{array}{l} y=h_{1} w_{h 1}+h_{2} w_{h 2}=x_{1} w_{11}+x_{2} w_{12}+x_{2} w_{21}+x_{2} w_{22} \\ E=\frac{1}{2}(y-t)^{2} \end{array} 
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.4051080000000002em;vertical-align:-0.9525540000000003em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-l&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.452554em;&#34;&gt;&lt;span style=&#34;top:-3.612554em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4074459999999998em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9525540000000003em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;假如某一时刻值如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnalign=&#34;left&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;w&lt;/mi&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;w&lt;/mi&gt;&lt;mn&gt;21&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;0.1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;w&lt;/mi&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;0.1&lt;/mn&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;w&lt;/mi&gt;&lt;mn&gt;22&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.8&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;h&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.9&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\begin{array}{l} \mathrm{x}_{1}=1, \mathrm{x}_{2}=-1, \mathrm{w}_{11}=0.1, \mathrm{w}_{21}=-0.1, \mathrm{w}_{12}=-0.1 \\ \mathrm{w}_{22}=0.1, \mathrm{w}_{\mathrm{h} 1}=0.8, \mathrm{w}_{\mathrm{h} 2}=0.9, \mathrm{t}=0 \end{array} 
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.4000000000000004em;vertical-align:-0.9500000000000004em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-l&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34; style=&#34;margin-right:0.01389em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34; style=&#34;margin-right:0.01389em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34; style=&#34;margin-right:0.01389em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4099999999999997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34; style=&#34;margin-right:0.01389em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34; style=&#34;margin-right:0.01389em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathrm mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34; style=&#34;margin-right:0.01389em;&#34;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathrm mtight&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnalign=&#34;left&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;21&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mn&gt;22&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;0.2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;0.02&lt;/mn&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\begin{array}{l} h_{1}=w_{11} x_{1}+w_{12} x_{2}=0.2 \\ h_{2}=w_{21} x_{1}+w_{22} x_{2}=-0.2 \\ y=h_{1} w_{h 1}+h_{2} w_{h 2}=-0.02 \end{array} 
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:3.6000000000000005em;vertical-align:-1.5500000000000007em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-l&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0099999999999993em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.8099999999999994em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.5500000000000007em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;那么我们可以计算 E 对&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_{h1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的误差传播值为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∂&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∂&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∂&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∂&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;y&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∂&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∂&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;0.004&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\frac{\partial \mathrm{E}}{\partial w_{h 1}}=\frac{\partial \mathrm{E}}{\partial \mathrm{y}} \frac{\partial y}{\partial w_{h 1}}=(y-t) h_{1}=-0.004 
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.20744em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.37144em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34; style=&#34;margin-right:0.05556em;&#34;&gt;∂&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34; style=&#34;margin-right:0.05556em;&#34;&gt;∂&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.25188em;vertical-align:-0.8804400000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.37144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34; style=&#34;margin-right:0.05556em;&#34;&gt;∂&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34; style=&#34;margin-right:0.01389em;&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34; style=&#34;margin-right:0.05556em;&#34;&gt;∂&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathrm&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8804400000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3714399999999998em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34; style=&#34;margin-right:0.05556em;&#34;&gt;∂&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34; style=&#34;margin-right:0.05556em;&#34;&gt;∂&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下次更新&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_{h1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 这个参数的时候就可以采用：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;η&lt;/mi&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∂&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∂&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;w_{h 1}=w_{h 1}-\eta \frac{\partial E}{\partial w_{h 1}} 
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.73333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.20744em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;η&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.37144em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34; style=&#34;margin-right:0.05556em;&#34;&gt;∂&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02691em;&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34; style=&#34;margin-right:0.05556em;&#34;&gt;∂&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;η 就是学习率了，原理就是这样，一层一层推导下去就行了。&lt;/p&gt;
&lt;p&gt;反向传播算法让多层感知机，或者说传统的全连接神经网络有了训练的手段，引发了神经网络的第二次热潮，虽然为期不长，毕竟当时算力和数据都很有限，但是全连接神经网络总算是正式起来了。&lt;/p&gt;
&lt;p&gt;卷积神经网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全连接神经网络的 2 大缺陷&lt;br /&gt;
传统的 BP 神经网络在 20 世纪 80 年代左右流行，但是很快因为 SVM 等核方法的诞生而黯然失色。这是因为传统的 BP 神经网络有几个重大的缺陷。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先是原理上的缺陷：BP 神经网络仍然是有监督的传统机器学习方法，遵循着以下思路。&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;也就是说，不过是在最后面将 SVM 或者其他分类器换成神经网络，在大部分情况下其实没有什么优势，甚至增加了问题的复杂度。&lt;/p&gt;
&lt;p&gt;提取的特征虽然是研究者们经过反复实验证明有效的特征，但仍然会一定程度上丢失了图像中的结构信息，从而丢失了一些对旋转扭曲等的不变性。而且要求输入的大小是固定的。为了学习到如偏移等微小的变化，需要有足够多的参数和足够多丰富的样本，最终学习到的权重，很可能在不同的位置处还会有非常相似的权重。&lt;/p&gt;
&lt;p&gt;有人可能会说，直接把图像作为输入而不提取特征行不行？请接着往下看。&lt;/p&gt;
&lt;p&gt;再一个就是结构上的缺陷：参数巨多，丢失空间信息。&lt;br /&gt;
全连接神经网络从 BP 算法提出开始，发展于 90 年代，那时候的计算机属于 CPU 时代，根本就无法撑起海量参数的计算。&lt;/p&gt;
&lt;p&gt;如果一个隐藏层特征图像大小为 100×100，输入层的特征图像大小为 100×100，这意味着学习这一层需要 100×100×100×100=&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;10^8&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的参数。如果以 32 位的浮点数进行存储，就需要&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;4×10^8&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的字节的存储量，约等于 400MB 的参数量。仅仅这样的一个网络层，其模型参数量已经超过了 AlexNet 网络的参数量，而 100×100 的特征图像分辨率，已经低于很多任务能够成功解决的下限。除了计算过程中需要存储的海量的参数，还有海量的计算，这些都超过了当时硬件的能力，因此大大限制了网络的大小，尤其是对于一些大的图像输入。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;卷积神经网络的崛起&lt;br /&gt;
不管是历史局限性也好，还是神经网络有种种毛病，总之 80 年代后的 20 年间它不是主流。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过在上个世纪 90 年代研究神经网络的学者们没有停止，经典的诸如 LeNet5 这样的网络被提出。&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;LeNet5，1999 年由深度学习三巨头中 LeCun， Bengi 的提出，成功用于银行支票上的手写数字识别，最重要的两个概念（局部连接 + 池化）&lt;/p&gt;
&lt;p&gt;下面这个视频记录了 1993 年 Yann LeCun 展示的，用于文本识别的世界上第一个卷积网络，所有人都可以通过当时的视频，亲自深刻感受到，当今经典又伟大的 CNN，是如何诞生的。&lt;/p&gt;
&lt;p&gt;为什么是卷积神经网络呢？首先自然是要知道什么是卷积神经网络。&lt;/p&gt;
&lt;p&gt;卷积神经网络的基本网络层&lt;br /&gt;
卷积神经网络：英文全称：Convolutional Neural Networks、简称：CNN&lt;/p&gt;
&lt;p&gt;CNN 主要包含卷积层、池化层和全连接层&lt;/p&gt;
&lt;p&gt;卷积层：用于对图像进行特征提取操作，其卷积核权重是共享权值的，对应的相关概念还包括步长，填充。&lt;br /&gt;
池化层：用于降低特征图大小，降低后续操作的计算量和参数量&lt;br /&gt;
全连接层：最终进行分类输出使用，本质就是多层感知机&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是卷积？&lt;br /&gt;
卷积在工程和数学上有非常多的应用，在信号处理领域中，任意一个线性系统的输出，就是输入信号和系统激励函数的卷积。放到数字图像处理领域，卷积操作一般指图像领域的二维卷积。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;一个二维卷积的案例如上，在图像上滑动，取与卷积核大小相等的区域，逐像素做乘法然后相加。 例如原始图像大小是 5×5，卷积核大小是 3×3。首先卷积核与原始图像左上角 3×3 对应位置的元素相乘求和，得到的数值作为结果矩阵第一行第一列的元素值，然后卷积核向右移动一个单位（即步长 stride 为 1），与原始图像前三行第 2、3、4 列所对应位置的元素分别相乘并求和，得到的数值作为结果矩阵第一行第二列的元素值，以此类推。&lt;/p&gt;
&lt;p&gt;故卷积就是：一个核矩阵在一个原始矩阵上从上往下、从左往右扫描，每次扫描都得到一个结果，将所有结果组合到一起得到一个新的结果矩阵。 注意这里我们不区分卷积和互相关，它们的区别只在于权重算子是否进行了翻转。之所以不重视，是因为在机器学习中，卷积核是否翻转，并不影响算法学习。&lt;/p&gt;
&lt;p&gt;以下的代码可以帮助理解：&lt;/p&gt;
&lt;p&gt;import torch&lt;br /&gt;
from torch import nn&lt;br /&gt;
​&lt;br /&gt;
def corr2d (X, K):  # X 是输入，K 是卷积核&lt;br /&gt;
 h, w = K.shape  # 获取卷积核的大小&lt;br /&gt;
 Y = torch.zeros ((X.shape [0] - h + 1, X.shape [1] - w + 1))&lt;br /&gt;
for i in range(Y.shape[0]):&lt;br /&gt;
for j in range(Y.shape[1]):&lt;br /&gt;
Y [i, j] = (X [i: i + h, j: j + w] * K).sum ()  # 累加&lt;br /&gt;
 return Y&lt;br /&gt;
​&lt;br /&gt;
X = torch.tensor ([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) # 模拟一个输入&lt;br /&gt;
 K = torch.tensor ([[0, 1], [2, 3]])                  # 模拟一个卷积核&lt;br /&gt;
 corr2d (X, K)&lt;br /&gt;
tensor([[19., 25.],&lt;br /&gt;
[37., 43.]])&lt;br /&gt;
 下图就是上面程序的模拟图 Image&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;填充（Padding）&lt;br /&gt;
使卷积后图像分辨率不变，方便计算特征图尺寸的变化&lt;br /&gt;
弥补边界信息 “丢失”&lt;br /&gt;
 填充（padding）是指在输入高和宽的两侧填充元素（通常是 0 元素）。下图我们在原输入高和宽的两侧分别添加了值为 0 的元素，使得输入高和宽从 3 变成了 5，并导致输出高和宽由 2 增加到 4。下图阴影部分为第一个输出元素及其计算所使用的输入和核数组元素：0×0+0×1+0×2+0×3=0。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;步长（Stride）&lt;br /&gt;
卷积窗口从输入数组的最左上方开始，按从左往右、从上往下的顺序，依次在输入数组上滑动。我们将每次滑动的行数和列数称为步幅或步长（stride）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示了在高上步幅为 3、在宽上步幅为 2 的卷积运算。可以看到，输出第一列第二个元素时，卷积窗口向下滑动了 3 行，而在输出第一行第二个元素时卷积窗口向右滑动了 2 列。当卷积窗口在输入上再向右滑动 2 列时，由于输入元素无法填满窗口，无结果输出。下图阴影部分为输出元素及其计算所使用的输入和核数组元素：0×0+0×1+1×2+2×3=8、0×0+6×1+0×2+0×3=6。&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;池化&lt;br /&gt;
对图像进行下采样，降低图像分辨率。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;池化层的作用：使特征图变小，简化网络计算复杂度；压缩特征，提取主要特征&lt;/p&gt;
&lt;p&gt;常见的池化操作可以分为：最大池化（Max Pool）、平均池化（Avg Pool），示意图如下：&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;卷积和池化输出尺寸计算&lt;br /&gt;
假设输入图片的高和宽一致，卷积核的宽和高一致，那么输入图像的尺寸与输出图像的尺寸有如下关系：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;F_{in}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是输入图像、k 是卷积核的大小、p 是图像填充的大小、s 是卷积核的步幅、&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;F_o&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;o&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是输出、&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌊&lt;/mo&gt;&lt;mn&gt;6.6&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;⌋&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\lfloor 6.6 \rfloor&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;⌊&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;⌋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是向下取整的意思，比如结果是 6.6，那么向下取整就是 6&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;⌊&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;mtext&gt;in &lt;/mtext&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo fence=&#34;true&#34;&gt;⌋&lt;/mo&gt;&lt;/mrow&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;F_{o}=\left\lfloor\frac{F_{\text {in }}-k+2 p}{s}\right\rfloor+1
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;o&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.40003em;vertical-align:-0.95003em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;⌊&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3714399999999998em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31750199999999995em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord text mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;in &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;⌋&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;除此之外，卷积神经网络还包括许多优化技术，大家可以参考相关资料。&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;为什么要用卷积来学习呢？&lt;br /&gt;
图像都是用方形矩阵来表达的，学习的本质就是要抽象出特征，以边缘检测为例。它就是识别数字图像中亮度变化明显的点，这些点连接起来往往是物体的边缘。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传统的边缘检测常用的方法包括一阶和二阶导数法，本质上都是利用一个卷积核在原图上进行滑动，只是其中各个位置的系数不同，比如 3×3 的 sobel 算子计算 x 方向的梯度幅度，使用的就是下面的卷积核算子。&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;如果要用 sobel 算子完成一次完整的边缘检测，就要同时检测 x 方向和 y 方向，然后进行融合。这就是两个通道的卷积，先用两个卷积核进行通道内的信息提取，再进行通道间的信息融合。 这就是卷积提取特征的本质，而所有基于卷积神经网络来学习的图像算法，都是通过不断的卷积来进行特征的抽象，直到实现网络的目标。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;卷积神经网络的优势在哪？&lt;br /&gt;
前面说了全连接神经网络的原理和结构上的缺陷，而这正好是卷积的优势。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学习原理上的改进。&lt;br /&gt;
卷积神经网络不再是有监督学习了，不需要从图像中提取特征，而是直接从原始图像数据进行学习，这样可以最大程度的防止信息在还没有进入网络之前就丢失。&lt;/p&gt;
&lt;p&gt;学习方式的改进。&lt;br /&gt;
前面说了全连接神经网络一层的结果是与上一层的节点全部连接的，100×100 的图像，如果隐藏层也是同样大小（100×100 个）的神经元，光是一层网络，就已经有 10^8 个参数。要优化和存储这样的参数量，是无法想象的，所以经典的神经网络，基本上隐藏层在一两层左右。而卷积神经网络某一层的结点，只与上一层的一个图像块相连。&lt;/p&gt;
&lt;p&gt;用于产生同一个图像中各个空间位置像素的卷积核是同一个，这就是所谓的权值共享。对于与全连接层同样多的隐藏层，假如每个神经元只和输入 10×10 的局部 patch 相连接，且卷积核移动步长为 10，则参数为：100×100×10×10，降低了 2 个数量级。 又能更好的学习，参数又低，卷积神经网络当然是可以成功了。&lt;/p&gt;
&lt;p&gt;以上就是本训练营所有理论知识了，接下来将是项目实战部分，是不是迫不及待想要敲代码了&lt;/p&gt;
&lt;p&gt;-- By：有三 AI 团队&lt;/p&gt;
&lt;p&gt;聚焦于让大家能够系统性地完成 AI 各个领域所需的专业知识的学习，实现三人行必有 AI，三人行必有我师的愿景。&lt;/p&gt;
</content>
        <updated>2021-01-29T13:38:29.000Z</updated>
    </entry>
    <entry>
        <id>https://theprofessor249.github.io/2021/01/29/python_5_day/</id>
        <title>python_5_day</title>
        <link rel="alternate" href="https://theprofessor249.github.io/2021/01/29/python_5_day/"/>
        <content type="html">&lt;p&gt;基于人脸的常见表情识别 —— 数据获取与整理&lt;br /&gt;
项目背景&lt;/p&gt;
&lt;p&gt;数据获取&lt;br /&gt;
 2.1 数据爬取&lt;/p&gt;
&lt;p&gt;数据整理&lt;br /&gt;
 3.1 图片格式统一&lt;br /&gt;
 3.2 数据清洗&lt;br /&gt;
 3.3 提取嘴唇区域&lt;/p&gt;
&lt;p&gt;该 Task 就是本训练营的实战部分了，这一部分我们会讲解如何获取数据集，并对数据集进行整理。&lt;/p&gt;
&lt;p&gt;这个 Task 会涉及到数据集等文件的下载，请运行以下代码下载相关文件，由于需要对下载的文件进行解压，所以速度会比较慢，请耐心等候。（大概需要 8 分钟左右）&lt;/p&gt;
&lt;p&gt;如果你不是第一次运行这个项目，那么就跳过以下代码&lt;/p&gt;
&lt;p&gt;print (&amp;quot;**************** 下载文件中。。。&amp;quot;)&lt;br /&gt;
!wget &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RpYW5jaGktbWVkaWEub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL2RyYWdvbmJhbGwvREwvb3RoZXIvZGF0YS9FbW90aW9uX1JlY29nbml0aW9uX0ZpbGUuemlw&#34;&gt;http://tianchi-media.oss-cn-beijing.aliyuncs.com/dragonball/DL/other/data/Emotion_Recognition_File.zip&lt;/span&gt;&lt;br /&gt;
print (&amp;quot;**************** 下载完成。。。&amp;quot;)&lt;br /&gt;
 print (&amp;quot;**************** 解压文件中。。。&amp;quot;)&lt;br /&gt;
!unzip -q -o ./Emotion_Recognition_File.zip -d Emotion_Recognition_File/&lt;br /&gt;
print(&amp;quot;*&lt;em&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; 解压完毕&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt; &amp;quot;)&lt;br /&gt;
 为了帮助大家理解所下载的文件，这里将会做一个简单的说明&lt;/p&gt;
&lt;p&gt;所有下载的文件均在 Emotion_Recognition_File （表情识别的英文名称）文件夹下，以下对各个文件进行说明&lt;/p&gt;
&lt;p&gt;img_type_test：放置了不同后缀名的图片，在 3.1 图片格式统一 将会使用到&lt;br /&gt;
 face_detect_model：放置了人脸检测所需要的模型，在 3.2 数据清洗、3.3 提取嘴唇区域 将会使用到&lt;br /&gt;
 face_det_img：放置了一些包含人脸的图片和不包含人人脸的图片，在 3.2 数据清洗 将会使用到&lt;br /&gt;
 mouth_det_img：放置了一些包含人脸的图片，在 3.3 提取嘴唇区域 将会使用到&lt;br /&gt;
 train_val_data：放置了本训练营为各位读者准备的数据集，将会在下一个 Task 用到&lt;br /&gt;
 test_img：放置了包含 4 种表情的图片各一张，将会在下一个 Task 用到，我们就是使用这个文件夹里的图片来展示我们的成果&lt;br /&gt;
项目背景&lt;br /&gt;
对于很多初⼊深度学习计算机视觉领域的朋友来说，当前开源资料⾮常多，但有时候难以适从，其中很多资料都没有包含完整的项⽬流程，⽽只是对某个流程的部分截取，对能⼒的锻炼不够。图像分类是整个计算机视觉领域中最基础的任务，也是最重要的任务之⼀，最适合拿来进⾏学习实践。为了让新⼿们能够⼀次性体验⼀个⼯业级别的图像分类任务的完整流程，本次我们选择带领⼤家完成⼀个对图片中⼈脸进⾏表情识别的任务。&lt;/p&gt;
&lt;p&gt;⼈脸表情识别 (facial expression recognition, FER) 作为⼈脸识别技术中的⼀个重要组成部分，近年来在⼈机交互、安全、机器⼈制造、⾃动化、医疗、通信和驾驶领域得到了⼴泛的关注，成为学术界和⼯业界的研究热点，是⼈脸属性分析的重点。&lt;/p&gt;
&lt;p&gt;数据获取&lt;br /&gt;
很多实际项⽬我们不会有现成的数据集，虽然可以通过开源数据集获取，但是我们还是要学会⾃⼰从零开始获取和整理。下⾯讲述如何准备好本次项⽬所需要的数据集，包括以下部分:&lt;/p&gt;
&lt;p&gt;学会使⽤爬⾍爬取图像。&lt;br /&gt;
对获得的图⽚数据进⾏整理，包括重命名，格式统⼀。&lt;br /&gt;
利⽤⼈脸检测算法删选出有⽤的样本，利⽤关键点检测算法裁剪出⽤于算法训练的嘴唇区域。&lt;br /&gt;
2.1 数据爬取&lt;br /&gt;
由于没有直接对应的开源数据集，或者开源数据集中的数据⽐较少，尤其是对于嘟嘴，⼤笑等类的数据。搜索引擎上有海量数据，所以我们可以从中爬取。下⾯开始讲述具体的步骤，我们的任务是⼀个表情分类任务，因此需要爬取相关图⽚，包括嘟嘴（pout），微笑（smile），⼤笑（openmouth）、无表情（none）等表情。&lt;/p&gt;
&lt;p&gt;当前有很多开源的爬虫项目，即使你不懂爬虫的知识，也能够很容易的爬取互联网的资源，下文整理了一些常见的爬虫项目，可以参考进行学习。 【杂谈】深度学习必备，各路免费爬虫一举拿下&lt;/p&gt;
&lt;p&gt;本项目使用的爬虫项目是：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Njemhlbmd5YWJpbi9JbWFnZS1Eb3dubG9hZGVy&#34;&gt;https://github.com/sczhengyabin/Image-Downloader&lt;/span&gt; ，可以按要求爬取百度、Bing、Google 上的图片，提供了非常人性化的 GUI 方便操作，使用方法如下：&lt;/p&gt;
&lt;p&gt;下载爬虫工具&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
使用 python image_downloader_gui.py 调用 GUI 界面，配置好参数 (关键词，路径，爬取数目等)，关键词可以直接在这里输入也可以选择从 txt 文件中选择。&lt;/p&gt;
&lt;p&gt;可以配置需要爬取的样本数目，这里一次爬了 2000 张，妥妥的 3 分钟搞定。&lt;/p&gt;
&lt;p&gt;该项目的 GUI 界面如下，我们尝试爬取 “嘟嘴” 的相关表情：&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
爬取图⽚结果如下：&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
⾃此就可以获得数千张图像，然后进⾏第⼆步，数据整理。&lt;/p&gt;
&lt;p&gt;TIPS：读者可以下载 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Njemhlbmd5YWJpbi9JbWFnZS1Eb3dubG9hZGVy&#34;&gt;https://github.com/sczhengyabin/Image-Downloader&lt;/span&gt; 这个项目中的爬虫工具，在自己的电脑尝试一下数据爬取，相信通过操作，会加深你的印象&lt;/p&gt;
&lt;p&gt;数据整理&lt;br /&gt;
爬取得到的数据是⽐较脏的，需要进⾏整理，主要包括统⼀图⽚后缀和重命名。统⼀后缀格式可以减少以后写数据 API 时的压⼒，也可以测试图⽚是不是可以正常的读取，及时防⽌未知问题的出现，这很重要。&lt;/p&gt;
&lt;p&gt;3.1 图片格式统一&lt;br /&gt;
以下代码可以实现对图片格式的统一，我们在 img_type_test 文件下放置了几张测试图片，读者可以运行尝试。『读者也可以上传不同格式（如 jpg、jpeg、png 等）的图片到 img_type_test 文件下，然后运行下面的代码，下面的代码读取每种图片，然后将其转为 jpg 格式，同时会将原始的图片删除』&lt;/p&gt;
&lt;p&gt;import os&lt;br /&gt;
import sys&lt;br /&gt;
import cv2&lt;br /&gt;
import numpy as np&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
def listfiles(rootDir):&lt;br /&gt;
list_dirs = os.walk(rootDir)&lt;br /&gt;
 for root, dirs, files in list_dirs:  # 遍历文件夹下的图片&lt;br /&gt;
 for d in dirs:&lt;br /&gt;
print((os.path.join(root, d)))&lt;br /&gt;
for f in files:&lt;br /&gt;
fileid = f.split (&#39;.&#39;)[0]  # 获得图片的名字，不含后缀&lt;br /&gt;
 filepath = os.path.join (root, f)&lt;br /&gt;
print(filepath)&lt;br /&gt;
try:&lt;br /&gt;
src = cv2.imread (filepath, 1)  # 读取原始图片，数据会加载到内存中&lt;br /&gt;
 print (&amp;quot;src=&amp;quot;, filepath, src.shape)&lt;br /&gt;
 os.remove (filepath) # 移除原来的图片&lt;br /&gt;
 cv2.imwrite (os.path.join (root, fileid + &amp;quot;.jpg&amp;quot;), src)  # 保存经过格式转换的图片&lt;br /&gt;
 except:&lt;br /&gt;
os.remove(filepath)&lt;br /&gt;
continue&lt;br /&gt;
​&lt;br /&gt;
path = &amp;quot;./Emotion_Recognition_File/img_type_test/&amp;quot;  # 输入图片路径即可，可以在这个文件夹下放置各种后缀名的图片，代码会将所有图片统一成 jpg 格式&lt;br /&gt;
 listfiles (path)&lt;br /&gt;
./Emotion_Recognition_File/img_type_test/000012.jpg&lt;br /&gt;
src= ./Emotion_Recognition_File/img_type_test/000012.jpg (218, 178, 3)&lt;br /&gt;
./Emotion_Recognition_File/img_type_test/000039.jpg&lt;br /&gt;
src= ./Emotion_Recognition_File/img_type_test/000039.jpg (218, 178, 3)&lt;br /&gt;
./Emotion_Recognition_File/img_type_test/000063.jpg&lt;br /&gt;
src= ./Emotion_Recognition_File/img_type_test/000063.jpg (218, 178, 3)&lt;br /&gt;
./Emotion_Recognition_File/img_type_test/000104.jpg&lt;br /&gt;
src= ./Emotion_Recognition_File/img_type_test/000104.jpg (218, 178, 3)&lt;br /&gt;
./Emotion_Recognition_File/img_type_test/000112.jpg&lt;br /&gt;
src= ./Emotion_Recognition_File/img_type_test/000112.jpg (218, 178, 3)&lt;br /&gt;
 统⼀格式为 jpg 之后预览如下：&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
 3.2 数据清洗&lt;br /&gt;
利⽤搜索引擎爬取得到的图⽚肯定有不符合要求的，数据清洗主要是删除不合适的图⽚，即⾮⼈脸的照⽚。&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
可以采⽤⾁眼观察的⽅式，也可以利⽤程序进⾏筛选，我们调⽤ OpenCV 的⼈脸检测算法进⾏筛选，代码如下：&lt;/p&gt;
&lt;h1 id=&#34;codingutf8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#codingutf8&#34;&gt;#&lt;/a&gt; coding:utf8&lt;/h1&gt;
&lt;p&gt;import cv2&lt;br /&gt;
import dlib&lt;br /&gt;
import numpy as np&lt;br /&gt;
import sys&lt;br /&gt;
import os&lt;br /&gt;
import matplotlib.pyplot as plt&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;人脸检测的接口这个是-opencv-中自带的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#人脸检测的接口这个是-opencv-中自带的&#34;&gt;#&lt;/a&gt; 人脸检测的接口，这个是 OpenCV 中自带的&lt;/h1&gt;
&lt;p&gt;cascade_path = &#39;./Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml&#39;&lt;br /&gt;
cascade = cv2.CascadeClassifier(cascade_path)&lt;br /&gt;
​&lt;br /&gt;
img_path = &amp;quot;./Emotion_Recognition_File/face_det_img/&amp;quot; # 测试图片路径&lt;br /&gt;
 images = os.listdir (img_path)&lt;br /&gt;
for image in images:&lt;br /&gt;
im = cv2.imread (os.path.join (img_path, image), 1) # 读取图片&lt;br /&gt;
 rects = cascade.detectMultiScale (im, 1.3, 5)  # 人脸检测函数&lt;br /&gt;
 print (&amp;quot;检测到人脸的数量&amp;quot;, len (rects))&lt;br /&gt;
 if len (rects) == 0:  # len (rects) 是检测人脸的数量，如果没有检测到人脸的话，会显示出图片，适合本地调试使用，在服务器上可能不会显示&lt;/p&gt;
&lt;h1 id=&#34;cv2namedwindowresult-0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cv2namedwindowresult-0&#34;&gt;#&lt;/a&gt; cv2.namedWindow(&#39;Result&#39;, 0)&lt;/h1&gt;
&lt;h1 id=&#34;cv2imshowresult-im&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cv2imshowresult-im&#34;&gt;#&lt;/a&gt; cv2.imshow(&#39;Result&#39;, im)&lt;/h1&gt;
&lt;h1 id=&#34;print没有检测到人脸&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#print没有检测到人脸&#34;&gt;#&lt;/a&gt; print (&amp;quot;没有检测到人脸&amp;quot;)&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;    pass
plt.imshow(im[:, :, ::-1])  # 显示
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;osremoveospathjoinimg_path-image&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#osremoveospathjoinimg_path-image&#34;&gt;#&lt;/a&gt; os.remove(os.path.join(img_path, image))&lt;/h1&gt;
&lt;h1 id=&#34;k-cv2waitkey0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#k-cv2waitkey0&#34;&gt;#&lt;/a&gt; k = cv2.waitKey(0)&lt;/h1&gt;
&lt;h1 id=&#34;if-k-ordq-在英文状态下按下按键-q-会关闭显示窗口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if-k-ordq-在英文状态下按下按键-q-会关闭显示窗口&#34;&gt;#&lt;/a&gt; if k == ord (&#39;q&#39;): # 在英文状态下，按下按键 q 会关闭显示窗口&lt;/h1&gt;
&lt;h1 id=&#34;break&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#break&#34;&gt;#&lt;/a&gt; break&lt;/h1&gt;
&lt;h1 id=&#34;print&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#print&#34;&gt;#&lt;/a&gt; print()&lt;/h1&gt;
&lt;h1 id=&#34;cv2destroyallwindows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cv2destroyallwindows&#34;&gt;#&lt;/a&gt; cv2.destroyAllWindows()&lt;/h1&gt;
&lt;p&gt;检测到人脸的数量 1&lt;/p&gt;
&lt;p&gt;检测到人脸的数量 1&lt;/p&gt;
&lt;p&gt;检测到人脸的数量 0&lt;/p&gt;
&lt;p&gt;如果上面的代码运行结果与下面类似，可以重新运行代码&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
这个⼈脸检测算法是传统算法，召回率不⾼，因此会有⼀些好样本被删除。经过处理后，可以看到都是⽐较好的样本了，后⾯提取⼈脸关键点也会简单很多。&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
如果利⽤⼈脸检测算法仍然⽆法清除⼲净样本，则需要⼿动筛选。当然如果你使⽤多个关键词或者使⽤不同的搜索引擎同样的关键词，或者从视频中提取图⽚，那么爬取回来的图⽚很可能有重复或者⾮常的相似，这样的数据集需要去重。&lt;/p&gt;
&lt;p&gt;3.3 提取嘴唇区域&lt;br /&gt;
接下来我们要将样本处理成我们真正训练所需要的图像，本任务只对嘴唇部分的表情进⾏识别，所以我们的目标就是获取人脸嘴唇区域的图像，然后进行分类。我们利⽤ Opencv+Dlib 算法提取嘴唇区域， Dlib 算法会得到⾯部的 68 个关键点，我们从中得到嘴唇区域，并适当扩⼤。&lt;/p&gt;
&lt;p&gt;人脸 68 点位置图如下：&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
下面的代码可以对图片进行人脸检测，检测到人脸后，会将嘴巴区域分割出来，形成数据集！&lt;/p&gt;
&lt;p&gt;读者可以尝试运行代码，便可以理解这样做的意义&lt;/p&gt;
&lt;h1 id=&#34;codingutf8-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#codingutf8-2&#34;&gt;#&lt;/a&gt; coding:utf8&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
import cv2&lt;br /&gt;
import dlib&lt;br /&gt;
import numpy as np&lt;br /&gt;
import sys&lt;br /&gt;
import os&lt;br /&gt;
import matplotlib.pyplot as plt&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;配置-dlib-关键点检测路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置-dlib-关键点检测路径&#34;&gt;#&lt;/a&gt; 配置 Dlib 关键点检测路径&lt;/h1&gt;
&lt;h1 id=&#34;文件可以从-httpdlibnetfiles-下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件可以从-httpdlibnetfiles-下载&#34;&gt;#&lt;/a&gt; 文件可以从 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RsaWIubmV0L2ZpbGVzLw==&#34;&gt;http://dlib.net/files/&lt;/span&gt; 下载&lt;/h1&gt;
&lt;p&gt;PREDICTOR_PATH = &amp;quot;./Emotion_Recognition_File/face_detect_model/shape_predictor_68_face_landmarks.dat&amp;quot;&lt;br /&gt;
predictor = dlib.shape_predictor(PREDICTOR_PATH)&lt;/p&gt;
&lt;h1 id=&#34;配置人脸检测器路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置人脸检测器路径&#34;&gt;#&lt;/a&gt; 配置人脸检测器路径&lt;/h1&gt;
&lt;p&gt;cascade_path = &#39;./Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml&#39;&lt;br /&gt;
cascade = cv2.CascadeClassifier(cascade_path)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;调用-cascadedetectmultiscale-人脸检测器和-dlib-的关键点检测算法-predictor-获得关键点结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用-cascadedetectmultiscale-人脸检测器和-dlib-的关键点检测算法-predictor-获得关键点结果&#34;&gt;#&lt;/a&gt; 调用 cascade.detectMultiScale 人脸检测器和 Dlib 的关键点检测算法 predictor 获得关键点结果&lt;/h1&gt;
&lt;p&gt;def get_landmarks(im):&lt;br /&gt;
rects = cascade.detectMultiScale (im, 1.3, 5) # 人脸检测&lt;br /&gt;
 x, y, w, h = rects [0]  # 获取人脸的四个属性值，左上角坐标 x,y 、高宽 w、h&lt;/p&gt;
&lt;h1 id=&#34;printx-y-w-h&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#printx-y-w-h&#34;&gt;#&lt;/a&gt; print(x, y, w, h)&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;rect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h)) 
return np.matrix([[p.x, p.y] for p in predictor(im, rect).parts()])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br /&gt;
​&lt;br /&gt;
def annotate_landmarks(im, landmarks):&lt;br /&gt;
im = im.copy()&lt;br /&gt;
for idx, point in enumerate(landmarks):&lt;br /&gt;
pos = (point[0, 0], point[0, 1])&lt;br /&gt;
cv2.putText(im,&lt;br /&gt;
str(idx),&lt;br /&gt;
pos,&lt;br /&gt;
fontFace=cv2.FONT_HERSHEY_SCRIPT_SIMPLEX,&lt;br /&gt;
fontScale=0.4,&lt;br /&gt;
color=(0, 0, 255))&lt;br /&gt;
cv2.circle(im, pos, 5, color=(0, 255, 255))&lt;br /&gt;
return im&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
def getlipfromimage(im, landmarks):&lt;br /&gt;
xmin = 10000&lt;br /&gt;
xmax = 0&lt;br /&gt;
ymin = 10000&lt;br /&gt;
ymax = 0&lt;br /&gt;
# 根据最外围的关键点获取包围嘴唇的最小矩形框&lt;br /&gt;
# 68 个关键点是从&lt;br /&gt;
# 左耳朵 0 - 下巴 - 右耳朵 16 - 左眉毛（17-21）- 右眉毛（22-26）- 左眼睛（36-41）&lt;br /&gt;
# 右眼睛（42-47）- 鼻子从上到下（27-30）- 鼻孔（31-35）&lt;br /&gt;
# 嘴巴外轮廓（48-59）嘴巴内轮廓（60-67）&lt;br /&gt;
for i in range(48, 67):&lt;br /&gt;
x = landmarks[i, 0]&lt;br /&gt;
y = landmarks[i, 1]&lt;br /&gt;
if x &amp;lt; xmin:&lt;br /&gt;
xmin = x&lt;br /&gt;
if x &amp;gt; xmax:&lt;br /&gt;
xmax = x&lt;br /&gt;
if y &amp;lt; ymin:&lt;br /&gt;
ymin = y&lt;br /&gt;
if y &amp;gt; ymax:&lt;br /&gt;
ymax = y&lt;br /&gt;
​&lt;br /&gt;
print(&amp;quot;xmin=&amp;quot;, xmin)&lt;br /&gt;
print(&amp;quot;xmax=&amp;quot;, xmax)&lt;br /&gt;
print(&amp;quot;ymin=&amp;quot;, ymin)&lt;br /&gt;
print(&amp;quot;ymax=&amp;quot;, ymax)&lt;br /&gt;
​&lt;br /&gt;
roiwidth = xmax - xmin&lt;br /&gt;
roiheight = ymax - ymin&lt;br /&gt;
​&lt;br /&gt;
roi = im[ymin:ymax, xmin:xmax, 0:3]&lt;br /&gt;
​&lt;br /&gt;
if roiwidth &amp;gt; roiheight:&lt;br /&gt;
dstlen = 1.5 * roiwidth&lt;br /&gt;
else:&lt;br /&gt;
dstlen = 1.5 * roiheight&lt;br /&gt;
​&lt;br /&gt;
diff_xlen = dstlen - roiwidth&lt;br /&gt;
diff_ylen = dstlen - roiheight&lt;br /&gt;
​&lt;br /&gt;
newx = xmin&lt;br /&gt;
newy = ymin&lt;br /&gt;
​&lt;br /&gt;
imagerows, imagecols, channel = im.shape&lt;br /&gt;
if newx &amp;gt;= diff_xlen / 2 and newx + roiwidth + diff_xlen / 2 &amp;lt; imagecols:&lt;br /&gt;
newx = newx - diff_xlen / 2&lt;br /&gt;
elif newx &amp;lt; diff_xlen / 2:&lt;br /&gt;
newx = 0&lt;br /&gt;
else:&lt;br /&gt;
newx = imagecols - dstlen&lt;br /&gt;
​&lt;br /&gt;
if newy &amp;gt;= diff_ylen / 2 and newy + roiheight + diff_ylen / 2 &amp;lt; imagerows:&lt;br /&gt;
newy = newy - diff_ylen / 2&lt;br /&gt;
elif newy &amp;lt; diff_ylen / 2:&lt;br /&gt;
newy = 0&lt;br /&gt;
else:&lt;br /&gt;
newy = imagerows - dstlen&lt;br /&gt;
​&lt;br /&gt;
roi = im[int(newy):int(newy + dstlen), int(newx):int(newx + dstlen), 0:3]&lt;br /&gt;
return roi&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
def listfiles(rootDir):&lt;br /&gt;
list_dirs = os.walk(rootDir)&lt;br /&gt;
for root, dirs, files in list_dirs:&lt;br /&gt;
for d in dirs:&lt;br /&gt;
print(os.path.join(root, d))&lt;br /&gt;
for f in files:&lt;br /&gt;
fileid = f.split(&#39;.&#39;)[0]&lt;br /&gt;
​&lt;br /&gt;
filepath = os.path.join(root, f)&lt;br /&gt;
try:&lt;br /&gt;
im = cv2.imread(filepath, 1)&lt;br /&gt;
landmarks = get_landmarks(im)&lt;br /&gt;
roi = getlipfromimage(im, landmarks)&lt;br /&gt;
roipath = filepath.replace(&#39;.jpg&#39;, &#39;_mouth.png&#39;)&lt;/p&gt;
&lt;h1 id=&#34;cv2imwriteroipath-roi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cv2imwriteroipath-roi&#34;&gt;#&lt;/a&gt; cv2.imwrite(roipath, roi)&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;            plt.imshow(roi[:, :, ::-1])
            plt.show()
        except:
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;printerror&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#printerror&#34;&gt;#&lt;/a&gt; print(&amp;quot;error&amp;quot;)&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;            continue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br /&gt;
​&lt;br /&gt;
listfiles(&amp;quot;./Emotion_Recognition_File/mouth_det_img/&amp;quot;)&lt;br /&gt;
xmin= 65&lt;br /&gt;
xmax= 114&lt;br /&gt;
ymin= 150&lt;br /&gt;
ymax= 168&lt;/p&gt;
&lt;p&gt;xmin= 67&lt;br /&gt;
xmax= 111&lt;br /&gt;
ymin= 151&lt;br /&gt;
ymax= 169&lt;/p&gt;
&lt;p&gt;xmin= 73&lt;br /&gt;
xmax= 105&lt;br /&gt;
ymin= 149&lt;br /&gt;
ymax= 161&lt;/p&gt;
&lt;p&gt;xmin= 513&lt;br /&gt;
xmax= 652&lt;br /&gt;
ymin= 406&lt;br /&gt;
ymax= 515&lt;/p&gt;
&lt;p&gt;xmin= 211&lt;br /&gt;
xmax= 259&lt;br /&gt;
ymin= 287&lt;br /&gt;
ymax= 322&lt;/p&gt;
&lt;p&gt;运行上面的代码会显示嘴巴区域图，如果看不到，重新运行一下即可&lt;/p&gt;
&lt;p&gt;（xmin，ymin） （xmax，ymax） 分别代表嘴唇区域在原始图像的位置，即左上角坐标和右下角坐标&lt;/p&gt;
&lt;p&gt;结果如下，⾃此就完成了⾃建数据集操作&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
每种表情放置在各自的文件夹下并命名&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br /&gt;
上面就是本训练营『数据获取与整理』部分的内容，有了数据，接下来的任务就可以训练我们的表情分类模型吧。&lt;/p&gt;
&lt;p&gt;加油！这也许是你的第一个深度学习模型了。&lt;/p&gt;
&lt;p&gt;-- By：有三 AI 团队&lt;/p&gt;
&lt;p&gt;聚焦于让大家能够系统性地完成 AI 各个领域所需的专业知识的学习，实现三人行必有 AI，三人行必有我师的愿景。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
</content>
        <updated>2021-01-29T13:38:29.000Z</updated>
    </entry>
    <entry>
        <id>https://theprofessor249.github.io/2021/01/29/python-3-day/</id>
        <title>python_3_day</title>
        <link rel="alternate" href="https://theprofessor249.github.io/2021/01/29/python-3-day/"/>
        <content type="html">&lt;p&gt;Python 入门 (下)&lt;br /&gt;
 简介&lt;/p&gt;
&lt;p&gt;函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数的定义&lt;/li&gt;
&lt;li&gt;函数的调用&lt;/li&gt;
&lt;li&gt;函数文档&lt;/li&gt;
&lt;li&gt;函数参数&lt;/li&gt;
&lt;li&gt;函数的返回值&lt;/li&gt;
&lt;li&gt;变量作用域&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lambda - 表达式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;匿名函数的定义&lt;/li&gt;
&lt;li&gt;匿名函数的应用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类与对象&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;属性和方法组成对象&lt;/li&gt;
&lt;li&gt;self 是什么？&lt;/li&gt;
&lt;li&gt;Python 的魔法方法&lt;/li&gt;
&lt;li&gt;公有和私有&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;组合&lt;/li&gt;
&lt;li&gt;类、类对象和实例对象&lt;/li&gt;
&lt;li&gt;什么是绑定？&lt;/li&gt;
&lt;li&gt;一些相关的内置函数（BIF）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;魔法方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本的魔法方法&lt;/li&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;反算术运算符&lt;/li&gt;
&lt;li&gt;增量赋值运算&lt;/li&gt;
&lt;li&gt;一元运算符&lt;/li&gt;
&lt;li&gt;属性访问&lt;/li&gt;
&lt;li&gt;描述符&lt;/li&gt;
&lt;li&gt;定制序列&lt;/li&gt;
&lt;li&gt;迭代器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简介&lt;br /&gt;
 Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;本实验包括以下内容：&lt;/p&gt;
&lt;p&gt;函数&lt;br /&gt;
函数的定义&lt;br /&gt;
函数的调用&lt;br /&gt;
函数文档&lt;br /&gt;
函数参数&lt;br /&gt;
函数的返回值&lt;br /&gt;
变量作用域&lt;br /&gt;
 Lambda 表达式&lt;br /&gt;
匿名函数的定义&lt;br /&gt;
匿名函数的应用&lt;br /&gt;
类与对象&lt;br /&gt;
对象 = 属性 + 方法&lt;br /&gt;
 self 是什么？&lt;br /&gt;
Python 的魔法方法&lt;br /&gt;
公有和私有&lt;br /&gt;
继承&lt;br /&gt;
组合&lt;br /&gt;
类、类对象和实例对象&lt;br /&gt;
什么是绑定？&lt;br /&gt;
一些相关的内置函数（BIF）&lt;br /&gt;
魔法方法&lt;br /&gt;
基本的魔法方法&lt;br /&gt;
算术运算符&lt;br /&gt;
反算术运算符&lt;br /&gt;
增量赋值运算符&lt;br /&gt;
一元运算符&lt;br /&gt;
属性访问&lt;br /&gt;
描述符&lt;br /&gt;
定制序列&lt;br /&gt;
迭代器&lt;br /&gt;
函数&lt;br /&gt;
函数的定义&lt;br /&gt;
还记得 Python 里面 “万物皆对象” 么？Python 把函数也当成对象，可以从另一个函数中返回出来而去构建高阶函数，比如： 参数是函数、返回值是函数。&lt;/p&gt;
&lt;p&gt;我们首先来介绍函数的定义。&lt;/p&gt;
&lt;p&gt;函数以 def 关键词开头，后接函数名和圆括号 ()。&lt;br /&gt;
函数执行的代码以冒号起始，并且缩进。&lt;br /&gt;
return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的 return 相当于返回 None。&lt;br /&gt;
def functionname (parameters):&lt;br /&gt;
&amp;quot;函数_文档字符串&amp;quot;&lt;br /&gt;
function_suite&lt;br /&gt;
return [expression]&lt;/p&gt;
&lt;p&gt;函数的调用&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;printme&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;printme&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我要调用用户自定义函数!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 我要调用用户自定义函数！&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;printme&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;再次调用同一函数&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 再次调用同一函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;temp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; printme&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hello&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# hello&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# None&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;我要调用用户自定义函数！&lt;br /&gt;
 再次调用同一函数&lt;br /&gt;
 hello&lt;br /&gt;
None&lt;br /&gt;
 函数文档&lt;br /&gt;
 def MyFirstFunction (name):&lt;br /&gt;
&amp;quot;函数定义过程中 name 是形参&amp;quot;&lt;br /&gt;
# 因为 Ta 只是一个形式，表示占据一个参数位置&lt;br /&gt;
 print (&#39; 传递进来的 {0} 叫做实参，因为 Ta 是具体的参数值！&#39;.format (name))&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
MyFirstFunction (&#39; 老马的程序人生 &#39;)&lt;/p&gt;
&lt;h1 id=&#34;传递进来的老马的程序人生叫做实参因为ta是具体的参数值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传递进来的老马的程序人生叫做实参因为ta是具体的参数值&#34;&gt;#&lt;/a&gt; 传递进来的老马的程序人生叫做实参，因为 Ta 是具体的参数值！&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(MyFirstFunction.&lt;strong&gt;doc&lt;/strong&gt;)&lt;/p&gt;
&lt;h1 id=&#34;函数定义过程中name是形参&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数定义过程中name是形参&#34;&gt;#&lt;/a&gt; 函数定义过程中 name 是形参&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
help(MyFirstFunction)&lt;/p&gt;
&lt;h1 id=&#34;help-on-function-myfirstfunction-in-module-main&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#help-on-function-myfirstfunction-in-module-main&#34;&gt;#&lt;/a&gt; Help on function MyFirstFunction in module &lt;strong&gt;main&lt;/strong&gt;:&lt;/h1&gt;
&lt;h1 id=&#34;myfirstfunctionname&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#myfirstfunctionname&#34;&gt;#&lt;/a&gt; MyFirstFunction(name)&lt;/h1&gt;
&lt;h1 id=&#34;函数定义过程中name是形参-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数定义过程中name是形参-2&#34;&gt;#&lt;/a&gt; 函数定义过程中 name 是形参&lt;/h1&gt;
&lt;p&gt;传递进来的老马的程序人生叫做实参，因为 Ta 是具体的参数值！&lt;br /&gt;
函数定义过程中 name 是形参&lt;br /&gt;
 Help on function MyFirstFunction in module &lt;strong&gt;main&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;MyFirstFunction(name)&lt;br /&gt;
 函数定义过程中 name 是形参&lt;/p&gt;
&lt;p&gt;函数参数&lt;br /&gt;
 Python 的函数具有非常灵活多样的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。从简到繁的参数形态如下：&lt;/p&gt;
&lt;p&gt;位置参数 (positional argument)&lt;br /&gt;
 默认参数 (default argument)&lt;br /&gt;
 可变参数 (variable argument)&lt;br /&gt;
 关键字参数 (keyword argument)&lt;br /&gt;
 命名关键字参数 (name keyword argument)&lt;br /&gt;
 参数组合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;位置参数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;functionname&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arg1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token string&#34;&gt;&#34;函数_文档字符串&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       function_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;expression&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;arg1 - 位置参数 ，这些参数在调用函数 (call function) 时位置要固定。&lt;br /&gt;
2. 默认参数&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;functionname&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arg1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arg2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token string&#34;&gt;&#34;函数_文档字符串&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       function_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;expression&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;arg2 = v - 默认参数 = 默认值，调用函数时，默认参数的值如果没有传入，则被认为是默认值。&lt;br /&gt;
默认参数一定要放在位置参数 后面，不然程序会报错。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def printinfo(name, age=8):&lt;br /&gt;
print(&#39;Name:{0},Age:{1}&#39;.format(name, age))&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
printinfo (&#39; 小马 &#39;)  # Name: 小马，Age:8&lt;br /&gt;
printinfo (&#39; 小马 &#39;, 10)  # Name: 小马，Age:10&lt;br /&gt;
Name: 小马，Age:8&lt;br /&gt;
Name: 小马，Age:10&lt;br /&gt;
Python 允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def printinfo(name, age):&lt;br /&gt;
print(&#39;Name:{0},Age:{1}&#39;.format(name, age))&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
printinfo (age=8, name=&#39; 小马 &#39;)  # Name: 小马，Age:8&lt;br /&gt;
Name: 小马，Age:8&lt;br /&gt;
3. 可变参数&lt;/p&gt;
&lt;p&gt;顾名思义，可变参数就是传入的参数个数是可变的，可以是 0, 1, 2 到任意个，是不定长的参数。&lt;/p&gt;
&lt;p&gt;def functionname(arg1, arg2=v, *args):&lt;br /&gt;
&amp;quot;函数_文档字符串&amp;quot;&lt;br /&gt;
function_suite&lt;br /&gt;
return [expression]&lt;/p&gt;
&lt;p&gt;&lt;em&gt;args - 可变参数，可以是从零个到任意个，自动组装成元组。&lt;br /&gt;
加了星号（&lt;/em&gt;）的变量名会存放所有未命名的变量参数。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def printinfo(arg1, *args):&lt;br /&gt;
print(arg1)&lt;br /&gt;
for var in args:&lt;br /&gt;
print(var)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
printinfo(10)  # 10&lt;br /&gt;
printinfo(70, 60, 50)&lt;/p&gt;
&lt;h1 id=&#34;70&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#70&#34;&gt;#&lt;/a&gt; 70&lt;/h1&gt;
&lt;h1 id=&#34;60&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#60&#34;&gt;#&lt;/a&gt; 60&lt;/h1&gt;
&lt;h1 id=&#34;50&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#50&#34;&gt;#&lt;/a&gt; 50&lt;/h1&gt;
&lt;p&gt;10&lt;br /&gt;
70&lt;br /&gt;
60&lt;br /&gt;
50&lt;br /&gt;
4. 关键字参数&lt;/p&gt;
&lt;p&gt;def functionname(arg1, arg2=v, args, *kw):&lt;br /&gt;
&amp;quot;函数_文档字符串&amp;quot;&lt;br /&gt;
function_suite&lt;br /&gt;
return [expression]&lt;/p&gt;
&lt;p&gt;**kw - 关键字参数，可以是从零个到任意个，自动组装成字典。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def printinfo(arg1, *args, **kwargs):&lt;br /&gt;
print(arg1)&lt;br /&gt;
print(args)&lt;br /&gt;
print(kwargs)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
printinfo(70, 60, 50)&lt;/p&gt;
&lt;h1 id=&#34;70-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#70-2&#34;&gt;#&lt;/a&gt; 70&lt;/h1&gt;
&lt;h1 id=&#34;60-50&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#60-50&#34;&gt;#&lt;/a&gt; (60, 50)&lt;/h1&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; {}&lt;/h1&gt;
&lt;p&gt;printinfo(70, 60, 50, a=1, b=2)&lt;/p&gt;
&lt;h1 id=&#34;70-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#70-3&#34;&gt;#&lt;/a&gt; 70&lt;/h1&gt;
&lt;h1 id=&#34;60-50-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#60-50-2&#34;&gt;#&lt;/a&gt; (60, 50)&lt;/h1&gt;
&lt;h1 a:=&#34;&#34; 1,=&#34;&#34; b:=&#34;&#34; 2=&#34;&#34; id=&#34;-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-2&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;70&lt;br /&gt;
(60, 50)&lt;br /&gt;
{}&lt;br /&gt;
70&lt;br /&gt;
(60, 50)&lt;br /&gt;
{&#39;a&#39;: 1, &#39;b&#39;: 2}&lt;br /&gt;
「可变参数」和「关键字参数」的同异总结如下：&lt;/p&gt;
&lt;p&gt;可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。&lt;br /&gt;
关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)。&lt;br /&gt;
5. 命名关键字参数&lt;/p&gt;
&lt;p&gt;def functionname(arg1, arg2=v, args, *, nkw, *kw):&lt;br /&gt;
&amp;quot;函数_文档字符串&amp;quot;&lt;br /&gt;
function_suite&lt;br /&gt;
return [expression]&lt;/p&gt;
&lt;p&gt;*, nkw - 命名关键字参数，用户想要输入的关键字参数，定义方式是在 nkw 前面加个分隔符 *。&lt;br /&gt;
如果要限制关键字参数的名字，就可以用「命名关键字参数」&lt;br /&gt;
使用命名关键字参数时，要特别注意不能缺少参数名。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def printinfo(arg1, *, nkw, **kwargs):&lt;br /&gt;
print(arg1)&lt;br /&gt;
print(nkw)&lt;br /&gt;
print(kwargs)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
printinfo(70, nkw=10, a=1, b=2)&lt;/p&gt;
&lt;h1 id=&#34;70-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#70-4&#34;&gt;#&lt;/a&gt; 70&lt;/h1&gt;
&lt;h1 id=&#34;10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10&#34;&gt;#&lt;/a&gt; 10&lt;/h1&gt;
&lt;h1 a:=&#34;&#34; 1,=&#34;&#34; b:=&#34;&#34; 2=&#34;&#34; id=&#34;-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-3&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
printinfo(70, 10, a=1, b=2)&lt;/p&gt;
&lt;h1 id=&#34;typeerror-printinfo-takes-1-positional-argument-but-2-were-given&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typeerror-printinfo-takes-1-positional-argument-but-2-were-given&#34;&gt;#&lt;/a&gt; TypeError: printinfo() takes 1 positional argument but 2 were given&lt;/h1&gt;
&lt;p&gt;70&lt;br /&gt;
10&lt;br /&gt;
{&#39;a&#39;: 1, &#39;b&#39;: 2}&lt;br /&gt;
 没有写参数名 nwk，因此 10 被当成「位置参数」，而原函数只有 1 个位置函数，现在调用了 2 个，因此程序会报错。&lt;br /&gt;
6. 参数组合&lt;/p&gt;
&lt;p&gt;在 Python 中定义函数，可以用位置参数、默认参数、可变参数、命名关键字参数和关键字参数，这 5 种参数中的 4 个都可以一起使用，但是注意，参数定义的顺序必须是：&lt;/p&gt;
&lt;p&gt;位置参数、默认参数、可变参数和关键字参数。&lt;br /&gt;
位置参数、默认参数、命名关键字参数和关键字参数。&lt;br /&gt;
要注意定义可变参数和关键字参数的语法：&lt;/p&gt;
&lt;p&gt;*args 是可变参数，args 接收的是一个 tuple&lt;br /&gt;
**kw 是关键字参数，kw 接收的是一个 dict&lt;br /&gt;
 命名关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。定义命名关键字参数不要忘了写分隔符 *，否则定义的是位置参数。&lt;/p&gt;
&lt;p&gt;警告：虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数很难懂。&lt;/p&gt;
&lt;p&gt;函数的返回值&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def add(a, b):&lt;br /&gt;
return a + b&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
print(add(1, 2))  # 3&lt;br /&gt;
print(add([1, 2, 3], [4, 5, 6]))  # [1, 2, 3, 4, 5, 6]&lt;br /&gt;
3&lt;br /&gt;
[1, 2, 3, 4, 5, 6]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def back():&lt;br /&gt;
return [1, &#39; 小马的程序人生 &#39;, 3.14]&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
print (back ())  # [1, &#39; 小马的程序人生 &#39;, 3.14]&lt;br /&gt;
[1, &#39; 小马的程序人生 &#39;, 3.14]&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def back():&lt;br /&gt;
return 1, &#39; 小马的程序人生 &#39;, 3.14&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
print (back ())  # (1, &#39; 小马的程序人生 &#39;, 3.14)&lt;br /&gt;
(1, &#39; 小马的程序人生 &#39;, 3.14)&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def printme(str):&lt;br /&gt;
print(str)&lt;br /&gt;
​&lt;br /&gt;
temp = printme(&#39;hello&#39;) # hello&lt;br /&gt;
print(temp) # None&lt;br /&gt;
print(type(temp))  # &amp;lt;class &#39;NoneType&#39;&amp;gt;&lt;br /&gt;
hello&lt;br /&gt;
None&lt;br /&gt;
&amp;lt;class &#39;NoneType&#39;&amp;gt;&lt;br /&gt;
 变量作用域&lt;br /&gt;
 Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。&lt;br /&gt;
定义在函数内部的变量拥有局部作用域，该变量称为局部变量。&lt;br /&gt;
定义在函数外部的变量拥有全局作用域，该变量称为全局变量。&lt;br /&gt;
局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def discounts(price, rate):&lt;br /&gt;
final_price = price * rate&lt;br /&gt;
return final_price&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
old_price = float (input (&#39; 请输入原价:&#39;))  # 98&lt;br /&gt;
rate = float (input (&#39; 请输入折扣率:&#39;))  # 0.9&lt;br /&gt;
new_price = discounts(old_price, rate)&lt;br /&gt;
 print (&#39; 打折后价格是:%.2f&#39; % new_price)  # 88.20&lt;br /&gt;
 请输入原价：98&lt;br /&gt;
 请输入折扣率：0.9&lt;br /&gt;
 打折后价格是：88.20&lt;br /&gt;
 当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;num = 1&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
def fun1():&lt;br /&gt;
global num  # 需要使用 global 关键字声明&lt;br /&gt;
 print (num)  # 1&lt;br /&gt;
num = 123&lt;br /&gt;
print(num)  # 123&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
fun1()&lt;br /&gt;
print(num)  # 123&lt;br /&gt;
1&lt;br /&gt;
123&lt;br /&gt;
123&lt;br /&gt;
 内嵌函数&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;def outer():&lt;br /&gt;
print (&#39;outer 函数在这被调用 &#39;)&lt;br /&gt;
​&lt;br /&gt;
def inner():&lt;br /&gt;
print (&#39;inner 函数在这被调用 &#39;)&lt;br /&gt;
​&lt;br /&gt;
inner ()  # 该函数只能在 outer 函数内部被调用&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
outer()&lt;/p&gt;
&lt;h1 id=&#34;outer函数在这被调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#outer函数在这被调用&#34;&gt;#&lt;/a&gt; outer 函数在这被调用&lt;/h1&gt;
&lt;h1 id=&#34;inner函数在这被调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#inner函数在这被调用&#34;&gt;#&lt;/a&gt; inner 函数在这被调用&lt;/h1&gt;
&lt;p&gt;outer 函数在这被调用&lt;br /&gt;
 inner 函数在这被调用&lt;br /&gt;
闭包&lt;/p&gt;
&lt;p&gt;是函数式编程的一个重要的语法结构，是一种特殊的内嵌函数。&lt;br /&gt;
如果在一个内部函数里对外层非全局作用域的变量进行引用，那么内部函数就被认为是闭包。&lt;br /&gt;
通过闭包可以访问外层非全局作用域的变量，这个作用域称为 闭包作用域。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def funX(x):&lt;br /&gt;
def funY(y):&lt;br /&gt;
return x * y&lt;br /&gt;
​&lt;br /&gt;
return funY&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
i = funX(8)&lt;br /&gt;
print(type(i))  # &amp;lt;class &#39;function&#39;&amp;gt;&lt;br /&gt;
print(i(5))  # 40&lt;br /&gt;
&amp;lt;class &#39;function&#39;&amp;gt;&lt;br /&gt;
40&lt;br /&gt;
【例子】闭包的返回值通常是函数。&lt;/p&gt;
&lt;p&gt;def make_counter(init):&lt;br /&gt;
counter = [init]&lt;br /&gt;
​&lt;br /&gt;
def inc(): counter[0] += 1&lt;br /&gt;
​&lt;br /&gt;
def dec(): counter[0] -= 1&lt;br /&gt;
​&lt;br /&gt;
def get(): return counter[0]&lt;br /&gt;
​&lt;br /&gt;
def reset(): counter[0] = init&lt;br /&gt;
​&lt;br /&gt;
return inc, dec, get, reset&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
inc, dec, get, reset = make_counter(0)&lt;br /&gt;
inc()&lt;br /&gt;
inc()&lt;br /&gt;
inc()&lt;br /&gt;
print(get())  # 3&lt;br /&gt;
dec()&lt;br /&gt;
print(get())  # 2&lt;br /&gt;
reset()&lt;br /&gt;
print(get())  # 0&lt;br /&gt;
3&lt;br /&gt;
2&lt;br /&gt;
0&lt;br /&gt;
【例子】 如果要修改闭包作用域中的变量则需要 nonlocal 关键字&lt;/p&gt;
&lt;p&gt;def outer():&lt;br /&gt;
num = 10&lt;br /&gt;
​&lt;br /&gt;
def inner():&lt;br /&gt;
nonlocal num  # nonlocal 关键字声明&lt;br /&gt;
 num = 100&lt;br /&gt;
print(num)&lt;br /&gt;
​&lt;br /&gt;
inner()&lt;br /&gt;
print(num)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
outer()&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;100&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#100&#34;&gt;#&lt;/a&gt; 100&lt;/h1&gt;
&lt;h1 id=&#34;100-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#100-2&#34;&gt;#&lt;/a&gt; 100&lt;/h1&gt;
&lt;p&gt;100&lt;br /&gt;
100&lt;br /&gt;
 递归&lt;/p&gt;
&lt;p&gt;如果一个函数在内部调用自身本身，这个函数就是递归函数。&lt;br /&gt;
【例子】n! = 1 x 2 x 3 x ... x n&lt;/p&gt;
&lt;h1 id=&#34;利用循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用循环&#34;&gt;#&lt;/a&gt; 利用循环&lt;/h1&gt;
&lt;p&gt;n = 5&lt;br /&gt;
for k in range(1, 5):&lt;br /&gt;
n = n * k&lt;br /&gt;
print(n)  # 120&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;利用递归&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用递归&#34;&gt;#&lt;/a&gt; 利用递归&lt;/h1&gt;
&lt;p&gt;def factorial(n):&lt;br /&gt;
if n == 1:&lt;br /&gt;
return 1&lt;br /&gt;
return n * factorial(n - 1)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
print(factorial(5)) # 120&lt;br /&gt;
120&lt;br /&gt;
120&lt;br /&gt;
【例子】斐波那契数列 f (n)=f (n-1)+f (n-2), f (0)=0 f (1)=1&lt;/p&gt;
&lt;h1 id=&#34;利用循环-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用循环-2&#34;&gt;#&lt;/a&gt; 利用循环&lt;/h1&gt;
&lt;p&gt;i = 0&lt;br /&gt;
j = 1&lt;br /&gt;
lst = list([i, j])&lt;br /&gt;
for k in range(2, 11):&lt;br /&gt;
k = i + j&lt;br /&gt;
lst.append(k)&lt;br /&gt;
i = j&lt;br /&gt;
j = k&lt;br /&gt;
print(lst)&lt;/p&gt;
&lt;h1 id=&#34;0-1-1-2-3-5-8-13-21-34-55&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-1-1-2-3-5-8-13-21-34-55&#34;&gt;#&lt;/a&gt; [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]&lt;/h1&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h1 id=&#34;利用递归-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用递归-2&#34;&gt;#&lt;/a&gt; 利用递归&lt;/h1&gt;
&lt;p&gt;def recur_fibo(n):&lt;br /&gt;
if n &amp;lt;= 1:&lt;br /&gt;
return n&lt;br /&gt;
return recur_fibo(n - 1) + recur_fibo(n - 2)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
lst = list()&lt;br /&gt;
for k in range(11):&lt;br /&gt;
lst.append(recur_fibo(k))&lt;br /&gt;
print(lst)&lt;/p&gt;
&lt;h1 id=&#34;0-1-1-2-3-5-8-13-21-34-55-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-1-1-2-3-5-8-13-21-34-55-2&#34;&gt;#&lt;/a&gt; [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]&lt;/h1&gt;
&lt;p&gt;[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]&lt;br /&gt;
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]&lt;br /&gt;
【例子】设置递归的层数，Python 默认递归层数为 100&lt;/p&gt;
&lt;p&gt;import sys&lt;br /&gt;
​&lt;br /&gt;
sys.setrecursionlimit(1000)&lt;br /&gt;
 Lambda 表达式&lt;br /&gt;
匿名函数的定义&lt;br /&gt;
在 Python 里有两类函数：&lt;/p&gt;
&lt;p&gt;第一类：用 def 关键词定义的正规函数&lt;br /&gt;
第二类：用 lambda 关键词定义的匿名函数&lt;br /&gt;
 Python 使用 lambda 关键词来创建匿名函数，而非 def 关键词，它没有函数名，其语法结构如下：&lt;/p&gt;
&lt;p&gt;lambda argument_list: expression&lt;/p&gt;
&lt;p&gt;lambda - 定义匿名函数的关键词。&lt;br /&gt;
argument_list - 函数参数，它们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样。&lt;br /&gt;
:- 冒号，在函数参数和表达式中间要加个冒号。&lt;br /&gt;
expression - 只是一个表达式，输入函数参数，输出一些值。&lt;br /&gt;
注意：&lt;/p&gt;
&lt;p&gt;expression 中没有 return 语句，因为 lambda 不需要它来返回，表达式本身结果就是返回值。&lt;br /&gt;
匿名函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def sqr(x):&lt;br /&gt;
return x ** 2&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
print(sqr)&lt;/p&gt;
&lt;h1 id=&#34;function-sqr-at-0x000000babd3a4400&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#function-sqr-at-0x000000babd3a4400&#34;&gt;#&lt;/a&gt; &amp;lt;function sqr at 0x000000BABD3A4400&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
y = [sqr(x) for x in range(10)]&lt;br /&gt;
print(y)&lt;/p&gt;
&lt;h1 id=&#34;0-1-4-9-16-25-36-49-64-81&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-1-4-9-16-25-36-49-64-81&#34;&gt;#&lt;/a&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
lbd_sqr = lambda x: x ** 2&lt;br /&gt;
print(lbd_sqr)&lt;/p&gt;
&lt;h1 id=&#34;function-lambda-at-0x000000babb6ac1e0&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#function-lambda-at-0x000000babb6ac1e0&#34;&gt;#&lt;/a&gt; &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000000BABB6AC1E0&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
y = [lbd_sqr(x) for x in range(10)]&lt;br /&gt;
print(y)&lt;/p&gt;
&lt;h1 id=&#34;0-1-4-9-16-25-36-49-64-81-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-1-4-9-16-25-36-49-64-81-2&#34;&gt;#&lt;/a&gt; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
​&lt;br /&gt;
sumary = lambda arg1, arg2: arg1 + arg2&lt;br /&gt;
print(sumary(10, 20))  # 30&lt;br /&gt;
​&lt;br /&gt;
func = lambda *args: sum(args)&lt;br /&gt;
print(func(1, 2, 3, 4, 5))  # 15&lt;br /&gt;
&amp;lt;function sqr at 0x00000220081D9E18&amp;gt;&lt;br /&gt;
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;br /&gt;
&amp;lt;function &amp;lt;lambda&amp;gt; at 0x00000220081FF400&amp;gt;&lt;br /&gt;
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;br /&gt;
30&lt;br /&gt;
15&lt;br /&gt;
 匿名函数的应用&lt;br /&gt;
函数式编程 是指代码中每一块都是不可变的，都由纯函数的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用。&lt;/p&gt;
&lt;p&gt;【例子】非函数式编程&lt;/p&gt;
&lt;p&gt;def f(x):&lt;br /&gt;
for i in range(0, len(x)):&lt;br /&gt;
x[i] += 10&lt;br /&gt;
return x&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
x = [1, 2, 3]&lt;br /&gt;
f(x)&lt;br /&gt;
print(x)&lt;/p&gt;
&lt;h1 id=&#34;11-12-13&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-12-13&#34;&gt;#&lt;/a&gt; [11, 12, 13]&lt;/h1&gt;
&lt;p&gt;[11, 12, 13]&lt;br /&gt;
【例子】函数式编程&lt;/p&gt;
&lt;p&gt;def f(x):&lt;br /&gt;
y = []&lt;br /&gt;
for item in x:&lt;br /&gt;
y.append(item + 10)&lt;br /&gt;
return y&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
x = [1, 2, 3]&lt;br /&gt;
f(x)&lt;br /&gt;
print(x)&lt;/p&gt;
&lt;h1 id=&#34;1-2-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-2-3&#34;&gt;#&lt;/a&gt; [1, 2, 3]&lt;/h1&gt;
&lt;p&gt;[1, 2, 3]&lt;br /&gt;
 匿名函数 常常应用于函数式编程的高阶函数 (high-order function) 中，主要有两种形式：&lt;/p&gt;
&lt;p&gt;参数是函数 (filter, map)&lt;br /&gt;
 返回值是函数 (closure)&lt;br /&gt;
 如，在 filter 和 map 函数中的应用：&lt;/p&gt;
&lt;p&gt;filter (function, iterable) 过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list () 来转换。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;odd = lambda x: x % 2 == 1&lt;br /&gt;
templist = filter(odd, [1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;br /&gt;
print(list(templist))  # [1, 3, 5, 7, 9]&lt;br /&gt;
[1, 3, 5, 7, 9]&lt;br /&gt;
 map (function, *iterables) 根据提供的函数对指定序列做映射。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;m1 = map(lambda x: x ** 2, [1, 2, 3, 4, 5])&lt;br /&gt;
print(list(m1))&lt;/p&gt;
&lt;h1 id=&#34;1-4-9-16-25&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-4-9-16-25&#34;&gt;#&lt;/a&gt; [1, 4, 9, 16, 25]&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
m2 = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])&lt;br /&gt;
print(list(m2))&lt;/p&gt;
&lt;h1 id=&#34;3-7-11-15-19&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-7-11-15-19&#34;&gt;#&lt;/a&gt; [3, 7, 11, 15, 19]&lt;/h1&gt;
&lt;p&gt;[1, 4, 9, 16, 25]&lt;br /&gt;
[3, 7, 11, 15, 19]&lt;br /&gt;
 除了 Python 这些内置函数，我们也可以自己定义高阶函数。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;def apply_to_list(fun, some_list):&lt;br /&gt;
return fun(some_list)&lt;br /&gt;
​&lt;br /&gt;
lst = [1, 2, 3, 4, 5]&lt;br /&gt;
print(apply_to_list(sum, lst))&lt;/p&gt;
&lt;h1 id=&#34;15&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15&#34;&gt;#&lt;/a&gt; 15&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(apply_to_list(len, lst))&lt;/p&gt;
&lt;h1 id=&#34;5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5&#34;&gt;#&lt;/a&gt; 5&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(apply_to_list(lambda x: sum(x) / len(x), lst))&lt;/p&gt;
&lt;h1 id=&#34;30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#30&#34;&gt;#&lt;/a&gt; 3.0&lt;/h1&gt;
&lt;p&gt;15&lt;br /&gt;
5&lt;br /&gt;
3.0&lt;br /&gt;
 类与对象&lt;br /&gt;
对象 = 属性 + 方法&lt;br /&gt;
对象是类的实例。换句话说，类主要定义对象的结构，然后我们以类为模板创建对象。类不但包含方法定义，而且还包含所有实例共享的数据。&lt;/p&gt;
&lt;p&gt;封装：信息隐蔽技术&lt;br /&gt;
我们可以使用关键字 class 定义 Python 类，关键字后面紧跟类的名称、分号和类的实现。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class Turtle:  # Python 中的类名约定以大写字母开头&lt;br /&gt;
 &amp;quot;&amp;quot;&amp;quot;关于类的一个简单例子&amp;quot;&amp;quot;&amp;quot;&lt;br /&gt;
# 属性&lt;br /&gt;
 color = &#39;green&#39;&lt;br /&gt;
weight = 10&lt;br /&gt;
legs = 4&lt;br /&gt;
shell = True&lt;br /&gt;
mouth = &#39; 大嘴&#39;&lt;br /&gt;
​&lt;br /&gt;
# 方法&lt;br /&gt;
 def climb (self):&lt;br /&gt;
print (&#39; 我正在很努力的向前爬...&#39;)&lt;br /&gt;
​&lt;br /&gt;
def run(self):&lt;br /&gt;
print (&#39; 我正在飞快的向前跑...&#39;)&lt;br /&gt;
​&lt;br /&gt;
def bite(self):&lt;br /&gt;
print (&#39; 咬死你咬死你！！&#39;)&lt;br /&gt;
​&lt;br /&gt;
def eat(self):&lt;br /&gt;
print (&#39; 有得吃，真满足...&#39;)&lt;br /&gt;
​&lt;br /&gt;
def sleep(self):&lt;br /&gt;
print (&#39; 困了，睡了，晚安，zzz&#39;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
tt = Turtle()&lt;br /&gt;
print(tt)&lt;/p&gt;
&lt;h1 id=&#34;mainturtle-object-at-0x0000007c32d67f98&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mainturtle-object-at-0x0000007c32d67f98&#34;&gt;#&lt;/a&gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Turtle object at 0x0000007C32D67F98&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(type(tt))&lt;/p&gt;
&lt;h1 id=&#34;class-mainturtle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class-mainturtle&#34;&gt;#&lt;/a&gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.Turtle&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(tt.&lt;strong&gt;class&lt;/strong&gt;)&lt;/p&gt;
&lt;h1 id=&#34;class-mainturtle-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class-mainturtle-2&#34;&gt;#&lt;/a&gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.Turtle&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(tt.&lt;strong&gt;class&lt;/strong&gt;.&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;h1 id=&#34;turtle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#turtle&#34;&gt;#&lt;/a&gt; Turtle&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
tt.climb()&lt;/p&gt;
&lt;h1 id=&#34;我正在很努力的向前爬&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我正在很努力的向前爬&#34;&gt;#&lt;/a&gt; 我正在很努力的向前爬...&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
tt.run()&lt;/p&gt;
&lt;h1 id=&#34;我正在飞快的向前跑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我正在飞快的向前跑&#34;&gt;#&lt;/a&gt; 我正在飞快的向前跑...&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
tt.bite()&lt;/p&gt;
&lt;h1 id=&#34;咬死你咬死你&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#咬死你咬死你&#34;&gt;#&lt;/a&gt; 咬死你咬死你！！&lt;/h1&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h1 id=&#34;python类也是对象-它们是type的实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python类也是对象-它们是type的实例&#34;&gt;#&lt;/a&gt; Python 类也是对象。它们是 type 的实例&lt;/h1&gt;
&lt;p&gt;print(type(Turtle))&lt;/p&gt;
&lt;h1 id=&#34;class-type&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class-type&#34;&gt;#&lt;/a&gt; &amp;lt;class &#39;type&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;&amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Turtle object at 0x000002200820E898&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.Turtle&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.Turtle&#39;&amp;gt;&lt;br /&gt;
Turtle&lt;br /&gt;
 我正在很努力的向前爬...&lt;br /&gt;
 我正在飞快的向前跑...&lt;br /&gt;
 咬死你咬死你！！&lt;br /&gt;
&amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
 继承：子类自动共享父类之间数据和方法的机制&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class MyList(list):&lt;br /&gt;
pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
lst = MyList([1, 5, 2, 7, 8])&lt;br /&gt;
lst.append(9)&lt;br /&gt;
lst.sort()&lt;br /&gt;
print(lst)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;1-2-5-7-8-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-2-5-7-8-9&#34;&gt;#&lt;/a&gt; [1, 2, 5, 7, 8, 9]&lt;/h1&gt;
&lt;p&gt;[1, 2, 5, 7, 8, 9]&lt;br /&gt;
 多态：不同对象对同一方法响应不同的行动&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class Animal:&lt;br /&gt;
def run(self):&lt;br /&gt;
raise AttributeError (&#39; 子类必须实现这个方法 &#39;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class People(Animal):&lt;br /&gt;
def run(self):&lt;br /&gt;
print (&#39; 人正在走 &#39;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class Pig(Animal):&lt;br /&gt;
def run(self):&lt;br /&gt;
print(&#39;pig is walking&#39;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class Dog(Animal):&lt;br /&gt;
def run(self):&lt;br /&gt;
print(&#39;dog is running&#39;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
def func(animal):&lt;br /&gt;
animal.run()&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
func(Pig())&lt;/p&gt;
&lt;h1 id=&#34;pig-is-walking&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pig-is-walking&#34;&gt;#&lt;/a&gt; pig is walking&lt;/h1&gt;
&lt;p&gt;pig is walking&lt;br /&gt;
self 是什么？&lt;br /&gt;
Python 的 self 相当于 C++ 的 this 指针。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class Test:&lt;br /&gt;
def prt(self):&lt;br /&gt;
print(self)&lt;br /&gt;
print(self.&lt;strong&gt;class&lt;/strong&gt;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
t = Test()&lt;br /&gt;
t.prt()&lt;/p&gt;
&lt;h1 id=&#34;maintest-object-at-0x000000bc5a351208&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maintest-object-at-0x000000bc5a351208&#34;&gt;#&lt;/a&gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Test object at 0x000000BC5A351208&amp;gt;&lt;/h1&gt;
&lt;h1 id=&#34;class-maintest&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class-maintest&#34;&gt;#&lt;/a&gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.Test&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;&amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Test object at 0x000002200820EA20&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.Test&#39;&amp;gt;&lt;br /&gt;
 类的方法与普通的函数只有一个特别的区别 —— 它们必须有一个额外的第一个参数名称（对应于该实例，即该对象本身），按照惯例它的名称是 self。在调用方法时，我们无需明确提供与参数 self 相对应的参数。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class Ball:&lt;br /&gt;
def setName(self, name):&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt; = name&lt;br /&gt;
​&lt;br /&gt;
def kick(self):&lt;br /&gt;
print (&amp;quot;我叫 % s, 该死的，谁踢我...&amp;quot; % &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = Ball()&lt;br /&gt;
 a.setName (&amp;quot;球 A&amp;quot;)&lt;br /&gt;
b = Ball()&lt;br /&gt;
 b.setName (&amp;quot;球 B&amp;quot;)&lt;br /&gt;
c = Ball()&lt;br /&gt;
 c.setName (&amp;quot;球 C&amp;quot;)&lt;br /&gt;
a.kick()&lt;/p&gt;
&lt;h1 id=&#34;我叫球a该死的谁踢我&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我叫球a该死的谁踢我&#34;&gt;#&lt;/a&gt; 我叫球 A, 该死的，谁踢我...&lt;/h1&gt;
&lt;p&gt;b.kick()&lt;/p&gt;
&lt;h1 id=&#34;我叫球b该死的谁踢我&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我叫球b该死的谁踢我&#34;&gt;#&lt;/a&gt; 我叫球 B, 该死的，谁踢我...&lt;/h1&gt;
&lt;p&gt;我叫球 A, 该死的，谁踢我...&lt;br /&gt;
 我叫球 B, 该死的，谁踢我...&lt;br /&gt;
Python 的魔法方法&lt;br /&gt;
据说，Python 的对象天生拥有一些神奇的方法，它们是面向对象的 Python 的一切...&lt;/p&gt;
&lt;p&gt;它们是可以给你的类增加魔力的特殊方法...&lt;/p&gt;
&lt;p&gt;如果你的对象实现了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，而这一切都是自动发生的...&lt;/p&gt;
&lt;p&gt;类有一个名为__init__(self [, param1, param2...]) 的魔法方法，该方法在类实例化时会自动调用。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;​&lt;br /&gt;
class Ball:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, name):&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt; = name&lt;br /&gt;
​&lt;br /&gt;
def kick(self):&lt;br /&gt;
print (&amp;quot;我叫 % s, 该死的，谁踢我...&amp;quot; % &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = Ball (&amp;quot;球 A&amp;quot;)&lt;br /&gt;
 b = Ball (&amp;quot;球 B&amp;quot;)&lt;br /&gt;
 c = Ball (&amp;quot;球 C&amp;quot;)&lt;br /&gt;
a.kick()&lt;/p&gt;
&lt;h1 id=&#34;我叫球a该死的谁踢我-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我叫球a该死的谁踢我-2&#34;&gt;#&lt;/a&gt; 我叫球 A, 该死的，谁踢我...&lt;/h1&gt;
&lt;p&gt;b.kick()&lt;/p&gt;
&lt;h1 id=&#34;我叫球b该死的谁踢我-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我叫球b该死的谁踢我-2&#34;&gt;#&lt;/a&gt; 我叫球 B, 该死的，谁踢我...&lt;/h1&gt;
&lt;p&gt;我叫球 A, 该死的，谁踢我...&lt;br /&gt;
 我叫球 B, 该死的，谁踢我...&lt;br /&gt;
 公有和私有&lt;br /&gt;
在 Python 中定义私有变量只需要在变量名或函数名前加上 “__” 两个下划线，那么这个函数或变量就会为私有的了。&lt;/p&gt;
&lt;p&gt;【例子】类的私有属性实例&lt;/p&gt;
&lt;p&gt;class JustCounter:&lt;br /&gt;
__secretCount = 0  # 私有变量&lt;br /&gt;
 publicCount = 0  # 公开变量&lt;br /&gt;
​&lt;br /&gt;
def count(self):&lt;br /&gt;
self.__secretCount += 1&lt;br /&gt;
self.publicCount += 1&lt;br /&gt;
print(self.__secretCount)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
counter = JustCounter()&lt;br /&gt;
counter.count()  # 1&lt;br /&gt;
counter.count()  # 2&lt;br /&gt;
print(counter.publicCount)  # 2&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;python的私有为伪私有&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python的私有为伪私有&#34;&gt;#&lt;/a&gt; Python 的私有为伪私有&lt;/h1&gt;
&lt;p&gt;print(counter._JustCounter__secretCount)  # 2&lt;br /&gt;
print(counter.__secretCount)&lt;/p&gt;
&lt;h1 id=&#34;attributeerror-justcounter-object-has-no-attribute-__secretcount&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#attributeerror-justcounter-object-has-no-attribute-__secretcount&#34;&gt;#&lt;/a&gt; AttributeError: &#39;JustCounter&#39; object has no attribute &#39;__secretCount&#39;&lt;/h1&gt;
&lt;p&gt;1&lt;br /&gt;
2&lt;br /&gt;
2&lt;br /&gt;
2&lt;br /&gt;
【例子】类的私有方法实例&lt;/p&gt;
&lt;p&gt;class Site:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, name, url):&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt; = name  # public&lt;br /&gt;
self.__url = url  # private&lt;br /&gt;
​&lt;br /&gt;
def who(self):&lt;br /&gt;
print(&#39;name  : &#39;, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;)&lt;br /&gt;
print(&#39;url : &#39;, self.__url)&lt;br /&gt;
​&lt;br /&gt;
def __foo (self):  # 私有方法&lt;br /&gt;
 print (&#39; 这是私有方法 &#39;)&lt;br /&gt;
​&lt;br /&gt;
def foo (self):  # 公共方法&lt;br /&gt;
 print (&#39; 这是公共方法 &#39;)&lt;br /&gt;
self.__foo()&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
x = Site (&#39; 老马的程序人生 &#39;, &#39;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xTR09fTVlQ&#34;&gt;https://blog.csdn.net/LSGO_MYP&lt;/span&gt;&#39;)&lt;br /&gt;
x.who()&lt;/p&gt;
&lt;h1 id=&#34;name-老马的程序人生&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#name-老马的程序人生&#34;&gt;#&lt;/a&gt; name  :  老马的程序人生&lt;/h1&gt;
&lt;h1 id=&#34;url-httpsblogcsdnnetlsgo_myp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url-httpsblogcsdnnetlsgo_myp&#34;&gt;#&lt;/a&gt; url :  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xTR09fTVlQ&#34;&gt;https://blog.csdn.net/LSGO_MYP&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
x.foo()&lt;/p&gt;
&lt;h1 id=&#34;这是公共方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这是公共方法&#34;&gt;#&lt;/a&gt; 这是公共方法&lt;/h1&gt;
&lt;h1 id=&#34;这是私有方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这是私有方法&#34;&gt;#&lt;/a&gt; 这是私有方法&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
x.__foo()&lt;/p&gt;
&lt;h1 id=&#34;attributeerror-site-object-has-no-attribute-__foo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#attributeerror-site-object-has-no-attribute-__foo&#34;&gt;#&lt;/a&gt; AttributeError: &#39;Site&#39; object has no attribute &#39;__foo&#39;&lt;/h1&gt;
&lt;p&gt;name  :  老马的程序人生&lt;br /&gt;
 url :  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xTR09fTVlQ&#34;&gt;https://blog.csdn.net/LSGO_MYP&lt;/span&gt;&lt;br /&gt;
 这是公共方法&lt;br /&gt;
这是私有方法&lt;br /&gt;
继承&lt;br /&gt;
 Python 同样支持类的继承，派生类的定义如下所示：&lt;/p&gt;
&lt;p&gt;class DerivedClassName(BaseClassName):&lt;br /&gt;
statement-1&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
statement-N&lt;/p&gt;
&lt;p&gt;BaseClassName（基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用：&lt;/p&gt;
&lt;p&gt;class DerivedClassName(modname.BaseClassName):&lt;br /&gt;
statement-1&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
statement-N&lt;/p&gt;
&lt;p&gt;【例子】如果子类中定义与父类同名的方法或属性，则会自动覆盖父类对应的方法或属性。&lt;/p&gt;
&lt;h1 id=&#34;类定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类定义&#34;&gt;#&lt;/a&gt; 类定义&lt;/h1&gt;
&lt;p&gt;class people:&lt;br /&gt;
# 定义基本属性&lt;br /&gt;
 name = &#39;&#39;&lt;br /&gt;
age = 0&lt;br /&gt;
# 定义私有属性，私有属性在类外部无法直接进行访问&lt;br /&gt;
__weight = 0&lt;br /&gt;
​&lt;br /&gt;
# 定义构造方法&lt;br /&gt;
 def &lt;strong&gt;init&lt;/strong&gt;(self, n, a, w):&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt; = n&lt;br /&gt;
self.age = a&lt;br /&gt;
self.__weight = w&lt;br /&gt;
​&lt;br /&gt;
def speak(self):&lt;br /&gt;
print (&amp;quot;% s 说：我 % d 岁。&amp;quot; % (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;, self.age))&lt;br /&gt;
​&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;单继承示例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单继承示例&#34;&gt;#&lt;/a&gt; 单继承示例&lt;/h1&gt;
&lt;p&gt;class student(people):&lt;br /&gt;
grade = &#39;&#39;&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, n, a, w, g):&lt;br /&gt;
# 调用父类的构函&lt;br /&gt;
 people.&lt;strong&gt;init&lt;/strong&gt;(self, n, a, w)&lt;br /&gt;
self.grade = g&lt;br /&gt;
​&lt;br /&gt;
# 覆写父类的方法&lt;br /&gt;
 def speak (self):&lt;br /&gt;
print (&amp;quot;% s 说：我 % d 岁了，我在读 % d 年级&amp;quot; % (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;, self.age, self.grade))&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
s = student (&#39; 小马的程序人生 &#39;, 10, 60, 3)&lt;br /&gt;
s.speak()&lt;/p&gt;
&lt;h1 id=&#34;小马的程序人生-说-我-10-岁了我在读-3-年级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小马的程序人生-说-我-10-岁了我在读-3-年级&#34;&gt;#&lt;/a&gt; 小马的程序人生 说：我 10 岁了，我在读 3 年级&lt;/h1&gt;
&lt;p&gt;小马的程序人生 说：我 10 岁了，我在读 3 年级&lt;br /&gt;
注意：如果上面的程序去掉：people.&lt;strong&gt;init&lt;/strong&gt; (self, n, a, w)，则输出：说：我 0 岁了，我在读 3 年级，因为子类的构造方法把父类的构造方法覆盖了。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;import random&lt;br /&gt;
​&lt;br /&gt;
class Fish:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;
self.x = random.randint(0, 10)&lt;br /&gt;
self.y = random.randint(0, 10)&lt;br /&gt;
​&lt;br /&gt;
def move(self):&lt;br /&gt;
self.x -= 1&lt;br /&gt;
print (&amp;quot;我的位置&amp;quot;, self.x, self.y)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class GoldFish (Fish):  # 金鱼&lt;br /&gt;
 pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class Carp (Fish):  # 鲤鱼&lt;br /&gt;
 pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class Salmon (Fish):  # 三文鱼&lt;br /&gt;
 pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class Shark (Fish):  # 鲨鱼&lt;br /&gt;
 def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;
self.hungry = True&lt;br /&gt;
​&lt;br /&gt;
def eat(self):&lt;br /&gt;
if self.hungry:&lt;br /&gt;
print (&amp;quot;吃货的梦想就是天天有得吃！&amp;quot;)&lt;br /&gt;
self.hungry = False&lt;br /&gt;
else:&lt;br /&gt;
print (&amp;quot;太撑了，吃不下了！&amp;quot;)&lt;br /&gt;
self.hungry = True&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
g = GoldFish()&lt;br /&gt;
 g.move ()  # 我的位置 9 4&lt;br /&gt;
s = Shark()&lt;br /&gt;
 s.eat () # 吃货的梦想就是天天有得吃！&lt;br /&gt;
s.move()&lt;/p&gt;
&lt;h1 id=&#34;attributeerror-shark-object-has-no-attribute-x&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#attributeerror-shark-object-has-no-attribute-x&#34;&gt;#&lt;/a&gt; AttributeError: &#39;Shark&#39; object has no attribute &#39;x&#39;&lt;/h1&gt;
&lt;p&gt;我的位置 3 8&lt;br /&gt;
 吃货的梦想就是天天有得吃！&lt;br /&gt;
解决该问题可用以下两种方式：&lt;/p&gt;
&lt;p&gt;调用未绑定的父类方法 Fish.&lt;strong&gt;init&lt;/strong&gt;(self)&lt;br /&gt;
 class Shark (Fish):  # 鲨鱼&lt;br /&gt;
 def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;
Fish.&lt;strong&gt;init&lt;/strong&gt;(self)&lt;br /&gt;
self.hungry = True&lt;br /&gt;
​&lt;br /&gt;
def eat(self):&lt;br /&gt;
if self.hungry:&lt;br /&gt;
print (&amp;quot;吃货的梦想就是天天有得吃！&amp;quot;)&lt;br /&gt;
self.hungry = False&lt;br /&gt;
else:&lt;br /&gt;
print (&amp;quot;太撑了，吃不下了！&amp;quot;)&lt;br /&gt;
self.hungry = True&lt;br /&gt;
 使用 super 函数 super ().&lt;strong&gt;init&lt;/strong&gt;()&lt;br /&gt;
 class Shark (Fish):  # 鲨鱼&lt;br /&gt;
 def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;
super().&lt;strong&gt;init&lt;/strong&gt;()&lt;br /&gt;
self.hungry = True&lt;br /&gt;
​&lt;br /&gt;
def eat(self):&lt;br /&gt;
if self.hungry:&lt;br /&gt;
print (&amp;quot;吃货的梦想就是天天有得吃！&amp;quot;)&lt;br /&gt;
self.hungry = False&lt;br /&gt;
else:&lt;br /&gt;
print (&amp;quot;太撑了，吃不下了！&amp;quot;)&lt;br /&gt;
self.hungry = True&lt;br /&gt;
Python 虽然支持多继承的形式，但我们一般不使用多继承，因为容易引起混乱。&lt;/p&gt;
&lt;p&gt;class DerivedClassName(Base1, Base2, Base3):&lt;br /&gt;
statement-1&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
statement-N&lt;/p&gt;
&lt;p&gt;需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，Python 从左至右搜索，即方法在子类中未找到时，从左到右查找父类中是否包含方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;h1 id=&#34;类定义-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类定义-2&#34;&gt;#&lt;/a&gt; 类定义&lt;/h1&gt;
&lt;p&gt;class People:&lt;br /&gt;
# 定义基本属性&lt;br /&gt;
 name = &#39;&#39;&lt;br /&gt;
age = 0&lt;br /&gt;
# 定义私有属性，私有属性在类外部无法直接进行访问&lt;br /&gt;
__weight = 0&lt;br /&gt;
​&lt;br /&gt;
# 定义构造方法&lt;br /&gt;
 def &lt;strong&gt;init&lt;/strong&gt;(self, n, a, w):&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt; = n&lt;br /&gt;
self.age = a&lt;br /&gt;
self.__weight = w&lt;br /&gt;
​&lt;br /&gt;
def speak(self):&lt;br /&gt;
print (&amp;quot;% s 说：我 % d 岁。&amp;quot; % (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;, self.age))&lt;br /&gt;
​&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;单继承示例-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单继承示例-2&#34;&gt;#&lt;/a&gt; 单继承示例&lt;/h1&gt;
&lt;p&gt;class Student(People):&lt;br /&gt;
grade = &#39;&#39;&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, n, a, w, g):&lt;br /&gt;
# 调用父类的构函&lt;br /&gt;
 People.&lt;strong&gt;init&lt;/strong&gt;(self, n, a, w)&lt;br /&gt;
self.grade = g&lt;br /&gt;
​&lt;br /&gt;
# 覆写父类的方法&lt;br /&gt;
 def speak (self):&lt;br /&gt;
print (&amp;quot;% s 说：我 % d 岁了，我在读 % d 年级&amp;quot; % (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;, self.age, self.grade))&lt;br /&gt;
​&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;另一个类多重继承之前的准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#另一个类多重继承之前的准备&#34;&gt;#&lt;/a&gt; 另一个类，多重继承之前的准备&lt;/h1&gt;
&lt;p&gt;class Speaker:&lt;br /&gt;
topic = &#39;&#39;&lt;br /&gt;
name = &#39;&#39;&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, n, t):&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt; = n&lt;br /&gt;
self.topic = t&lt;br /&gt;
​&lt;br /&gt;
def speak(self):&lt;br /&gt;
print (&amp;quot;我叫 % s，我是一个演说家，我演讲的主题是 % s&amp;quot; % (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;, self.topic))&lt;br /&gt;
​&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;多重继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多重继承&#34;&gt;#&lt;/a&gt; 多重继承&lt;/h1&gt;
&lt;p&gt;class Sample01(Speaker, Student):&lt;br /&gt;
a = &#39;&#39;&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, n, a, w, g, t):&lt;br /&gt;
Student.&lt;strong&gt;init&lt;/strong&gt;(self, n, a, w, g)&lt;br /&gt;
Speaker.&lt;strong&gt;init&lt;/strong&gt;(self, n, t)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;方法名同默认调用的是在括号中排前地父类的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法名同默认调用的是在括号中排前地父类的方法&#34;&gt;#&lt;/a&gt; 方法名同，默认调用的是在括号中排前地父类的方法&lt;/h1&gt;
&lt;p&gt;test = Sample01(&amp;quot;Tim&amp;quot;, 25, 80, 4, &amp;quot;Python&amp;quot;)&lt;br /&gt;
test.speak()&lt;/p&gt;
&lt;h1 id=&#34;我叫-tim我是一个演说家我演讲的主题是-python&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我叫-tim我是一个演说家我演讲的主题是-python&#34;&gt;#&lt;/a&gt; 我叫 Tim，我是一个演说家，我演讲的主题是 Python&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
class Sample02(Student, Speaker):&lt;br /&gt;
a = &#39;&#39;&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, n, a, w, g, t):&lt;br /&gt;
Student.&lt;strong&gt;init&lt;/strong&gt;(self, n, a, w, g)&lt;br /&gt;
Speaker.&lt;strong&gt;init&lt;/strong&gt;(self, n, t)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;方法名同默认调用的是在括号中排前地父类的方法-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法名同默认调用的是在括号中排前地父类的方法-2&#34;&gt;#&lt;/a&gt; 方法名同，默认调用的是在括号中排前地父类的方法&lt;/h1&gt;
&lt;p&gt;test = Sample02(&amp;quot;Tim&amp;quot;, 25, 80, 4, &amp;quot;Python&amp;quot;)&lt;br /&gt;
test.speak()&lt;/p&gt;
&lt;h1 id=&#34;tim-说-我-25-岁了我在读-4-年级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tim-说-我-25-岁了我在读-4-年级&#34;&gt;#&lt;/a&gt; Tim 说：我 25 岁了，我在读 4 年级&lt;/h1&gt;
&lt;p&gt;我叫 Tim，我是一个演说家，我演讲的主题是 Python&lt;br /&gt;
Tim 说：我 25 岁了，我在读 4 年级&lt;br /&gt;
组合&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class Turtle:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, x):&lt;br /&gt;
self.num = x&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class Fish:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, x):&lt;br /&gt;
self.num = x&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class Pool:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, x, y):&lt;br /&gt;
self.turtle = Turtle(x)&lt;br /&gt;
self.fish = Fish(y)&lt;br /&gt;
​&lt;br /&gt;
def print_num(self):&lt;br /&gt;
print (&amp;quot;水池里面有乌龟 % s 只，小鱼 % s 条&amp;quot; % (self.turtle.num, self.fish.num))&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
p = Pool(2, 3)&lt;br /&gt;
p.print_num()&lt;/p&gt;
&lt;h1 id=&#34;水池里面有乌龟2只小鱼3条&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#水池里面有乌龟2只小鱼3条&#34;&gt;#&lt;/a&gt; 水池里面有乌龟 2 只，小鱼 3 条&lt;/h1&gt;
&lt;p&gt;水池里面有乌龟 2 只，小鱼 3 条&lt;br /&gt;
类、类对象和实例对象&lt;br /&gt;
类对象和实例对象&lt;/p&gt;
&lt;p&gt;类对象：创建一个类，其实也是一个对象也在内存开辟了一块空间，称为类对象，类对象只有一个。&lt;/p&gt;
&lt;p&gt;class A(object):&lt;br /&gt;
pass&lt;/p&gt;
&lt;p&gt;实例对象：就是通过实例化类创建的对象，称为实例对象，实例对象可以有多个。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class A(object):&lt;br /&gt;
pass&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;实例化对象-a-b-c都属于实例对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例化对象-a-b-c都属于实例对象&#34;&gt;#&lt;/a&gt; 实例化对象 a、b、c 都属于实例对象。&lt;/h1&gt;
&lt;p&gt;a = A()&lt;br /&gt;
b = A()&lt;br /&gt;
c = A()&lt;br /&gt;
 类属性：类里面方法外面定义的变量称为类属性。类属性所属于类对象并且多个实例对象之间共享同一个类属性，说白了就是类属性所有的通过该类实例化的对象都能共享。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class A():&lt;br /&gt;
a = 0  #类属性&lt;br /&gt;
 def &lt;strong&gt;init&lt;/strong&gt;(self, xx):&lt;br /&gt;
A.a = xx  #使用类属性可以通过 （类名。类属性）调用。&lt;br /&gt;
实例属性：实例属性和具体的某个实例对象有关系，并且一个实例对象和另外一个实例对象是不共享属性的，说白了实例属性只能在自己的对象里面使用，其他的对象不能直接使用，因为 self 是谁调用，它的值就属于该对象。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;h1 id=&#34;创建类对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建类对象&#34;&gt;#&lt;/a&gt; 创建类对象&lt;/h1&gt;
&lt;p&gt;class Test(object):&lt;br /&gt;
class_attr = 100  # 类属性&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;
self.sl_attr = 100  # 实例属性&lt;br /&gt;
​&lt;br /&gt;
def func(self):&lt;br /&gt;
print (&#39; 类对象。类属性的值:&#39;, Test.class_attr)  # 调用类属性&lt;br /&gt;
 print (&#39;self. 类属性的值 &#39;, self.class_attr)  # 相当于把类属性 变成实例属性&lt;br /&gt;
 print (&#39;self. 实例属性的值 &#39;, self.sl_attr)  # 调用实例属性&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = Test()&lt;br /&gt;
a.func()&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;类对象类属性的值-100&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类对象类属性的值-100&#34;&gt;#&lt;/a&gt; 类对象。类属性的值: 100&lt;/h1&gt;
&lt;h1 id=&#34;self类属性的值-100&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self类属性的值-100&#34;&gt;#&lt;/a&gt; self. 类属性的值 100&lt;/h1&gt;
&lt;h1 id=&#34;self实例属性的值-100&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self实例属性的值-100&#34;&gt;#&lt;/a&gt; self. 实例属性的值 100&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
b = Test()&lt;br /&gt;
b.func()&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;类对象类属性的值-100-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类对象类属性的值-100-2&#34;&gt;#&lt;/a&gt; 类对象。类属性的值: 100&lt;/h1&gt;
&lt;h1 id=&#34;self类属性的值-100-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self类属性的值-100-2&#34;&gt;#&lt;/a&gt; self. 类属性的值 100&lt;/h1&gt;
&lt;h1 id=&#34;self实例属性的值-100-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self实例属性的值-100-2&#34;&gt;#&lt;/a&gt; self. 实例属性的值 100&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
a.class_attr = 200&lt;br /&gt;
a.sl_attr = 200&lt;br /&gt;
a.func()&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;类对象类属性的值-100-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类对象类属性的值-100-3&#34;&gt;#&lt;/a&gt; 类对象。类属性的值: 100&lt;/h1&gt;
&lt;h1 id=&#34;self类属性的值-200&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self类属性的值-200&#34;&gt;#&lt;/a&gt; self. 类属性的值 200&lt;/h1&gt;
&lt;h1 id=&#34;self实例属性的值-200&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self实例属性的值-200&#34;&gt;#&lt;/a&gt; self. 实例属性的值 200&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
b.func()&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;类对象类属性的值-100-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类对象类属性的值-100-4&#34;&gt;#&lt;/a&gt; 类对象。类属性的值: 100&lt;/h1&gt;
&lt;h1 id=&#34;self类属性的值-100-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self类属性的值-100-3&#34;&gt;#&lt;/a&gt; self. 类属性的值 100&lt;/h1&gt;
&lt;h1 id=&#34;self实例属性的值-100-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self实例属性的值-100-3&#34;&gt;#&lt;/a&gt; self. 实例属性的值 100&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
Test.class_attr = 300&lt;br /&gt;
a.func()&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;类对象类属性的值-300&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类对象类属性的值-300&#34;&gt;#&lt;/a&gt; 类对象。类属性的值: 300&lt;/h1&gt;
&lt;h1 id=&#34;self类属性的值-200-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self类属性的值-200-2&#34;&gt;#&lt;/a&gt; self. 类属性的值 200&lt;/h1&gt;
&lt;h1 id=&#34;self实例属性的值-200-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self实例属性的值-200-2&#34;&gt;#&lt;/a&gt; self. 实例属性的值 200&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
b.func()&lt;/p&gt;
&lt;h1 id=&#34;类对象类属性的值-300-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类对象类属性的值-300-2&#34;&gt;#&lt;/a&gt; 类对象。类属性的值: 300&lt;/h1&gt;
&lt;h1 id=&#34;self类属性的值-300&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self类属性的值-300&#34;&gt;#&lt;/a&gt; self. 类属性的值 300&lt;/h1&gt;
&lt;h1 id=&#34;self实例属性的值-100-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#self实例属性的值-100-4&#34;&gt;#&lt;/a&gt; self. 实例属性的值 100&lt;/h1&gt;
&lt;p&gt;类对象。类属性的值: 100&lt;br /&gt;
self. 类属性的值 100&lt;br /&gt;
self. 实例属性的值 100&lt;br /&gt;
 类对象。类属性的值: 100&lt;br /&gt;
self. 类属性的值 100&lt;br /&gt;
self. 实例属性的值 100&lt;br /&gt;
 类对象。类属性的值: 100&lt;br /&gt;
self. 类属性的值 200&lt;br /&gt;
self. 实例属性的值 200&lt;br /&gt;
 类对象。类属性的值: 100&lt;br /&gt;
self. 类属性的值 100&lt;br /&gt;
self. 实例属性的值 100&lt;br /&gt;
 类对象。类属性的值: 300&lt;br /&gt;
self. 类属性的值 200&lt;br /&gt;
self. 实例属性的值 200&lt;br /&gt;
 类对象。类属性的值: 300&lt;br /&gt;
self. 类属性的值 300&lt;br /&gt;
self. 实例属性的值 100&lt;br /&gt;
 注意：属性与方法名相同，属性会覆盖方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class A:&lt;br /&gt;
def x(self):&lt;br /&gt;
print(&#39;x_man&#39;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
aa = A()&lt;br /&gt;
aa.x()  # x_man&lt;br /&gt;
aa.x = 1&lt;br /&gt;
print(aa.x)  # 1&lt;br /&gt;
aa.x()&lt;/p&gt;
&lt;h1 id=&#34;typeerror-int-object-is-not-callable&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typeerror-int-object-is-not-callable&#34;&gt;#&lt;/a&gt; TypeError: &#39;int&#39; object is not callable&lt;/h1&gt;
&lt;p&gt;x_man&lt;br /&gt;
1&lt;br /&gt;
 什么是绑定？&lt;br /&gt;
Python 严格要求方法需要有实例才能被调用，这种限制其实就是 Python 所谓的绑定概念。&lt;/p&gt;
&lt;p&gt;Python 对象的数据属性通常存储在名为.__ dict__的字典中，我们可以直接访问__dict__，或利用 Python 的内置函数 vars () 获取.__ dict__。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class CC:&lt;br /&gt;
def setXY(self, x, y):&lt;br /&gt;
self.x = x&lt;br /&gt;
self.y = y&lt;br /&gt;
​&lt;br /&gt;
def printXY(self):&lt;br /&gt;
print(self.x, self.y)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
dd = CC()&lt;br /&gt;
print(dd.&lt;strong&gt;dict&lt;/strong&gt;)&lt;/p&gt;
&lt;h1 id=&#34;-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-4&#34;&gt;#&lt;/a&gt; {}&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(vars(dd))&lt;/p&gt;
&lt;h1 id=&#34;-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-5&#34;&gt;#&lt;/a&gt; {}&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(CC.&lt;strong&gt;dict&lt;/strong&gt;)&lt;/p&gt;
&lt;h1 id=&#34;module-main-setxy-function-ccsetxy-at-0x000000c3473da048-printxy-function-ccprintxy-at-0x000000c3473c4f28-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#module-main-setxy-function-ccsetxy-at-0x000000c3473da048-printxy-function-ccprintxy-at-0x000000c3473c4f28-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none&#34;&gt;#&lt;/a&gt; {&#39;&lt;strong&gt;module&lt;/strong&gt;&#39;: &#39;&lt;strong&gt;main&lt;/strong&gt;&#39;, &#39;setXY&#39;: &amp;lt;function CC.setXY at 0x000000C3473DA048&amp;gt;, &#39;printXY&#39;: &amp;lt;function CC.printXY at 0x000000C3473C4F28&amp;gt;, &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;doc&lt;/strong&gt;&#39;: None}&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
dd.setXY(4, 5)&lt;br /&gt;
print(dd.&lt;strong&gt;dict&lt;/strong&gt;)&lt;/p&gt;
&lt;h1 x:=&#34;&#34; 4,=&#34;&#34; y:=&#34;&#34; 5=&#34;&#34; id=&#34;-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-6&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(vars(CC))&lt;/p&gt;
&lt;h1 id=&#34;module-main-setxy-function-ccsetxy-at-0x000000632ca9b048-printxy-function-ccprintxy-at-0x000000632ca83048-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#module-main-setxy-function-ccsetxy-at-0x000000632ca9b048-printxy-function-ccprintxy-at-0x000000632ca83048-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none&#34;&gt;#&lt;/a&gt; {&#39;&lt;strong&gt;module&lt;/strong&gt;&#39;: &#39;&lt;strong&gt;main&lt;/strong&gt;&#39;, &#39;setXY&#39;: &amp;lt;function CC.setXY at 0x000000632CA9B048&amp;gt;, &#39;printXY&#39;: &amp;lt;function CC.printXY at 0x000000632CA83048&amp;gt;, &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;doc&lt;/strong&gt;&#39;: None}&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(CC.&lt;strong&gt;dict&lt;/strong&gt;)&lt;/p&gt;
&lt;h1 id=&#34;module-main-setxy-function-ccsetxy-at-0x000000632ca9b048-printxy-function-ccprintxy-at-0x000000632ca83048-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#module-main-setxy-function-ccsetxy-at-0x000000632ca9b048-printxy-function-ccprintxy-at-0x000000632ca83048-dict-attribute-dict-of-cc-objects-weakref-attribute-weakref-of-cc-objects-doc-none-2&#34;&gt;#&lt;/a&gt; {&#39;&lt;strong&gt;module&lt;/strong&gt;&#39;: &#39;&lt;strong&gt;main&lt;/strong&gt;&#39;, &#39;setXY&#39;: &amp;lt;function CC.setXY at 0x000000632CA9B048&amp;gt;, &#39;printXY&#39;: &amp;lt;function CC.printXY at 0x000000632CA83048&amp;gt;, &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;doc&lt;/strong&gt;&#39;: None}&lt;/h1&gt;
&lt;p&gt;{}&lt;br /&gt;
{}&lt;br /&gt;
{&#39;&lt;strong&gt;module&lt;/strong&gt;&#39;: &#39;&lt;strong&gt;main&lt;/strong&gt;&#39;, &#39;setXY&#39;: &amp;lt;function CC.setXY at 0x000002200822BD08&amp;gt;, &#39;printXY&#39;: &amp;lt;function CC.printXY at 0x000002200822BF28&amp;gt;, &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;doc&lt;/strong&gt;&#39;: None}&lt;br /&gt;
{&#39;x&#39;: 4, &#39;y&#39;: 5}&lt;br /&gt;
{&#39;&lt;strong&gt;module&lt;/strong&gt;&#39;: &#39;&lt;strong&gt;main&lt;/strong&gt;&#39;, &#39;setXY&#39;: &amp;lt;function CC.setXY at 0x000002200822BD08&amp;gt;, &#39;printXY&#39;: &amp;lt;function CC.printXY at 0x000002200822BF28&amp;gt;, &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;doc&lt;/strong&gt;&#39;: None}&lt;br /&gt;
{&#39;&lt;strong&gt;module&lt;/strong&gt;&#39;: &#39;&lt;strong&gt;main&lt;/strong&gt;&#39;, &#39;setXY&#39;: &amp;lt;function CC.setXY at 0x000002200822BD08&amp;gt;, &#39;printXY&#39;: &amp;lt;function CC.printXY at 0x000002200822BF28&amp;gt;, &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;dict&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39;: &amp;lt;attribute &#39;&lt;strong&gt;weakref&lt;/strong&gt;&#39; of &#39;CC&#39; objects&amp;gt;, &#39;&lt;strong&gt;doc&lt;/strong&gt;&#39;: None}&lt;br /&gt;
 一些相关的内置函数（BIF）&lt;br /&gt;
issubclass (class, classinfo) 方法用于判断参数 class 是否是类型参数 classinfo 的子类。&lt;br /&gt;
一个类被认为是其自身的子类。&lt;br /&gt;
classinfo 可以是类对象的元组，只要 class 是其中任何一个候选类的子类，则返回 True。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class A:&lt;br /&gt;
pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class B(A):&lt;br /&gt;
pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
print(issubclass(B, A))  # True&lt;br /&gt;
print(issubclass(B, B))  # True&lt;br /&gt;
print(issubclass(A, B))  # False&lt;br /&gt;
print(issubclass(B, object))  # True&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
True&lt;br /&gt;
isinstance (object, classinfo) 方法用于判断一个对象是否是一个已知的类型，类似 type ()。&lt;br /&gt;
type () 不会认为子类是一种父类类型，不考虑继承关系。&lt;br /&gt;
isinstance () 会认为子类是一种父类类型，考虑继承关系。&lt;br /&gt;
如果第一个参数不是对象，则永远返回 False。&lt;br /&gt;
如果第二个参数不是类或者由类对象组成的元组，会抛出一个 TypeError 异常。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;a = 2&lt;br /&gt;
print(isinstance(a, int))  # True&lt;br /&gt;
print(isinstance(a, str))  # False&lt;br /&gt;
print(isinstance(a, (str, int, list)))  # True&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class A:&lt;br /&gt;
pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class B(A):&lt;br /&gt;
pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
print(isinstance(A(), A))  # True&lt;br /&gt;
print(type(A()) == A)  # True&lt;br /&gt;
print(isinstance(B(), A))  # True&lt;br /&gt;
print(type(B()) == A)  # False&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
hasattr (object, name) 用于判断对象是否包含对应的属性。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class Coordinate:&lt;br /&gt;
x = 10&lt;br /&gt;
y = -5&lt;br /&gt;
z = 0&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
point1 = Coordinate()&lt;br /&gt;
print(hasattr(point1, &#39;x&#39;))  # True&lt;br /&gt;
print(hasattr(point1, &#39;y&#39;))  # True&lt;br /&gt;
print(hasattr(point1, &#39;z&#39;))  # True&lt;br /&gt;
print(hasattr(point1, &#39;no&#39;))  # False&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
True&lt;br /&gt;
False&lt;br /&gt;
getattr (object, name [, default]) 用于返回一个对象属性值。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class A(object):&lt;br /&gt;
bar = 1&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = A()&lt;br /&gt;
print(getattr(a, &#39;bar&#39;))  # 1&lt;br /&gt;
print(getattr(a, &#39;bar2&#39;, 3))  # 3&lt;br /&gt;
print(getattr(a, &#39;bar2&#39;))&lt;/p&gt;
&lt;h1 id=&#34;attributeerror-a-object-has-no-attribute-bar2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#attributeerror-a-object-has-no-attribute-bar2&#34;&gt;#&lt;/a&gt; AttributeError: &#39;A&#39; object has no attribute &#39;bar2&#39;&lt;/h1&gt;
&lt;p&gt;1&lt;br /&gt;
3&lt;br /&gt;
【例子】这个例子很酷！&lt;/p&gt;
&lt;p&gt;class A(object):&lt;br /&gt;
def set(self, a, b):&lt;br /&gt;
x = a&lt;br /&gt;
a = b&lt;br /&gt;
b = x&lt;br /&gt;
print(a, b)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = A()&lt;br /&gt;
c = getattr(a, &#39;set&#39;)&lt;br /&gt;
c(a=&#39;1&#39;, b=&#39;2&#39;)  # 2 1&lt;br /&gt;
​&lt;br /&gt;
2 1&lt;br /&gt;
setattr (object, name, value) 对应函数 getattr ()，用于设置属性值，该属性不一定是存在的。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class A(object):&lt;br /&gt;
bar = 1&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = A()&lt;br /&gt;
print(getattr(a, &#39;bar&#39;))  # 1&lt;br /&gt;
setattr(a, &#39;bar&#39;, 5)&lt;br /&gt;
print(a.bar)  # 5&lt;br /&gt;
setattr(a, &amp;quot;age&amp;quot;, 28)&lt;br /&gt;
print(a.age)  # 28&lt;br /&gt;
1&lt;br /&gt;
5&lt;br /&gt;
28&lt;br /&gt;
delattr (object, name) 用于删除属性。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class Coordinate:&lt;br /&gt;
x = 10&lt;br /&gt;
y = -5&lt;br /&gt;
z = 0&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
point1 = Coordinate()&lt;br /&gt;
​&lt;br /&gt;
print(&#39;x = &#39;, point1.x)  # x =  10&lt;br /&gt;
print(&#39;y = &#39;, point1.y)  # y =  -5&lt;br /&gt;
print(&#39;z = &#39;, point1.z)  # z =  0&lt;br /&gt;
​&lt;br /&gt;
delattr(Coordinate, &#39;z&#39;)&lt;br /&gt;
​&lt;br /&gt;
print (&#39;-- 删除 z 属性后 --&#39;)  # -- 删除 z 属性后 --&lt;br /&gt;
print(&#39;x = &#39;, point1.x)  # x =  10&lt;br /&gt;
print(&#39;y = &#39;, point1.y)  # y =  -5&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;触发错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#触发错误&#34;&gt;#&lt;/a&gt; 触发错误&lt;/h1&gt;
&lt;p&gt;print(&#39;z = &#39;, point1.z)&lt;/p&gt;
&lt;h1 id=&#34;attributeerror-coordinate-object-has-no-attribute-z&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#attributeerror-coordinate-object-has-no-attribute-z&#34;&gt;#&lt;/a&gt; AttributeError: &#39;Coordinate&#39; object has no attribute &#39;z&#39;&lt;/h1&gt;
&lt;p&gt;x =  10&lt;br /&gt;
y =  -5&lt;br /&gt;
z =  0&lt;br /&gt;
-- 删除 z 属性后 --&lt;br /&gt;
x =  10&lt;br /&gt;
y =  -5&lt;br /&gt;
class property ([fget [, fset [, fdel [, doc]]]]) 用于在新式类中返回属性值。&lt;br /&gt;
fget -- 获取属性值的函数&lt;br /&gt;
 fset -- 设置属性值的函数&lt;br /&gt;
 fdel -- 删除属性值函数&lt;br /&gt;
 doc -- 属性描述信息&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class C(object):&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;
self.__x = None&lt;br /&gt;
​&lt;br /&gt;
def getx(self):&lt;br /&gt;
return self.__x&lt;br /&gt;
​&lt;br /&gt;
def setx(self, value):&lt;br /&gt;
self.__x = value&lt;br /&gt;
​&lt;br /&gt;
def delx(self):&lt;br /&gt;
del self.__x&lt;br /&gt;
​&lt;br /&gt;
x = property(getx, setx, delx, &amp;quot;I&#39;m the &#39;x&#39; property.&amp;quot;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
cc = C()&lt;br /&gt;
cc.x = 2&lt;br /&gt;
print(cc.x)  # 2&lt;br /&gt;
​&lt;br /&gt;
del cc.x&lt;br /&gt;
print(cc.x)&lt;/p&gt;
&lt;h1 id=&#34;attributeerror-c-object-has-no-attribute-_c__x&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#attributeerror-c-object-has-no-attribute-_c__x&#34;&gt;#&lt;/a&gt; AttributeError: &#39;C&#39; object has no attribute &#39;_C__x&#39;&lt;/h1&gt;
&lt;p&gt;2&lt;br /&gt;
 魔法方法&lt;br /&gt;
魔法方法总是被双下划线包围，例如__init__。&lt;/p&gt;
&lt;p&gt;魔法方法是面向对象的 Python 的一切，如果你不知道魔法方法，说明你还没能意识到面向对象的 Python 的强大。&lt;/p&gt;
&lt;p&gt;魔法方法的 “魔力” 体现在它们总能够在适当的时候被自动调用。&lt;/p&gt;
&lt;p&gt;魔法方法的第一个参数应为 cls（类方法） 或者 self（实例方法）。&lt;/p&gt;
&lt;p&gt;cls：代表一个类的名称&lt;br /&gt;
 self：代表一个实例对象的名称&lt;br /&gt;
基本的魔法方法&lt;br /&gt;
&lt;strong&gt; init&lt;/strong&gt; (self [, ...]) 构造器，当一个实例被创建的时候调用的初始化方法&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class Rectangle:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, x, y):&lt;br /&gt;
self.x = x&lt;br /&gt;
self.y = y&lt;br /&gt;
​&lt;br /&gt;
def getPeri(self):&lt;br /&gt;
return (self.x + self.y) * 2&lt;br /&gt;
​&lt;br /&gt;
def getArea(self):&lt;br /&gt;
return self.x * self.y&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
rect = Rectangle(4, 5)&lt;br /&gt;
print(rect.getPeri())  # 18&lt;br /&gt;
print(rect.getArea())  # 20&lt;br /&gt;
18&lt;br /&gt;
20&lt;br /&gt;
&lt;strong&gt;new&lt;/strong&gt; (cls [, ...]) 在一个对象实例化的时候所调用的第一个方法，在调用__init__初始化前，先调用__new__。&lt;br /&gt;
&lt;strong&gt;new__至少要有一个参数 cls，代表要实例化的类，此参数在实例化时由 Python 解释器自动提供，后面的参数直接传递给__init&lt;/strong&gt;。&lt;br /&gt;
&lt;strong&gt;new__对当前类进行了实例化，并将实例返回，传给__init__的 self。但是，执行了__new&lt;/strong&gt;，并不一定会进入__init__，只有__new__返回了，当前类 cls 的实例，当前类的__init__才会进入。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class A(object):&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, value):&lt;br /&gt;
print(&amp;quot;into A &lt;strong&gt;init&lt;/strong&gt;&amp;quot;)&lt;br /&gt;
self.value = value&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;new&lt;/strong&gt;(cls, *args, **kwargs):&lt;br /&gt;
print(&amp;quot;into A &lt;strong&gt;new&lt;/strong&gt;&amp;quot;)&lt;br /&gt;
print(cls)&lt;br /&gt;
return object.&lt;strong&gt;new&lt;/strong&gt;(cls)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class B(A):&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, value):&lt;br /&gt;
print(&amp;quot;into B &lt;strong&gt;init&lt;/strong&gt;&amp;quot;)&lt;br /&gt;
self.value = value&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;new&lt;/strong&gt;(cls, *args, **kwargs):&lt;br /&gt;
print(&amp;quot;into B &lt;strong&gt;new&lt;/strong&gt;&amp;quot;)&lt;br /&gt;
print(cls)&lt;br /&gt;
return super().&lt;strong&gt;new&lt;/strong&gt;(cls, *args, **kwargs)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
b = B(10)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结果&#34;&gt;#&lt;/a&gt; 结果：&lt;/h1&gt;
&lt;h1 id=&#34;into-b-new&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#into-b-new&#34;&gt;#&lt;/a&gt; into B &lt;strong&gt;new&lt;/strong&gt;&lt;/h1&gt;
&lt;h1 id=&#34;class-mainb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class-mainb&#34;&gt;#&lt;/a&gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.B&#39;&amp;gt;&lt;/h1&gt;
&lt;h1 id=&#34;into-a-new&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#into-a-new&#34;&gt;#&lt;/a&gt; into A &lt;strong&gt;new&lt;/strong&gt;&lt;/h1&gt;
&lt;h1 id=&#34;class-mainb-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class-mainb-2&#34;&gt;#&lt;/a&gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.B&#39;&amp;gt;&lt;/h1&gt;
&lt;h1 id=&#34;into-b-init&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#into-b-init&#34;&gt;#&lt;/a&gt; into B &lt;strong&gt;init&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
class A(object):&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, value):&lt;br /&gt;
print(&amp;quot;into A &lt;strong&gt;init&lt;/strong&gt;&amp;quot;)&lt;br /&gt;
self.value = value&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;new&lt;/strong&gt;(cls, *args, **kwargs):&lt;br /&gt;
print(&amp;quot;into A &lt;strong&gt;new&lt;/strong&gt;&amp;quot;)&lt;br /&gt;
print(cls)&lt;br /&gt;
return object.&lt;strong&gt;new&lt;/strong&gt;(cls)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class B(A):&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, value):&lt;br /&gt;
print(&amp;quot;into B &lt;strong&gt;init&lt;/strong&gt;&amp;quot;)&lt;br /&gt;
self.value = value&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;new&lt;/strong&gt;(cls, *args, **kwargs):&lt;br /&gt;
print(&amp;quot;into B &lt;strong&gt;new&lt;/strong&gt;&amp;quot;)&lt;br /&gt;
print(cls)&lt;br /&gt;
return super().&lt;strong&gt;new&lt;/strong&gt; (A, *args, **kwargs)  # 改动了 cls 变为 A&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
b = B(10)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;结果-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结果-2&#34;&gt;#&lt;/a&gt; 结果：&lt;/h1&gt;
&lt;h1 id=&#34;into-b-new-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#into-b-new-2&#34;&gt;#&lt;/a&gt; into B &lt;strong&gt;new&lt;/strong&gt;&lt;/h1&gt;
&lt;h1 id=&#34;class-mainb-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class-mainb-3&#34;&gt;#&lt;/a&gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.B&#39;&amp;gt;&lt;/h1&gt;
&lt;h1 id=&#34;into-a-new-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#into-a-new-2&#34;&gt;#&lt;/a&gt; into A &lt;strong&gt;new&lt;/strong&gt;&lt;/h1&gt;
&lt;h1 id=&#34;class-maina&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class-maina&#34;&gt;#&lt;/a&gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.A&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;into B &lt;strong&gt;new&lt;/strong&gt;&lt;br /&gt;
&amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.B&#39;&amp;gt;&lt;br /&gt;
into A &lt;strong&gt;new&lt;/strong&gt;&lt;br /&gt;
&amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.B&#39;&amp;gt;&lt;br /&gt;
into B &lt;strong&gt;init&lt;/strong&gt;&lt;br /&gt;
into B &lt;strong&gt;new&lt;/strong&gt;&lt;br /&gt;
&amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.B&#39;&amp;gt;&lt;br /&gt;
into A &lt;strong&gt;new&lt;/strong&gt;&lt;br /&gt;
&amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.A&#39;&amp;gt;&lt;br /&gt;
 若__new__没有正确返回当前类 cls 的实例，那__init__是不会被调用的，即使是父类的实例也不行，将没有__init__被调用。&lt;br /&gt;
【例子】利用__new__实现单例模式。&lt;/p&gt;
&lt;p&gt;class Earth:&lt;br /&gt;
pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = Earth()&lt;br /&gt;
print(id(a))  # 260728291456&lt;br /&gt;
b = Earth()&lt;br /&gt;
print(id(b))  # 260728291624&lt;br /&gt;
​&lt;br /&gt;
class Earth:&lt;br /&gt;
__instance = None  # 定义一个类属性做判断&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;new&lt;/strong&gt;(cls):&lt;br /&gt;
if cls.__instance is None:&lt;br /&gt;
cls.__instance = object.&lt;strong&gt;new&lt;/strong&gt;(cls)&lt;br /&gt;
return cls.__instance&lt;br /&gt;
else:&lt;br /&gt;
return cls.__instance&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = Earth()&lt;br /&gt;
print(id(a))  # 512320401648&lt;br /&gt;
b = Earth()&lt;br /&gt;
print(id(b))  # 512320401648&lt;br /&gt;
2336598724336&lt;br /&gt;
2336598528464&lt;br /&gt;
2336598467752&lt;br /&gt;
2336598467752&lt;br /&gt;
__new__方法主要是当你继承一些不可变的 class 时（比如 int, str, tuple）， 提供给你一个自定义这些类的实例化过程的途径。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class CapStr(str):&lt;br /&gt;
def &lt;strong&gt;new&lt;/strong&gt;(cls, string):&lt;br /&gt;
string = string.upper()&lt;br /&gt;
return str.&lt;strong&gt;new&lt;/strong&gt;(cls, string)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = CapStr(&amp;quot;i love lsgogroup&amp;quot;)&lt;br /&gt;
print(a)  # I LOVE LSGOGROUP&lt;br /&gt;
I LOVE LSGOGROUP&lt;br /&gt;
&lt;strong&gt;del&lt;/strong&gt; (self) 析构器，当一个对象将要被系统回收之时调用的方法。&lt;br /&gt;
Python 采用自动引用计数（ARC）方式来回收对象所占用的空间，当程序中有一个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 1；当程序中有两个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 2，依此类推，如果一个对象的引用计数变成了 0，则说明程序中不再有变量引用该对象，表明程序不再需要该对象，因此 Python 就会回收该对象。&lt;/p&gt;
&lt;p&gt;大部分时候，Python 的 ARC 都能准确、高效地回收系统中的每个对象。但如果系统中出现循环引用的情况，比如对象 a 持有一个实例变量引用对象 b，而对象 b 又持有一个实例变量引用对象 a，此时两个对象的引用计数都是 1，而实际上程序已经不再有变量引用它们，系统应该回收它们，此时 Python 的垃圾回收器就可能没那么快，要等专门的循环垃圾回收器（Cyclic Garbage Collector）来检测并回收这种引用循环。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class C(object):&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;
print(&#39;into C &lt;strong&gt;init&lt;/strong&gt;&#39;)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;del&lt;/strong&gt;(self):&lt;br /&gt;
print(&#39;into C &lt;strong&gt;del&lt;/strong&gt;&#39;)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
c1 = C()&lt;/p&gt;
&lt;h1 id=&#34;into-c-init&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#into-c-init&#34;&gt;#&lt;/a&gt; into C &lt;strong&gt;init&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;c2 = c1&lt;br /&gt;
c3 = c2&lt;br /&gt;
del c3&lt;br /&gt;
del c2&lt;br /&gt;
del c1&lt;/p&gt;
&lt;h1 id=&#34;into-c-del&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#into-c-del&#34;&gt;#&lt;/a&gt; into C &lt;strong&gt;del&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;into C &lt;strong&gt;init&lt;/strong&gt;&lt;br /&gt;
into C &lt;strong&gt;del&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;str&lt;/strong&gt;(self):&lt;/p&gt;
&lt;p&gt;当你打印一个对象的时候，触发__str__&lt;br /&gt;
当你使用 % s 格式化的时候，触发__str__&lt;br /&gt;
str 强转数据类型的时候，触发__str__&lt;br /&gt;
&lt;strong&gt;repr&lt;/strong&gt;(self)：&lt;/p&gt;
&lt;p&gt;repr 是 str 的备胎&lt;br /&gt;
有__str__的时候执行__str__, 没有实现__str__的时候，执行__repr__&lt;br /&gt;
repr (obj) 内置函数对应的结果是__repr__的返回值&lt;br /&gt;
当你使用 % r 格式化的时候 触发__repr__&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class Cat:&lt;br /&gt;
&amp;quot;&amp;quot;&amp;quot;定义一个猫类&amp;quot;&amp;quot;&amp;quot;&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, new_name, new_age):&lt;br /&gt;
&amp;quot;&amp;quot;&amp;quot;在创建完对象之后 会自动调用，它完成对象的初始化的功能&amp;quot;&amp;quot;&amp;quot;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt; = new_name&lt;br /&gt;
self.age = new_age&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;str&lt;/strong&gt;(self):&lt;br /&gt;
&amp;quot;&amp;quot;&amp;quot;返回一个对象的描述信息&amp;quot;&amp;quot;&amp;quot;&lt;br /&gt;
return&amp;quot; 名字是:% s , 年龄是:% d&amp;quot; % (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;, self.age)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __repr__(self):
    &amp;quot;&amp;quot;&amp;quot;返回一个对象的描述信息&amp;quot;&amp;quot;&amp;quot;
    return &amp;quot;Cat:(%s,%d)&amp;quot; % (self.name, self.age)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br /&gt;
def eat(self):&lt;br /&gt;
print (&amp;quot;% s 在吃鱼....&amp;quot; % &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;)&lt;br /&gt;
​&lt;br /&gt;
def drink(self):&lt;br /&gt;
print (&amp;quot;% s 在喝可乐...&amp;quot; % &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;)&lt;br /&gt;
​&lt;br /&gt;
def introduce(self):&lt;br /&gt;
print (&amp;quot;名字是:% s, 年龄是:% d&amp;quot; % (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlbGYubmFtZQ==&#34;&gt;self.name&lt;/span&gt;, self.age))&lt;br /&gt;
​&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;创建了一个对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建了一个对象&#34;&gt;#&lt;/a&gt; 创建了一个对象&lt;/h1&gt;
&lt;p&gt;tom = Cat (&amp;quot;汤姆&amp;quot;, 30)&lt;br /&gt;
 print (tom)  # 名字是：汤姆，年龄是：30&lt;br /&gt;
print (str (tom)) # 名字是：汤姆，年龄是：30&lt;br /&gt;
print (repr (tom))  # Cat:(汤姆，30)&lt;br /&gt;
 tom.eat ()  # 汤姆在吃鱼....&lt;br /&gt;
tom.introduce ()  # 名字是：汤姆，年龄是：30&lt;br /&gt;
 名字是：汤姆，年龄是：30&lt;br /&gt;
 名字是：汤姆，年龄是：30&lt;br /&gt;
Cat:(汤姆，30)&lt;br /&gt;
 汤姆在吃鱼....&lt;br /&gt;
 名字是：汤姆，年龄是：30&lt;br /&gt;
&lt;strong&gt;str&lt;/strong&gt; (self) 的返回结果可读性强。也就是说，&lt;strong&gt;str&lt;/strong&gt; 的意义是得到便于人们阅读的信息，就像下面的 &#39;2019-10-11&#39; 一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;repr&lt;/strong&gt; (self) 的返回结果应更准确。怎么说，&lt;strong&gt;repr&lt;/strong&gt; 存在的目的在于调试，便于开发者使用。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;import datetime&lt;br /&gt;
​&lt;br /&gt;
today = datetime.date.today()&lt;br /&gt;
print(str(today))  # 2019-10-11&lt;br /&gt;
print(repr(today))  # datetime.date(2019, 10, 11)&lt;br /&gt;
print(&#39;%s&#39; %today)  # 2019-10-11&lt;br /&gt;
print(&#39;%r&#39; %today)  # datetime.date(2019, 10, 11)&lt;br /&gt;
2020-08-01&lt;br /&gt;
datetime.date(2020, 8, 1)&lt;br /&gt;
2020-08-01&lt;br /&gt;
datetime.date(2020, 8, 1)&lt;br /&gt;
 算术运算符&lt;br /&gt;
类型工厂函数，指的是 “不通过类而是通过函数来创建对象”。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class C:&lt;br /&gt;
pass&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
print(type(len))  # &amp;lt;class &#39;builtin_function_or_method&#39;&amp;gt;&lt;br /&gt;
print(type(dir))  # &amp;lt;class &#39;builtin_function_or_method&#39;&amp;gt;&lt;br /&gt;
print(type(int))  # &amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
print(type(list))  # &amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
print(type(tuple))  # &amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
print(type(C))  # &amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
print(int(&#39;123&#39;))  # 123&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;这个例子中list工厂函数把一个元祖对象加工成了一个列表对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这个例子中list工厂函数把一个元祖对象加工成了一个列表对象&#34;&gt;#&lt;/a&gt; 这个例子中 list 工厂函数把一个元祖对象加工成了一个列表对象。&lt;/h1&gt;
&lt;p&gt;print(list((1, 2, 3)))  # [1, 2, 3]&lt;br /&gt;
&amp;lt;class &#39;builtin_function_or_method&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;builtin_function_or_method&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
&amp;lt;class &#39;type&#39;&amp;gt;&lt;br /&gt;
123&lt;br /&gt;
[1, 2, 3]&lt;br /&gt;
&lt;strong&gt;add&lt;/strong&gt; (self, other) 定义加法的行为：+&lt;br /&gt;
&lt;strong&gt;sub&lt;/strong&gt; (self, other) 定义减法的行为：-&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class MyClass:&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, height, weight):&lt;br /&gt;
self.height = height&lt;br /&gt;
self.weight = weight&lt;br /&gt;
​&lt;br /&gt;
# 两个对象的长相加，宽不变。返回一个新的类&lt;br /&gt;
 def &lt;strong&gt;add&lt;/strong&gt;(self, others):&lt;br /&gt;
return MyClass(self.height + others.height, self.weight + others.weight)&lt;br /&gt;
​&lt;br /&gt;
# 两个对象的宽相减，长不变。返回一个新的类&lt;br /&gt;
 def &lt;strong&gt;sub&lt;/strong&gt;(self, others):&lt;br /&gt;
return MyClass(self.height - others.height, self.weight - others.weight)&lt;br /&gt;
​&lt;br /&gt;
# 说一下自己的参数&lt;br /&gt;
 def intro (self):&lt;br /&gt;
print (&amp;quot;高为&amp;quot;, self.height, &amp;quot;重为&amp;quot;, self.weight)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
def main():&lt;br /&gt;
a = MyClass(height=10, weight=5)&lt;br /&gt;
a.intro()&lt;br /&gt;
​&lt;br /&gt;
b = MyClass(height=20, weight=10)&lt;br /&gt;
b.intro()&lt;br /&gt;
​&lt;br /&gt;
c = b - a&lt;br /&gt;
c.intro()&lt;br /&gt;
​&lt;br /&gt;
d = a + b&lt;br /&gt;
d.intro()&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
if &lt;strong&gt;name&lt;/strong&gt; == &#39;&lt;strong&gt;main&lt;/strong&gt;&#39;:&lt;br /&gt;
main()&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;高为-10-重为-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高为-10-重为-5&#34;&gt;#&lt;/a&gt; 高为 10  重为 5&lt;/h1&gt;
&lt;h1 id=&#34;高为-20-重为-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高为-20-重为-10&#34;&gt;#&lt;/a&gt; 高为 20  重为 10&lt;/h1&gt;
&lt;h1 id=&#34;高为-10-重为-5-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高为-10-重为-5-2&#34;&gt;#&lt;/a&gt; 高为 10  重为 5&lt;/h1&gt;
&lt;h1 id=&#34;高为-30-重为-15&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高为-30-重为-15&#34;&gt;#&lt;/a&gt; 高为 30  重为 15&lt;/h1&gt;
&lt;p&gt;高为 10  重为 5&lt;br /&gt;
 高为 20  重为 10&lt;br /&gt;
 高为 10  重为 5&lt;br /&gt;
 高为 30  重为 15&lt;br /&gt;
&lt;strong&gt;mul&lt;/strong&gt; (self, other) 定义乘法的行为：*&lt;br /&gt;
&lt;strong&gt;truediv&lt;/strong&gt; (self, other) 定义真除法的行为：/&lt;br /&gt;
&lt;strong&gt;floordiv&lt;/strong&gt; (self, other) 定义整数除法的行为：//&lt;br /&gt;
&lt;strong&gt;mod&lt;/strong&gt; (self, other) 定义取模算法的行为：%&lt;br /&gt;
&lt;strong&gt;divmod&lt;/strong&gt; (self, other) 定义当被 divmod () 调用时的行为&lt;br /&gt;
 divmod (a, b) 把除数和余数运算结果结合起来，返回一个包含商和余数的元组 (a //b, a % b)。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;print(divmod(7, 2))  # (3, 1)&lt;br /&gt;
print(divmod(8, 2))  # (4, 0)&lt;br /&gt;
(3, 1)&lt;br /&gt;
(4, 0)&lt;br /&gt;
&lt;strong&gt;pow&lt;/strong&gt; (self, other [, module]) 定义当被 power () 调用或 ** 运算时的行为&lt;br /&gt;
&lt;strong&gt; lshift&lt;/strong&gt; (self, other) 定义按位左移位的行为：&amp;lt;&amp;lt;&lt;br /&gt;
&lt;strong&gt;rshift&lt;/strong&gt; (self, other) 定义按位右移位的行为：&amp;gt;&amp;gt;&lt;br /&gt;
&lt;strong&gt;and&lt;/strong&gt; (self, other) 定义按位与操作的行为：&amp;amp;&lt;br /&gt;
&lt;strong&gt;xor&lt;/strong&gt; (self, other) 定义按位异或操作的行为：^&lt;br /&gt;
&lt;strong&gt;or&lt;/strong&gt; (self, other) 定义按位或操作的行为：|&lt;br /&gt;
 反算术运算符&lt;br /&gt;
反运算魔方方法，与算术运算符保持一一对应，不同之处就是反运算的魔法方法多了一个 “r”。当文件左操作不支持相应的操作时被调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;radd&lt;/strong&gt; (self, other) 定义加法的行为：+&lt;br /&gt;
&lt;strong&gt;rsub&lt;/strong&gt; (self, other) 定义减法的行为：-&lt;br /&gt;
&lt;strong&gt;rmul&lt;/strong&gt; (self, other) 定义乘法的行为：*&lt;br /&gt;
&lt;strong&gt;rtruediv&lt;/strong&gt; (self, other) 定义真除法的行为：/&lt;br /&gt;
&lt;strong&gt;rfloordiv&lt;/strong&gt; (self, other) 定义整数除法的行为：//&lt;br /&gt;
&lt;strong&gt;rmod&lt;/strong&gt; (self, other) 定义取模算法的行为：%&lt;br /&gt;
&lt;strong&gt;rdivmod&lt;/strong&gt; (self, other) 定义当被 divmod () 调用时的行为&lt;br /&gt;
&lt;strong&gt; rpow&lt;/strong&gt; (self, other [, module]) 定义当被 power () 调用或 ** 运算时的行为&lt;br /&gt;
&lt;strong&gt; rlshift&lt;/strong&gt; (self, other) 定义按位左移位的行为：&amp;lt;&amp;lt;&lt;br /&gt;
&lt;strong&gt;rrshift&lt;/strong&gt; (self, other) 定义按位右移位的行为：&amp;gt;&amp;gt;&lt;br /&gt;
&lt;strong&gt;rand&lt;/strong&gt; (self, other) 定义按位与操作的行为：&amp;amp;&lt;br /&gt;
&lt;strong&gt;rxor&lt;/strong&gt; (self, other) 定义按位异或操作的行为：^&lt;br /&gt;
&lt;strong&gt;ror&lt;/strong&gt; (self, other) 定义按位或操作的行为：|&lt;br /&gt;
a + b&lt;/p&gt;
&lt;p&gt;这里加数是 a，被加数是 b，因此是 a 主动，反运算就是如果 a 对象的__add__() 方法没有实现或者不支持相应的操作，那么 Python 就会调用 b 的__radd__() 方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;class Nint(int):&lt;br /&gt;
def &lt;strong&gt;radd&lt;/strong&gt;(self, other):&lt;br /&gt;
return int.&lt;strong&gt;sub&lt;/strong&gt; (other, self) # 注意 self 在后面&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
a = Nint(5)&lt;br /&gt;
b = Nint(3)&lt;br /&gt;
print(a + b)  # 8&lt;br /&gt;
print(1 + b)  # -2&lt;br /&gt;
8&lt;br /&gt;
-2&lt;br /&gt;
 增量赋值运算符&lt;br /&gt;
&lt;strong&gt; iadd&lt;/strong&gt; (self, other) 定义赋值加法的行为：+=&lt;br /&gt;
&lt;strong&gt;isub&lt;/strong&gt; (self, other) 定义赋值减法的行为：-=&lt;br /&gt;
&lt;strong&gt;imul&lt;/strong&gt; (self, other) 定义赋值乘法的行为：*=&lt;br /&gt;
&lt;strong&gt;itruediv&lt;/strong&gt; (self, other) 定义赋值真除法的行为：/=&lt;br /&gt;
&lt;strong&gt;ifloordiv&lt;/strong&gt; (self, other) 定义赋值整数除法的行为：//=&lt;br /&gt;
&lt;strong&gt;imod&lt;/strong&gt; (self, other) 定义赋值取模算法的行为：%=&lt;br /&gt;
&lt;strong&gt;ipow&lt;/strong&gt; (self, other [, modulo]) 定义赋值幂运算的行为：**=&lt;br /&gt;
&lt;strong&gt;ilshift&lt;/strong&gt; (self, other) 定义赋值按位左移位的行为：&amp;lt;&amp;lt;=&lt;br /&gt;
&lt;strong&gt;irshift&lt;/strong&gt; (self, other) 定义赋值按位右移位的行为：&amp;gt;&amp;gt;=&lt;br /&gt;
&lt;strong&gt;iand&lt;/strong&gt; (self, other) 定义赋值按位与操作的行为：&amp;amp;=&lt;br /&gt;
&lt;strong&gt;ixor&lt;/strong&gt; (self, other) 定义赋值按位异或操作的行为：^=&lt;br /&gt;
&lt;strong&gt;ior&lt;/strong&gt; (self, other) 定义赋值按位或操作的行为：|=&lt;br /&gt;
 一元运算符&lt;br /&gt;
&lt;strong&gt; neg&lt;/strong&gt; (self) 定义正号的行为：+x&lt;br /&gt;
&lt;strong&gt;pos&lt;/strong&gt; (self) 定义负号的行为：-x&lt;br /&gt;
&lt;strong&gt;abs&lt;/strong&gt; (self) 定义当被 abs () 调用时的行为&lt;br /&gt;
&lt;strong&gt; invert&lt;/strong&gt; (self) 定义按位求反的行为：~x&lt;br /&gt;
 属性访问&lt;br /&gt;
&lt;strong&gt; getattr&lt;/strong&gt; (self, name): 定义当用户试图获取一个不存在的属性时的行为。&lt;br /&gt;
&lt;strong&gt;getattribute&lt;/strong&gt; (self, name)：定义当该类的属性被访问时的行为（先调用该方法，查看是否存在该属性，若不存在，接着去调用__getattr__）。&lt;br /&gt;
&lt;strong&gt;setattr&lt;/strong&gt; (self, name, value)：定义当一个属性被设置时的行为。&lt;br /&gt;
&lt;strong&gt;delattr&lt;/strong&gt; (self, name)：定义当一个属性被删除时的行为。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class C:&lt;br /&gt;
def &lt;strong&gt;getattribute&lt;/strong&gt;(self, item):&lt;br /&gt;
print(&#39;&lt;strong&gt;getattribute&lt;/strong&gt;&#39;)&lt;br /&gt;
return super().&lt;strong&gt;getattribute&lt;/strong&gt;(item)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;getattr&lt;/strong&gt;(self, item):&lt;br /&gt;
print(&#39;&lt;strong&gt;getattr&lt;/strong&gt;&#39;)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;setattr&lt;/strong&gt;(self, key, value):&lt;br /&gt;
print(&#39;&lt;strong&gt;setattr&lt;/strong&gt;&#39;)&lt;br /&gt;
super().&lt;strong&gt;setattr&lt;/strong&gt;(key, value)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;delattr&lt;/strong&gt;(self, item):&lt;br /&gt;
print(&#39;&lt;strong&gt;delattr&lt;/strong&gt;&#39;)&lt;br /&gt;
super().&lt;strong&gt;delattr&lt;/strong&gt;(item)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
c = C()&lt;br /&gt;
c.x&lt;/p&gt;
&lt;h1 id=&#34;getattribute&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#getattribute&#34;&gt;#&lt;/a&gt; &lt;strong&gt;getattribute&lt;/strong&gt;&lt;/h1&gt;
&lt;h1 id=&#34;getattr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#getattr&#34;&gt;#&lt;/a&gt; &lt;strong&gt;getattr&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
c.x = 1&lt;/p&gt;
&lt;h1 id=&#34;setattr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#setattr&#34;&gt;#&lt;/a&gt; &lt;strong&gt;setattr&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
del c.x&lt;/p&gt;
&lt;h1 id=&#34;delattr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#delattr&#34;&gt;#&lt;/a&gt; &lt;strong&gt;delattr&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;getattribute&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;getattr&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;setattr&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;delattr&lt;/strong&gt;&lt;br /&gt;
 描述符&lt;br /&gt;
描述符就是将某种特殊类型的类的实例指派给另一个类的属性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get&lt;/strong&gt; (self, instance, owner) 用于访问属性，它返回属性的值。&lt;br /&gt;
&lt;strong&gt;set&lt;/strong&gt; (self, instance, value) 将在属性分配操作中调用，不返回任何内容。&lt;br /&gt;
&lt;strong&gt;del&lt;/strong&gt; (self, instance) 控制删除操作，不返回任何内容。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class MyDecriptor:&lt;br /&gt;
def &lt;strong&gt;get&lt;/strong&gt;(self, instance, owner):&lt;br /&gt;
print(&#39;&lt;strong&gt;get&lt;/strong&gt;&#39;, self, instance, owner)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;set&lt;/strong&gt;(self, instance, value):&lt;br /&gt;
print(&#39;&lt;strong&gt;set&lt;/strong&gt;&#39;, self, instance, value)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;delete&lt;/strong&gt;(self, instance):&lt;br /&gt;
print(&#39;&lt;strong&gt;delete&lt;/strong&gt;&#39;, self, instance)&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
class Test:&lt;br /&gt;
x = MyDecriptor()&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
t = Test()&lt;br /&gt;
t.x&lt;/p&gt;
&lt;h1 id=&#34;get-mainmydecriptor-object-at-0x000000ceaaeb6b00-maintest-object-at-0x000000ceabdc0898-class-maintest&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get-mainmydecriptor-object-at-0x000000ceaaeb6b00-maintest-object-at-0x000000ceabdc0898-class-maintest&#34;&gt;#&lt;/a&gt; &lt;strong&gt;get&lt;/strong&gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.MyDecriptor object at 0x000000CEAAEB6B00&amp;gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Test object at 0x000000CEABDC0898&amp;gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.Test&#39;&amp;gt;&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
t.x = &#39;x-man&#39;&lt;/p&gt;
&lt;h1 id=&#34;set-mainmydecriptor-object-at-0x00000023687c6b00-maintest-object-at-0x00000023696b0940-x-man&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set-mainmydecriptor-object-at-0x00000023687c6b00-maintest-object-at-0x00000023696b0940-x-man&#34;&gt;#&lt;/a&gt; &lt;strong&gt;set&lt;/strong&gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.MyDecriptor object at 0x00000023687C6B00&amp;gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Test object at 0x00000023696B0940&amp;gt; x-man&lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
del t.x&lt;/p&gt;
&lt;h1 id=&#34;delete-mainmydecriptor-object-at-0x000000ec9b160a90-maintest-object-at-0x000000ec9b160b38&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#delete-mainmydecriptor-object-at-0x000000ec9b160a90-maintest-object-at-0x000000ec9b160b38&#34;&gt;#&lt;/a&gt; &lt;strong&gt;delete&lt;/strong&gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.MyDecriptor object at 0x000000EC9B160A90&amp;gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Test object at 0x000000EC9B160B38&amp;gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;get&lt;/strong&gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.MyDecriptor object at 0x0000022008242668&amp;gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Test object at 0x00000220082427B8&amp;gt; &amp;lt;class &#39;&lt;strong&gt;main&lt;/strong&gt;.Test&#39;&amp;gt;&lt;br /&gt;
&lt;strong&gt;set&lt;/strong&gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.MyDecriptor object at 0x0000022008242668&amp;gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Test object at 0x00000220082427B8&amp;gt; x-man&lt;br /&gt;
&lt;strong&gt;delete&lt;/strong&gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.MyDecriptor object at 0x0000022008242668&amp;gt; &amp;lt;&lt;strong&gt;main&lt;/strong&gt;.Test object at 0x00000220082427B8&amp;gt;&lt;br /&gt;
 定制序列&lt;br /&gt;
协议（Protocols）与其它编程语言中的接口很相似，它规定你哪些方法必须要定义。然而，在 Python 中的协议就显得不那么正式。事实上，在 Python 中，协议更像是一种指南。&lt;/p&gt;
&lt;p&gt;容器类型的协议&lt;/p&gt;
&lt;p&gt;如果说你希望定制的容器是不可变的话，你只需要定义__len__() 和__getitem__() 方法。&lt;br /&gt;
如果你希望定制的容器是可变的话，除了__len__() 和__getitem__() 方法，你还需要定义__setitem__() 和__delitem__() 两个方法。&lt;br /&gt;
【例子】编写一个不可改变的自定义列表，要求记录列表中每个元素被访问的次数。&lt;/p&gt;
&lt;p&gt;class CountList:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, *args):&lt;br /&gt;
self.values = [x for x in args]&lt;br /&gt;
self.count = {}.fromkeys(range(len(self.values)), 0)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;len&lt;/strong&gt;(self):&lt;br /&gt;
return len(self.values)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;getitem&lt;/strong&gt;(self, item):&lt;br /&gt;
self.count[item] += 1&lt;br /&gt;
return self.values[item]&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
c1 = CountList(1, 3, 5, 7, 9)&lt;br /&gt;
c2 = CountList(2, 4, 6, 8, 10)&lt;br /&gt;
print(c1[1])  # 3&lt;br /&gt;
print(c2[2])  # 6&lt;br /&gt;
print(c1[1] + c2[1])  # 7&lt;br /&gt;
​&lt;br /&gt;
print(c1.count)&lt;/p&gt;
&lt;h1 0:=&#34;&#34; 0,=&#34;&#34; 1:=&#34;&#34; 2,=&#34;&#34; 2:=&#34;&#34; 0,=&#34;&#34; 3:=&#34;&#34; 0,=&#34;&#34; 4:=&#34;&#34; 0=&#34;&#34; id=&#34;-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-7&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;​&lt;br /&gt;
print(c2.count)&lt;/p&gt;
&lt;h1 0:=&#34;&#34; 0,=&#34;&#34; 1:=&#34;&#34; 1,=&#34;&#34; 2:=&#34;&#34; 1,=&#34;&#34; 3:=&#34;&#34; 0,=&#34;&#34; 4:=&#34;&#34; 0=&#34;&#34; id=&#34;-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-8&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;3&lt;br /&gt;
6&lt;br /&gt;
7&lt;br /&gt;
{0: 0, 1: 2, 2: 0, 3: 0, 4: 0}&lt;br /&gt;
{0: 0, 1: 1, 2: 1, 3: 0, 4: 0}&lt;br /&gt;
&lt;strong&gt;len&lt;/strong&gt; (self) 定义当被 len () 调用时的行为（返回容器中元素的个数）。&lt;br /&gt;
&lt;strong&gt;getitem&lt;/strong&gt; (self, key) 定义获取容器中元素的行为，相当于 self [key]。&lt;br /&gt;
&lt;strong&gt;setitem&lt;/strong&gt; (self, key, value) 定义设置容器中指定元素的行为，相当于 self [key] = value。&lt;br /&gt;
&lt;strong&gt;delitem&lt;/strong&gt; (self, key) 定义删除容器中指定元素的行为，相当于 del self [key]。&lt;br /&gt;
【例子】编写一个可改变的自定义列表，要求记录列表中每个元素被访问的次数。&lt;/p&gt;
&lt;p&gt;class CountList:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, *args):&lt;br /&gt;
self.values = [x for x in args]&lt;br /&gt;
self.count = {}.fromkeys(range(len(self.values)), 0)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;len&lt;/strong&gt;(self):&lt;br /&gt;
return len(self.values)&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;getitem&lt;/strong&gt;(self, item):&lt;br /&gt;
self.count[item] += 1&lt;br /&gt;
return self.values[item]&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;setitem&lt;/strong&gt;(self, key, value):&lt;br /&gt;
self.values[key] = value&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;delitem&lt;/strong&gt;(self, key):&lt;br /&gt;
del self.values[key]&lt;br /&gt;
for i in range(0, len(self.values)):&lt;br /&gt;
if i &amp;gt;= key:&lt;br /&gt;
self.count[i] = self.count[i + 1]&lt;br /&gt;
self.count.pop(len(self.values))&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
c1 = CountList(1, 3, 5, 7, 9)&lt;br /&gt;
c2 = CountList(2, 4, 6, 8, 10)&lt;br /&gt;
print(c1[1])  # 3&lt;br /&gt;
print(c2[2])  # 6&lt;br /&gt;
c2[2] = 12&lt;br /&gt;
print(c1[1] + c2[2])  # 15&lt;br /&gt;
print(c1.count)&lt;/p&gt;
&lt;h1 0:=&#34;&#34; 0,=&#34;&#34; 1:=&#34;&#34; 2,=&#34;&#34; 2:=&#34;&#34; 0,=&#34;&#34; 3:=&#34;&#34; 0,=&#34;&#34; 4:=&#34;&#34; 0=&#34;&#34; id=&#34;-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-9&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;print(c2.count)&lt;/p&gt;
&lt;h1 0:=&#34;&#34; 0,=&#34;&#34; 1:=&#34;&#34; 0,=&#34;&#34; 2:=&#34;&#34; 2,=&#34;&#34; 3:=&#34;&#34; 0,=&#34;&#34; 4:=&#34;&#34; 0=&#34;&#34; id=&#34;-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-10&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;del c1[1]&lt;br /&gt;
print(c1.count)&lt;/p&gt;
&lt;h1 0:=&#34;&#34; 0,=&#34;&#34; 1:=&#34;&#34; 0,=&#34;&#34; 2:=&#34;&#34; 0,=&#34;&#34; 3:=&#34;&#34; 0=&#34;&#34; id=&#34;-11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-11&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;p&gt;3&lt;br /&gt;
6&lt;br /&gt;
15&lt;br /&gt;
{0: 0, 1: 2, 2: 0, 3: 0, 4: 0}&lt;br /&gt;
{0: 0, 1: 0, 2: 2, 3: 0, 4: 0}&lt;br /&gt;
{0: 0, 1: 0, 2: 0, 3: 0}&lt;br /&gt;
 迭代器&lt;br /&gt;
迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。&lt;br /&gt;
迭代器是一个可以记住遍历的位置的对象。&lt;br /&gt;
迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。&lt;br /&gt;
迭代器只能往前不会后退。&lt;br /&gt;
字符串，列表或元组对象都可用于创建迭代器：&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;string = &#39;lsgogroup&#39;&lt;br /&gt;
for c in string:&lt;br /&gt;
print(c)&lt;br /&gt;
​&lt;br /&gt;
&#39;&#39;&#39;&lt;br /&gt;
l&lt;br /&gt;
s&lt;br /&gt;
g&lt;br /&gt;
o&lt;br /&gt;
g&lt;br /&gt;
r&lt;br /&gt;
o&lt;br /&gt;
u&lt;br /&gt;
p&lt;br /&gt;
&#39;&#39;&#39;&lt;br /&gt;
​&lt;br /&gt;
for c in iter(string):&lt;br /&gt;
print(c)&lt;br /&gt;
l&lt;br /&gt;
s&lt;br /&gt;
g&lt;br /&gt;
o&lt;br /&gt;
g&lt;br /&gt;
r&lt;br /&gt;
o&lt;br /&gt;
u&lt;br /&gt;
p&lt;br /&gt;
l&lt;br /&gt;
s&lt;br /&gt;
g&lt;br /&gt;
o&lt;br /&gt;
g&lt;br /&gt;
r&lt;br /&gt;
o&lt;br /&gt;
u&lt;br /&gt;
p&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;links = {&#39;B&#39;: &#39; 百度 &#39;, &#39;A&#39;: &#39; 阿里 &#39;, &#39;T&#39;: &#39; 腾讯 &#39;}&lt;br /&gt;
for each in links:&lt;br /&gt;
print(&#39;%s -&amp;gt; %s&#39; % (each, links[each]))&lt;/p&gt;
&lt;p&gt;&#39;&#39;&#39;&lt;br /&gt;
B -&amp;gt; 百度&lt;br /&gt;
 A -&amp;gt; 阿里&lt;br /&gt;
 T -&amp;gt; 腾讯&lt;br /&gt;
 &#39;&#39;&#39;&lt;br /&gt;
​&lt;br /&gt;
for each in iter(links):&lt;br /&gt;
print(&#39;%s -&amp;gt; %s&#39; % (each, links[each]))&lt;br /&gt;
 B -&amp;gt; 百度&lt;br /&gt;
 A -&amp;gt; 阿里&lt;br /&gt;
 T -&amp;gt; 腾讯&lt;br /&gt;
 B -&amp;gt; 百度&lt;br /&gt;
 A -&amp;gt; 阿里&lt;br /&gt;
 T -&amp;gt; 腾讯&lt;br /&gt;
迭代器有两个基本的方法：iter () 和 next ()。&lt;br /&gt;
iter (object) 函数用来生成迭代器。&lt;br /&gt;
next (iterator [, default]) 返回迭代器的下一个项目。&lt;br /&gt;
iterator -- 可迭代对象&lt;br /&gt;
 default -- 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 StopIteration 异常。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;links = {&#39;B&#39;: &#39; 百度 &#39;, &#39;A&#39;: &#39; 阿里 &#39;, &#39;T&#39;: &#39; 腾讯 &#39;}&lt;br /&gt;
​&lt;br /&gt;
it = iter(links)&lt;br /&gt;
while True:&lt;br /&gt;
try:&lt;br /&gt;
each = next(it)&lt;br /&gt;
except StopIteration:&lt;br /&gt;
break&lt;br /&gt;
print(each)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;b&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#b&#34;&gt;#&lt;/a&gt; B&lt;/h1&gt;
&lt;h1 id=&#34;a&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#a&#34;&gt;#&lt;/a&gt; A&lt;/h1&gt;
&lt;h1 id=&#34;t&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#t&#34;&gt;#&lt;/a&gt; T&lt;/h1&gt;
&lt;h2 id=&#34;it-iterlinksprintnextit-bprintnextit-aprintnextit-tprintnextit-stopiterationbatbat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#it-iterlinksprintnextit-bprintnextit-aprintnextit-tprintnextit-stopiterationbatbat&#34;&gt;#&lt;/a&gt; ​&lt;br /&gt;
it = iter(links)&lt;br /&gt;
print(next(it))  # B&lt;br /&gt;
print(next(it))  # A&lt;br /&gt;
print(next(it))  # T&lt;br /&gt;
print(next(it))  # StopIteration&lt;br /&gt;
B&lt;br /&gt;
A&lt;br /&gt;
T&lt;br /&gt;
B&lt;br /&gt;
A&lt;br /&gt;
T&lt;/h2&gt;
&lt;p&gt;StopIteration                             Traceback (most recent call last)&lt;br /&gt;
&amp;lt;ipython-input-2-682f811edce7&amp;gt; in &amp;lt;module&amp;gt;()&lt;br /&gt;
17 print(next(it))  # A&lt;br /&gt;
18 print(next(it))  # T&lt;br /&gt;
---&amp;gt; 19 print(next(it))  # StopIteration&lt;/p&gt;
&lt;p&gt;StopIteration:&lt;br /&gt;
 把一个类作为一个迭代器使用需要在类中实现两个魔法方法 &lt;strong&gt;iter&lt;/strong&gt; () 与 &lt;strong&gt;next&lt;/strong&gt;() 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iter&lt;/strong&gt; (self) 定义当迭代容器中的元素的行为，返回一个特殊的迭代器对象， 这个迭代器对象实现了 &lt;strong&gt;next&lt;/strong&gt; () 方法并通过 StopIteration 异常标识迭代的完成。&lt;br /&gt;
&lt;strong&gt;next&lt;/strong&gt; () 返回下一个迭代器对象。&lt;br /&gt;
StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 &lt;strong&gt;next&lt;/strong&gt; () 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;class Fibs:&lt;br /&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self, n=10):&lt;br /&gt;
self.a = 0&lt;br /&gt;
self.b = 1&lt;br /&gt;
self.n = n&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;iter&lt;/strong&gt;(self):&lt;br /&gt;
return self&lt;br /&gt;
​&lt;br /&gt;
def &lt;strong&gt;next&lt;/strong&gt;(self):&lt;br /&gt;
self.a, self.b = self.b, self.a + self.b&lt;br /&gt;
if self.a &amp;gt; self.n:&lt;br /&gt;
raise StopIteration&lt;br /&gt;
return self.a&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
fibs = Fibs(100)&lt;br /&gt;
for each in fibs:&lt;br /&gt;
print(each, end=&#39; &#39;)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;1-1-2-3-5-8-13-21-34-55-89&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-1-2-3-5-8-13-21-34-55-89&#34;&gt;#&lt;/a&gt; 1 1 2 3 5 8 13 21 34 55 89&lt;/h1&gt;
&lt;p&gt;1 1 2 3 5 8 13 21 34 55 89&lt;br /&gt;
4.10 生成器&lt;/p&gt;
&lt;p&gt;在 Python 中，使用了 yield 的函数被称为生成器（generator）。&lt;br /&gt;
跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。&lt;br /&gt;
在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值，并在下一次执行 next () 方法时从当前位置继续运行。&lt;br /&gt;
调用一个生成器函数，返回的是一个迭代器对象。&lt;br /&gt;
【例子】&lt;/p&gt;
&lt;p&gt;def myGen():&lt;br /&gt;
print (&#39; 生成器执行！&#39;)&lt;br /&gt;
yield 1&lt;br /&gt;
yield 2&lt;/p&gt;
&lt;p&gt;myG = myGen()&lt;br /&gt;
for each in myG:&lt;br /&gt;
print(each)&lt;br /&gt;
​&lt;br /&gt;
&#39;&#39;&#39;&lt;br /&gt;
 生成器执行！&lt;br /&gt;
1&lt;br /&gt;
2&lt;br /&gt;
&#39;&#39;&#39;&lt;br /&gt;
​&lt;br /&gt;
myG = myGen()&lt;br /&gt;
print(next(myG))&lt;/p&gt;
&lt;h1 id=&#34;生成器执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成器执行&#34;&gt;#&lt;/a&gt; 生成器执行！&lt;/h1&gt;
&lt;h1 id=&#34;1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1&#34;&gt;#&lt;/a&gt; 1&lt;/h1&gt;
&lt;h2 id=&#34;printnextmyg-2printnextmyg-stopiteration生成器执行12生成器执行12&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#printnextmyg-2printnextmyg-stopiteration生成器执行12生成器执行12&#34;&gt;#&lt;/a&gt; ​&lt;br /&gt;
print(next(myG))  # 2&lt;br /&gt;
print(next(myG))  # StopIteration&lt;br /&gt;
 生成器执行！&lt;br /&gt;
1&lt;br /&gt;
2&lt;br /&gt;
 生成器执行！&lt;br /&gt;
1&lt;br /&gt;
2&lt;/h2&gt;
&lt;p&gt;StopIteration                             Traceback (most recent call last)&lt;br /&gt;
&amp;lt;ipython-input-6-56bfa60ce8de&amp;gt; in &amp;lt;module&amp;gt;()&lt;br /&gt;
14&lt;br /&gt;
15 print(next(myG))  # 2&lt;br /&gt;
---&amp;gt; 16 print(next(myG))  # StopIteration&lt;/p&gt;
&lt;p&gt;StopIteration:&lt;br /&gt;
【例子】用生成器实现斐波那契数列。&lt;/p&gt;
&lt;p&gt;def libs(n):&lt;br /&gt;
a = 0&lt;br /&gt;
b = 1&lt;br /&gt;
while True:&lt;br /&gt;
a, b = b, a + b&lt;br /&gt;
if a &amp;gt; n:&lt;br /&gt;
return&lt;br /&gt;
yield a&lt;br /&gt;
​&lt;br /&gt;
​&lt;br /&gt;
for each in libs(100):&lt;br /&gt;
print(each, end=&#39; &#39;)&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&#34;1-1-2-3-5-8-13-21-34-55-89-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-1-2-3-5-8-13-21-34-55-89-2&#34;&gt;#&lt;/a&gt; 1 1 2 3 5 8 13 21 34 55 89&lt;/h1&gt;
&lt;p&gt;1 1 2 3 5 8 13 21 34 55 89&lt;/p&gt;
</content>
        <updated>2021-01-29T13:38:29.000Z</updated>
    </entry>
</feed>
